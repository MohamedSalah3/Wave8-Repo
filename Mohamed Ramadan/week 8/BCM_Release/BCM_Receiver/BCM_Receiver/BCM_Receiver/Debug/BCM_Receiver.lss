
BCM_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000041c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800068  00800068  000004b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b9  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a14  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000849  00000000  00000000  00002639  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa3  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085c  00000000  00000000  00003cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
  34:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_13>
  38:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_14>
  3c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  8a:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RxApp>:
		gu8_TxDispatchCounter = 255;
		gu8_TxCheckSum = 0;
	}

	return E_OK;
}
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gu8_SPIRECEIVECOMP>
  98:	08 95       	ret

0000009a <BCM_Init>:
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	29 97       	sbiw	r28, 0x09	; 9
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	9c 01       	movw	r18, r24
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	e2 e6       	ldi	r30, 0x62	; 98
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	de 01       	movw	r26, r28
  ba:	11 96       	adiw	r26, 0x01	; 1
  bc:	01 90       	ld	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <BCM_Init+0x22>
  c4:	1f 82       	std	Y+7, r1	; 0x07
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	88 87       	std	Y+8, r24	; 0x08
  ca:	19 86       	std	Y+9, r1	; 0x09
  cc:	f9 01       	movw	r30, r18
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	91 30       	cpi	r25, 0x01	; 1
  d2:	21 f0       	breq	.+8      	; 0xdc <BCM_Init+0x42>
  d4:	28 f0       	brcs	.+10     	; 0xe0 <BCM_Init+0x46>
  d6:	92 30       	cpi	r25, 0x02	; 2
  d8:	41 f0       	breq	.+16     	; 0xea <BCM_Init+0x50>
  da:	0b c0       	rjmp	.+22     	; 0xf2 <BCM_Init+0x58>
  dc:	10 e0       	ldi	r17, 0x00	; 0
  de:	0a c0       	rjmp	.+20     	; 0xf4 <BCM_Init+0x5a>
  e0:	1a 82       	std	Y+2, r1	; 0x02
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8f 83       	std	Y+7, r24	; 0x07
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <BCM_Init+0x5a>
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	8a 83       	std	Y+2, r24	; 0x02
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <BCM_Init+0x5a>
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	f9 01       	movw	r30, r18
  f6:	80 81       	ld	r24, Z
  f8:	80 3a       	cpi	r24, 0xA0	; 160
  fa:	19 f0       	breq	.+6      	; 0x102 <BCM_Init+0x68>
  fc:	81 3a       	cpi	r24, 0xA1	; 161
  fe:	31 f0       	breq	.+12     	; 0x10c <BCM_Init+0x72>
 100:	0a c0       	rjmp	.+20     	; 0x116 <BCM_Init+0x7c>
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <UART_init>
 10a:	06 c0       	rjmp	.+12     	; 0x118 <BCM_Init+0x7e>
 10c:	ce 01       	movw	r24, r28
 10e:	07 96       	adiw	r24, 0x07	; 7
 110:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_init>
 114:	01 c0       	rjmp	.+2      	; 0x118 <BCM_Init+0x7e>
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	81 2f       	mov	r24, r17
 11a:	29 96       	adiw	r28, 0x09	; 9
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <BCM_SetupRxBuffer>:

EnmBCMError_t BCM_SetupRxBuffer(uint8_t ProtocolID, uint8_t* ArrayFirstElementAddress, uint16_t ArraySize)
{
	uint8_t au8_Ret = E_OK;

	RxCfg.BCM_ArraySize = ArraySize;
 12e:	eb e6       	ldi	r30, 0x6B	; 107
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	54 83       	std	Z+4, r21	; 0x04
 134:	43 83       	std	Z+3, r20	; 0x03
	RxCfg.BCM_ArrayStartAddress = ArrayFirstElementAddress;
 136:	72 83       	std	Z+2, r23	; 0x02
 138:	61 83       	std	Z+1, r22	; 0x01
	RxCfg.BCM_ProtocolID = ProtocolID;
 13a:	80 83       	st	Z, r24

	switch(ProtocolID)
 13c:	80 3a       	cpi	r24, 0xA0	; 160
 13e:	19 f0       	breq	.+6      	; 0x146 <BCM_SetupRxBuffer+0x18>
 140:	81 3a       	cpi	r24, 0xA1	; 161
 142:	39 f0       	breq	.+14     	; 0x152 <BCM_SetupRxBuffer+0x24>
 144:	0c c0       	rjmp	.+24     	; 0x15e <BCM_SetupRxBuffer+0x30>
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
 146:	89 e4       	ldi	r24, 0x49	; 73
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UART_RXC_setCallBack>
	return au8_Ret;
}

EnmBCMError_t BCM_SetupRxBuffer(uint8_t ProtocolID, uint8_t* ArrayFirstElementAddress, uint16_t ArraySize)
{
	uint8_t au8_Ret = E_OK;
 14e:	80 e0       	ldi	r24, 0x00	; 0

	switch(ProtocolID)
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
		break;
 150:	08 95       	ret
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
 152:	89 e4       	ldi	r24, 0x49	; 73
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_setCallBack>
	return au8_Ret;
}

EnmBCMError_t BCM_SetupRxBuffer(uint8_t ProtocolID, uint8_t* ArrayFirstElementAddress, uint16_t ArraySize)
{
	uint8_t au8_Ret = E_OK;
 15a:	80 e0       	ldi	r24, 0x00	; 0
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
		break;
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
		break;
 15c:	08 95       	ret
	default:
		au8_Ret = E_NOK;
 15e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

	return au8_Ret;
}
 160:	08 95       	ret

00000162 <BCM_Receive>:

EnmBCMError_t BCM_Receive(strBcmSendConfig_t* ConfigPtr)
{
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	
	static uint8_t au8_Ret = E_OK;
	PointerToReceiverFunction apf_ReceiverFunction = NULL;
   
	switch(ConfigPtr->BCM_ProtocolID)
 16c:	88 81       	ld	r24, Y
 16e:	80 3a       	cpi	r24, 0xA0	; 160
 170:	19 f0       	breq	.+6      	; 0x178 <BCM_Receive+0x16>
 172:	81 3a       	cpi	r24, 0xA1	; 161
 174:	31 f0       	breq	.+12     	; 0x182 <BCM_Receive+0x20>
 176:	18 c0       	rjmp	.+48     	; 0x1a8 <BCM_Receive+0x46>
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
 178:	89 e4       	ldi	r24, 0x49	; 73
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UART_RXC_setCallBack>
		apf_ReceiverFunction = UART_receive;
		break;
 180:	16 c0       	rjmp	.+44     	; 0x1ae <BCM_Receive+0x4c>
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
 182:	89 e4       	ldi	r24, 0x49	; 73
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SPI_setCallBack>
		ConfigPtr->BCM_ArrayStartAddress[gu8_RxCounter] = SPI_receiveByte();
 18a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_RxCounter>
 18e:	09 81       	ldd	r16, Y+1	; 0x01
 190:	1a 81       	ldd	r17, Y+2	; 0x02
 192:	08 0f       	add	r16, r24
 194:	11 1d       	adc	r17, r1
 196:	0e 94 55 01 	call	0x2aa	; 0x2aa <SPI_receiveByte>
 19a:	f8 01       	movw	r30, r16
 19c:	80 83       	st	Z, r24
		TCNT0 = ConfigPtr->BCM_ArrayStartAddress[0];
 19e:	e9 81       	ldd	r30, Y+1	; 0x01
 1a0:	fa 81       	ldd	r31, Y+2	; 0x02
 1a2:	80 81       	ld	r24, Z
 1a4:	82 bf       	out	0x32, r24	; 50
		break;
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <BCM_Receive+0x4c>
	default:
		au8_Ret = E_NOK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		break;
	}
	gu8_RxCounter++;
 1ae:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu8_RxCounter>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu8_RxCounter>
		
			
	return au8_Ret;
}
 1b8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <BCM_RxDispatch>:
EnmBCMError_t BCM_RxDispatch(void)
{
	
	uint8_t au8_Ret = E_OK;

if(gu8_SPIRECEIVECOMP==1){
 1c6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gu8_SPIRECEIVECOMP>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <BCM_RxDispatch+0x10>
	
	BCM_Receive(&RxCfg);
 1ce:	8b e6       	ldi	r24, 0x6B	; 107
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 b1 00 	call	0x162	; 0x162 <BCM_Receive>
}

gu8_SPIRECEIVECOMP = 0;
 1d6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <gu8_SPIRECEIVECOMP>

	return au8_Ret;
}
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret

000001de <main>:
		BCM_RECEIVE
};

int main(void)
{
BCM_Init(&cfg);
 1de:	80 e6       	ldi	r24, 0x60	; 96
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 4d 00 	call	0x9a	; 0x9a <BCM_Init>

sei();
 1e6:	78 94       	sei

BCM_SetupRxBuffer(BCM_SPI_ID, (uint8_t*)Buffer, sizeof(Buffer));
 1e8:	45 e0       	ldi	r20, 0x05	; 5
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	68 e7       	ldi	r22, 0x78	; 120
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	81 ea       	ldi	r24, 0xA1	; 161
 1f2:	0e 94 97 00 	call	0x12e	; 0x12e <BCM_SetupRxBuffer>

while(1)
{
	BCM_RxDispatch();
 1f6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <BCM_RxDispatch>
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <main+0x18>

000001fc <__vector_12>:
	//mBufDat =SPDR;
	//TCNT2 = mBufDat;
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
 21e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <g_SPI_callBackPtr>
 222:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <g_SPI_callBackPtr+0x1>
 226:	30 97       	sbiw	r30, 0x00	; 0
 228:	09 f0       	breq	.+2      	; 0x22c <__vector_12+0x30>
 22a:	09 95       	icall
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <SPI_init>:
 24e:	fc 01       	movw	r30, r24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	84 bb       	out	0x14, r24	; 20
 254:	80 81       	ld	r24, Z
 256:	81 11       	cpse	r24, r1
 258:	06 c0       	rjmp	.+12     	; 0x266 <SPI_init+0x18>
 25a:	87 b3       	in	r24, 0x17	; 23
 25c:	8f 74       	andi	r24, 0x4F	; 79
 25e:	87 bb       	out	0x17, r24	; 23
 260:	be 9a       	sbi	0x17, 6	; 23
 262:	6c 98       	cbi	0x0d, 4	; 13
 264:	07 c0       	rjmp	.+14     	; 0x274 <SPI_init+0x26>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	29 f4       	brne	.+10     	; 0x274 <SPI_init+0x26>
 26a:	87 b3       	in	r24, 0x17	; 23
 26c:	80 6b       	ori	r24, 0xB0	; 176
 26e:	87 bb       	out	0x17, r24	; 23
 270:	be 98       	cbi	0x17, 6	; 23
 272:	6c 9a       	sbi	0x0d, 4	; 13
 274:	8d b1       	in	r24, 0x0d	; 13
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	91 81       	ldd	r25, Z+1	; 0x01
 27a:	89 2b       	or	r24, r25
 27c:	8d b9       	out	0x0d, r24	; 13
 27e:	6e 9a       	sbi	0x0d, 6	; 13
 280:	9d b1       	in	r25, 0x0d	; 13
 282:	82 81       	ldd	r24, Z+2	; 0x02
 284:	83 70       	andi	r24, 0x03	; 3
 286:	9c 7f       	andi	r25, 0xFC	; 252
 288:	98 2b       	or	r25, r24
 28a:	9d b9       	out	0x0d, r25	; 13
 28c:	9e b1       	in	r25, 0x0e	; 14
 28e:	82 81       	ldd	r24, Z+2	; 0x02
 290:	28 2f       	mov	r18, r24
 292:	26 95       	lsr	r18
 294:	26 95       	lsr	r18
 296:	89 2f       	mov	r24, r25
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	82 2b       	or	r24, r18
 29c:	8e b9       	out	0x0e, r24	; 14
 29e:	08 95       	ret

000002a0 <SPI_setCallBack>:
 2a0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <g_SPI_callBackPtr+0x1>
 2a4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <g_SPI_callBackPtr>
 2a8:	08 95       	ret

000002aa <SPI_receiveByte>:
/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
	TCNT2 =SPDR;
 2aa:	8f b1       	in	r24, 0x0f	; 15
 2ac:	84 bd       	out	0x24, r24	; 36
	return SPDR;
 2ae:	8f b1       	in	r24, 0x0f	; 15

	/* read the data */
	

	
}
 2b0:	08 95       	ret

000002b2 <__vector_13>:
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
}

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <g_RXC_callBackPtr>
 2d8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <g_RXC_callBackPtr+0x1>
 2dc:	30 97       	sbiw	r30, 0x00	; 0
 2de:	09 f0       	breq	.+2      	; 0x2e2 <__vector_13+0x30>
 2e0:	09 95       	icall
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_14>:
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
 326:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <g_UDRE_callBackPtr>
 32a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <g_UDRE_callBackPtr+0x1>
 32e:	30 97       	sbiw	r30, 0x00	; 0
 330:	09 f0       	breq	.+2      	; 0x334 <__vector_14+0x30>
 332:	09 95       	icall
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	7f 91       	pop	r23
 342:	6f 91       	pop	r22
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_15>:
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
 378:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <g_TXC_callBackPtr>
 37c:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <g_TXC_callBackPtr+0x1>
 380:	30 97       	sbiw	r30, 0x00	; 0
 382:	09 f0       	breq	.+2      	; 0x386 <__vector_15+0x30>
 384:	09 95       	icall
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <UART_RXC_setCallBack>:
 3a8:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_RXC_callBackPtr+0x1>
 3ac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_RXC_callBackPtr>
 3b0:	08 95       	ret

000003b2 <UART_init>:
}

void UART_init(const UART_ConfigType* ConfigPtr)
{
 3b2:	fc 01       	movw	r30, r24
	/* Activating double speed mode */
	SET_BIT(UCSRA_R, U2X);
 3b4:	59 9a       	sbi	0x0b, 1	; 11

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
 3b6:	81 81       	ldd	r24, Z+1	; 0x01
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	51 f0       	breq	.+20     	; 0x3d0 <UART_init+0x1e>
 3bc:	18 f0       	brcs	.+6      	; 0x3c4 <UART_init+0x12>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	69 f0       	breq	.+26     	; 0x3dc <UART_init+0x2a>
 3c2:	13 c0       	rjmp	.+38     	; 0x3ea <UART_init+0x38>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB_R, TXEN);
 3c4:	53 9a       	sbi	0x0a, 3	; 10
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 3c6:	85 81       	ldd	r24, Z+5	; 0x05
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	79 f4       	brne	.+30     	; 0x3ea <UART_init+0x38>
			{SET_BIT(UCSRB_R, TXCIE);
 3cc:	56 9a       	sbi	0x0a, 6	; 10
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <UART_init+0x38>
				
			}
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB_R, RXEN);
 3d0:	54 9a       	sbi	0x0a, 4	; 10
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 3d2:	85 81       	ldd	r24, Z+5	; 0x05
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	49 f4       	brne	.+18     	; 0x3ea <UART_init+0x38>
			SET_BIT(UCSRB_R, RXCIE);
 3d8:	57 9a       	sbi	0x0a, 7	; 10
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <UART_init+0x38>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB_R, TXEN);
 3dc:	53 9a       	sbi	0x0a, 3	; 10
		SET_BIT(UCSRB_R, RXEN);
 3de:	54 9a       	sbi	0x0a, 4	; 10
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 3e0:	85 81       	ldd	r24, Z+5	; 0x05
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	11 f4       	brne	.+4      	; 0x3ea <UART_init+0x38>
		{
			SET_BIT(UCSRB_R, TXCIE);
 3e6:	56 9a       	sbi	0x0a, 6	; 10
			SET_BIT(UCSRB_R, RXCIE);
 3e8:	57 9a       	sbi	0x0a, 7	; 10
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB_R = (UCSRB_R & 0xFB) | (ConfigPtr->charSize & 0x04);
 3ea:	8a b1       	in	r24, 0x0a	; 10
 3ec:	92 81       	ldd	r25, Z+2	; 0x02
 3ee:	94 70       	andi	r25, 0x04	; 4
 3f0:	8b 7f       	andi	r24, 0xFB	; 251
 3f2:	89 2b       	or	r24, r25
 3f4:	8a b9       	out	0x0a, r24	; 10

	UCSRC_R |= ConfigPtr->mode | ((ConfigPtr->charSize & 0x03) << UCSZ0) |
 3f6:	80 b5       	in	r24, 0x20	; 32
 3f8:	92 81       	ldd	r25, Z+2	; 0x02
 3fa:	93 70       	andi	r25, 0x03	; 3
 3fc:	99 0f       	add	r25, r25
 3fe:	20 81       	ld	r18, Z
 400:	29 2b       	or	r18, r25
 402:	93 81       	ldd	r25, Z+3	; 0x03
 404:	89 2b       	or	r24, r25
 406:	80 68       	ori	r24, 0x80	; 128
 408:	94 81       	ldd	r25, Z+4	; 0x04
 40a:	89 2b       	or	r24, r25
 40c:	82 2b       	or	r24, r18
 40e:	80 bd       	out	0x20, r24	; 32
			(1 << URSEL) | ConfigPtr->parityMode | ConfigPtr->stopBits;

	/* Choosing the baud rate of the process */
	UBRRH_R = BAUDPRESCALE >> 8;
 410:	10 bc       	out	0x20, r1	; 32
	UBRRL_R = BAUDPRESCALE;
 412:	8f ec       	ldi	r24, 0xCF	; 207
 414:	89 b9       	out	0x09, r24	; 9
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
