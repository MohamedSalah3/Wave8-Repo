
BCM_Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800072  00800072  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a5  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093b  00000000  00000000  00002761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab3  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000968  00000000  00000000  00003ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000484b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_12>
  34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_13>
  38:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_14>
  3c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  8a:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TxApp>:
		gu8_RxDispatchCounter = 255;
		gu8_RxCheckSum = 0;
	}

	return au8_Ret;
}
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gu8_BCM_SENDING_SM>
  98:	08 95       	ret

0000009a <BCM_Init>:
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	29 97       	sbiw	r28, 0x09	; 9
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	9c 01       	movw	r18, r24
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	81 ee       	ldi	r24, 0xE1	; 225
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <BCM_Init+0x1e>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <BCM_Init+0x28>
  c2:	00 00       	nop
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	ec e6       	ldi	r30, 0x6C	; 108
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	de 01       	movw	r26, r28
  cc:	11 96       	adiw	r26, 0x01	; 1
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <BCM_Init+0x34>
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	88 87       	std	Y+8, r24	; 0x08
  dc:	19 86       	std	Y+9, r1	; 0x09
  de:	f9 01       	movw	r30, r18
  e0:	91 81       	ldd	r25, Z+1	; 0x01
  e2:	91 30       	cpi	r25, 0x01	; 1
  e4:	49 f0       	breq	.+18     	; 0xf8 <BCM_Init+0x5e>
  e6:	18 f0       	brcs	.+6      	; 0xee <BCM_Init+0x54>
  e8:	92 30       	cpi	r25, 0x02	; 2
  ea:	51 f0       	breq	.+20     	; 0x100 <BCM_Init+0x66>
  ec:	0d c0       	rjmp	.+26     	; 0x108 <BCM_Init+0x6e>
  ee:	1a 82       	std	Y+2, r1	; 0x02
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	8f 83       	std	Y+7, r24	; 0x07
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	09 c0       	rjmp	.+18     	; 0x10a <BCM_Init+0x70>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8a 83       	std	Y+2, r24	; 0x02
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	05 c0       	rjmp	.+10     	; 0x10a <BCM_Init+0x70>
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	01 c0       	rjmp	.+2      	; 0x10a <BCM_Init+0x70>
 108:	11 e0       	ldi	r17, 0x01	; 1
 10a:	f9 01       	movw	r30, r18
 10c:	80 81       	ld	r24, Z
 10e:	80 3a       	cpi	r24, 0xA0	; 160
 110:	19 f0       	breq	.+6      	; 0x118 <BCM_Init+0x7e>
 112:	81 3a       	cpi	r24, 0xA1	; 161
 114:	31 f0       	breq	.+12     	; 0x122 <BCM_Init+0x88>
 116:	0a c0       	rjmp	.+20     	; 0x12c <BCM_Init+0x92>
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 b8 01 	call	0x370	; 0x370 <UART_init>
 120:	06 c0       	rjmp	.+12     	; 0x12e <BCM_Init+0x94>
 122:	ce 01       	movw	r24, r28
 124:	07 96       	adiw	r24, 0x07	; 7
 126:	0e 94 00 01 	call	0x200	; 0x200 <SPI_init>
 12a:	01 c0       	rjmp	.+2      	; 0x12e <BCM_Init+0x94>
 12c:	11 e0       	ldi	r17, 0x01	; 1
 12e:	81 2f       	mov	r24, r17
 130:	29 96       	adiw	r28, 0x09	; 9
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	08 95       	ret

00000144 <BCM_Send>:
		
	return au8_Ret;
}

EnmBCMError_t BCM_Send(strBcmSendConfig_t* ConfigPtr)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	uint8_t au8_Ret = E_OK;
	static uint8_t i= 0;
	
	switch(ConfigPtr->BCM_ProtocolID)
 14a:	88 81       	ld	r24, Y
 14c:	81 3a       	cpi	r24, 0xA1	; 161
 14e:	59 f4       	brne	.+22     	; 0x166 <BCM_Send+0x22>
	{
		case BCM_SPI_ID:
		SPI_setCallBack(&TxApp);
 150:	89 e4       	ldi	r24, 0x49	; 73
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 29 01 	call	0x252	; 0x252 <SPI_setCallBack>
		SPI_sendByte(ConfigPtr->BCM_ArrayStartAddress[i]);
 158:	e9 81       	ldd	r30, Y+1	; 0x01
 15a:	fa 81       	ldd	r31, Y+2	; 0x02
 15c:	80 81       	ld	r24, Z
 15e:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_sendByte>
	return au8_Ret;
}

EnmBCMError_t BCM_Send(strBcmSendConfig_t* ConfigPtr)
{
	uint8_t au8_Ret = E_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
	switch(ConfigPtr->BCM_ProtocolID)
	{
		case BCM_SPI_ID:
		SPI_setCallBack(&TxApp);
		SPI_sendByte(ConfigPtr->BCM_ArrayStartAddress[i]);
		break;
 164:	01 c0       	rjmp	.+2      	; 0x168 <BCM_Send+0x24>
		default:
		au8_Ret = E_NOK;
 166:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	
//i++;

	TxCfg = *ConfigPtr;
 168:	95 e0       	ldi	r25, 0x05	; 5
 16a:	fe 01       	movw	r30, r28
 16c:	a2 e7       	ldi	r26, 0x72	; 114
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	9a 95       	dec	r25
 176:	e1 f7       	brne	.-8      	; 0x170 <BCM_Send+0x2c>
	return au8_Ret;
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <BCM_TxDispatch>:
{
	uint8_t au8_Ret = E_OK;



if (gu8_BCM_SENDING_SM == 1)
 17e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gu8_BCM_SENDING_SM>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	21 f4       	brne	.+8      	; 0x18e <BCM_TxDispatch+0x10>
{
	BCM_Send(&TxCfg);
 186:	82 e7       	ldi	r24, 0x72	; 114
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 a2 00 	call	0x144	; 0x144 <BCM_Send>
}
		
		
gu8_BCM_SENDING_SM = 0;
 18e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gu8_BCM_SENDING_SM>
		
	return au8_Ret;
}
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret

00000196 <main>:
		5
};

int main(void){
	
BCM_Init(&BCM_cfg);
 196:	85 e6       	ldi	r24, 0x65	; 101
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 4d 00 	call	0x9a	; 0x9a <BCM_Init>

sei();
 19e:	78 94       	sei

BCM_Send(&BCM_startCfg);
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 a2 00 	call	0x144	; 0x144 <BCM_Send>

while(1)
{
	
		BCM_TxDispatch();
 1a8:	0e 94 bf 00 	call	0x17e	; 0x17e <BCM_TxDispatch>
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0x12>

000001ae <__vector_12>:
}

void SPI_deInit(void)
{
	SPCR_R = 0x00;
	SPSR_R = 0x00;
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
 1d0:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <g_SPI_callBackPtr>
 1d4:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <g_SPI_callBackPtr+0x1>
 1d8:	30 97       	sbiw	r30, 0x00	; 0
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_12+0x30>
 1dc:	09 95       	icall
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <SPI_init>:
 200:	fc 01       	movw	r30, r24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	84 bb       	out	0x14, r24	; 20
 206:	80 81       	ld	r24, Z
 208:	81 11       	cpse	r24, r1
 20a:	06 c0       	rjmp	.+12     	; 0x218 <SPI_init+0x18>
 20c:	87 b3       	in	r24, 0x17	; 23
 20e:	8f 74       	andi	r24, 0x4F	; 79
 210:	87 bb       	out	0x17, r24	; 23
 212:	be 9a       	sbi	0x17, 6	; 23
 214:	6c 98       	cbi	0x0d, 4	; 13
 216:	07 c0       	rjmp	.+14     	; 0x226 <SPI_init+0x26>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	29 f4       	brne	.+10     	; 0x226 <SPI_init+0x26>
 21c:	87 b3       	in	r24, 0x17	; 23
 21e:	80 6b       	ori	r24, 0xB0	; 176
 220:	87 bb       	out	0x17, r24	; 23
 222:	be 98       	cbi	0x17, 6	; 23
 224:	6c 9a       	sbi	0x0d, 4	; 13
 226:	8d b1       	in	r24, 0x0d	; 13
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	91 81       	ldd	r25, Z+1	; 0x01
 22c:	89 2b       	or	r24, r25
 22e:	8d b9       	out	0x0d, r24	; 13
 230:	6e 9a       	sbi	0x0d, 6	; 13
 232:	9d b1       	in	r25, 0x0d	; 13
 234:	82 81       	ldd	r24, Z+2	; 0x02
 236:	83 70       	andi	r24, 0x03	; 3
 238:	9c 7f       	andi	r25, 0xFC	; 252
 23a:	98 2b       	or	r25, r24
 23c:	9d b9       	out	0x0d, r25	; 13
 23e:	9e b1       	in	r25, 0x0e	; 14
 240:	82 81       	ldd	r24, Z+2	; 0x02
 242:	28 2f       	mov	r18, r24
 244:	26 95       	lsr	r18
 246:	26 95       	lsr	r18
 248:	89 2f       	mov	r24, r25
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	82 2b       	or	r24, r18
 24e:	8e b9       	out	0x0e, r24	; 14
 250:	08 95       	ret

00000252 <SPI_setCallBack>:
/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
 252:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <g_SPI_callBackPtr+0x1>
 256:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_SPI_callBackPtr>
 25a:	08 95       	ret

0000025c <SPI_sendByte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	33 ec       	ldi	r19, 0xC3	; 195
 260:	99 e0       	ldi	r25, 0x09	; 9
 262:	21 50       	subi	r18, 0x01	; 1
 264:	30 40       	sbci	r19, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <SPI_sendByte+0x6>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <SPI_sendByte+0x10>
 26c:	00 00       	nop
	uint8_t  mBufDat = 0;      // Storage for incoming SPDR
	/* send the data */
	
	mBufDat =data;
	//TCNT2 = mBufDat;
	SPDR = data;
 26e:	8f b9       	out	0x0f, r24	; 15
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
 270:	6f 99       	sbic	0x0d, 7	; 13
 272:	02 c0       	rjmp	.+4      	; 0x278 <SPI_sendByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
 274:	77 9b       	sbis	0x0e, 7	; 14
 276:	fe cf       	rjmp	.-4      	; 0x274 <SPI_sendByte+0x18>
 278:	08 95       	ret

0000027a <__vector_13>:
	
}

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <g_RXC_callBackPtr>
 2a0:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <g_RXC_callBackPtr+0x1>
 2a4:	30 97       	sbiw	r30, 0x00	; 0
 2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_13+0x30>
 2a8:	09 95       	icall
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_14>:
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
 2ee:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <g_UDRE_callBackPtr>
 2f2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <g_UDRE_callBackPtr+0x1>
 2f6:	30 97       	sbiw	r30, 0x00	; 0
 2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_14+0x30>
 2fa:	09 95       	icall
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_15>:
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
 340:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <g_TXC_callBackPtr>
 344:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <g_TXC_callBackPtr+0x1>
 348:	30 97       	sbiw	r30, 0x00	; 0
 34a:	09 f0       	breq	.+2      	; 0x34e <__vector_15+0x30>
 34c:	09 95       	icall
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <UART_init>:
}

void UART_init(const UART_ConfigType* ConfigPtr)
{
 370:	fc 01       	movw	r30, r24
	
	/* Activating double speed mode */
	SET_BIT(UCSRA_R, U2X);
 372:	59 9a       	sbi	0x0b, 1	; 11

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	51 f0       	breq	.+20     	; 0x38e <UART_init+0x1e>
 37a:	18 f0       	brcs	.+6      	; 0x382 <UART_init+0x12>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	69 f0       	breq	.+26     	; 0x39a <UART_init+0x2a>
 380:	13 c0       	rjmp	.+38     	; 0x3a8 <UART_init+0x38>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB_R, TXEN);
 382:	53 9a       	sbi	0x0a, 3	; 10
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 384:	85 81       	ldd	r24, Z+5	; 0x05
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	79 f4       	brne	.+30     	; 0x3a8 <UART_init+0x38>
			SET_BIT(UCSRB_R, TXCIE);
 38a:	56 9a       	sbi	0x0a, 6	; 10
 38c:	0d c0       	rjmp	.+26     	; 0x3a8 <UART_init+0x38>
		break;
	case UART_RECEIVER_MODE:
			
		SET_BIT(UCSRB_R, RXEN);
 38e:	54 9a       	sbi	0x0a, 4	; 10
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 390:	85 81       	ldd	r24, Z+5	; 0x05
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	49 f4       	brne	.+18     	; 0x3a8 <UART_init+0x38>
				SET_BIT(UCSRB_R, RXCIE);
 396:	57 9a       	sbi	0x0a, 7	; 10
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <UART_init+0x38>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB_R, TXEN);
 39a:	53 9a       	sbi	0x0a, 3	; 10
		SET_BIT(UCSRB_R, RXEN);
 39c:	54 9a       	sbi	0x0a, 4	; 10
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 39e:	85 81       	ldd	r24, Z+5	; 0x05
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <UART_init+0x38>
		{
			SET_BIT(UCSRB_R, TXCIE);
 3a4:	56 9a       	sbi	0x0a, 6	; 10
			SET_BIT(UCSRB_R, RXCIE);
 3a6:	57 9a       	sbi	0x0a, 7	; 10
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB_R = (UCSRB_R & 0xFB) | (ConfigPtr->charSize & 0x04);
 3a8:	8a b1       	in	r24, 0x0a	; 10
 3aa:	92 81       	ldd	r25, Z+2	; 0x02
 3ac:	94 70       	andi	r25, 0x04	; 4
 3ae:	8b 7f       	andi	r24, 0xFB	; 251
 3b0:	89 2b       	or	r24, r25
 3b2:	8a b9       	out	0x0a, r24	; 10

	UCSRC_R |= ConfigPtr->mode | ((ConfigPtr->charSize & 0x03) << UCSZ0) |
 3b4:	80 b5       	in	r24, 0x20	; 32
 3b6:	92 81       	ldd	r25, Z+2	; 0x02
 3b8:	93 70       	andi	r25, 0x03	; 3
 3ba:	99 0f       	add	r25, r25
 3bc:	20 81       	ld	r18, Z
 3be:	29 2b       	or	r18, r25
 3c0:	93 81       	ldd	r25, Z+3	; 0x03
 3c2:	89 2b       	or	r24, r25
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	94 81       	ldd	r25, Z+4	; 0x04
 3c8:	89 2b       	or	r24, r25
 3ca:	82 2b       	or	r24, r18
 3cc:	80 bd       	out	0x20, r24	; 32
			(1 << URSEL) | ConfigPtr->parityMode | ConfigPtr->stopBits;

	/* Choosing the baud rate of the process */
	UBRRH_R = BAUDPRESCALE >> 8;
 3ce:	10 bc       	out	0x20, r1	; 32
	UBRRL_R = BAUDPRESCALE;
 3d0:	8f ec       	ldi	r24, 0xCF	; 207
 3d2:	89 b9       	out	0x09, r24	; 9
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
