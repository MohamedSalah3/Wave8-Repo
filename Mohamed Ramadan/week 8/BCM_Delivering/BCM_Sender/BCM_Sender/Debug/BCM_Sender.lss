
BCM_Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000062e  000006c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000117  00800072  00800072  000006d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000188a  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a98  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000976  00000000  00000000  00002bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00003530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afe  00000000  00000000  000038fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008aa  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_12>
  34:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_13>
  38:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_14>
  3c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 01 	call	0x326	; 0x326 <main>
  8a:	0c 94 15 03 	jmp	0x62a	; 0x62a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TxApp>:
 *
 * Description	: function BCM_TxSetCallBack shall assign the Tx call back function to be performed in ISR.
**/
void BCM_RxSetCallBack(void (*a_ptr)(void))
{
	BCM_RxCallBackPtr = a_ptr;
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <gu8_BCM_SENDING_SM>
  98:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  a2:	08 95       	ret

000000a4 <BCM_Init>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	29 97       	sbiw	r28, 0x09	; 9
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	9c 01       	movw	r18, r24
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	e1 e6       	ldi	r30, 0x61	; 97
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <BCM_Init+0x20>
  cc:	1f 82       	std	Y+7, r1	; 0x07
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	88 87       	std	Y+8, r24	; 0x08
  d2:	19 86       	std	Y+9, r1	; 0x09
  d4:	f9 01       	movw	r30, r18
  d6:	91 81       	ldd	r25, Z+1	; 0x01
  d8:	91 30       	cpi	r25, 0x01	; 1
  da:	41 f0       	breq	.+16     	; 0xec <BCM_Init+0x48>
  dc:	18 f0       	brcs	.+6      	; 0xe4 <BCM_Init+0x40>
  de:	92 30       	cpi	r25, 0x02	; 2
  e0:	41 f0       	breq	.+16     	; 0xf2 <BCM_Init+0x4e>
  e2:	0a c0       	rjmp	.+20     	; 0xf8 <BCM_Init+0x54>
  e4:	1a 82       	std	Y+2, r1	; 0x02
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8f 83       	std	Y+7, r24	; 0x07
  ea:	09 c0       	rjmp	.+18     	; 0xfe <BCM_Init+0x5a>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8a 83       	std	Y+2, r24	; 0x02
  f0:	06 c0       	rjmp	.+12     	; 0xfe <BCM_Init+0x5a>
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	8a 83       	std	Y+2, r24	; 0x02
  f6:	03 c0       	rjmp	.+6      	; 0xfe <BCM_Init+0x5a>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <au8_Ret.1783>
  fe:	f9 01       	movw	r30, r18
 100:	80 81       	ld	r24, Z
 102:	80 3a       	cpi	r24, 0xA0	; 160
 104:	19 f0       	breq	.+6      	; 0x10c <BCM_Init+0x68>
 106:	81 3a       	cpi	r24, 0xA1	; 161
 108:	31 f0       	breq	.+12     	; 0x116 <BCM_Init+0x72>
 10a:	0a c0       	rjmp	.+20     	; 0x120 <BCM_Init+0x7c>
 10c:	ce 01       	movw	r24, r28
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	0e 94 b5 02 	call	0x56a	; 0x56a <UART_init>
 114:	08 c0       	rjmp	.+16     	; 0x126 <BCM_Init+0x82>
 116:	ce 01       	movw	r24, r28
 118:	07 96       	adiw	r24, 0x07	; 7
 11a:	0e 94 03 02 	call	0x406	; 0x406 <SPI_init>
 11e:	03 c0       	rjmp	.+6      	; 0x126 <BCM_Init+0x82>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <au8_Ret.1783>
 126:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <au8_Ret.1783>
 12a:	29 96       	adiw	r28, 0x09	; 9
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <BCM_Send>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gu8_TxCounter>
 146:	81 11       	cpse	r24, r1
 148:	3a c0       	rjmp	.+116    	; 0x1be <BCM_Send+0x82>
 14a:	88 81       	ld	r24, Y
 14c:	80 3a       	cpi	r24, 0xA0	; 160
 14e:	19 f0       	breq	.+6      	; 0x156 <BCM_Send+0x1a>
 150:	81 3a       	cpi	r24, 0xA1	; 161
 152:	61 f0       	breq	.+24     	; 0x16c <BCM_Send+0x30>
 154:	16 c0       	rjmp	.+44     	; 0x182 <BCM_Send+0x46>
 156:	89 e4       	ldi	r24, 0x49	; 73
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 b0 02 	call	0x560	; 0x560 <UART_TXC_setCallBack>
 15e:	88 ee       	ldi	r24, 0xE8	; 232
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <apf_SenderFunction.1815+0x1>
 166:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <apf_SenderFunction.1815>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <BCM_Send+0x4c>
 16c:	89 e4       	ldi	r24, 0x49	; 73
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 2a 02 	call	0x454	; 0x454 <SPI_setCallBack>
 174:	8f e2       	ldi	r24, 0x2F	; 47
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <apf_SenderFunction.1815+0x1>
 17c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <apf_SenderFunction.1815>
 180:	03 c0       	rjmp	.+6      	; 0x188 <BCM_Send+0x4c>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 188:	e9 81       	ldd	r30, Y+1	; 0x01
 18a:	fa 81       	ldd	r31, Y+2	; 0x02
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	e8 0f       	add	r30, r24
 192:	f9 1f       	adc	r31, r25
 194:	34 97       	sbiw	r30, 0x04	; 4
 196:	8a e5       	ldi	r24, 0x5A	; 90
 198:	80 83       	st	Z, r24
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	e9 81       	ldd	r30, Y+1	; 0x01
 1a0:	fa 81       	ldd	r31, Y+2	; 0x02
 1a2:	e8 0f       	add	r30, r24
 1a4:	f9 1f       	adc	r31, r25
 1a6:	33 97       	sbiw	r30, 0x03	; 3
 1a8:	04 97       	sbiw	r24, 0x04	; 4
 1aa:	90 83       	st	Z, r25
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
 1b0:	e9 81       	ldd	r30, Y+1	; 0x01
 1b2:	fa 81       	ldd	r31, Y+2	; 0x02
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	32 97       	sbiw	r30, 0x02	; 2
 1ba:	84 50       	subi	r24, 0x04	; 4
 1bc:	80 83       	st	Z, r24
 1be:	e9 81       	ldd	r30, Y+1	; 0x01
 1c0:	fa 81       	ldd	r31, Y+2	; 0x02
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	9c 81       	ldd	r25, Y+4	; 0x04
 1c6:	e8 0f       	add	r30, r24
 1c8:	f9 1f       	adc	r31, r25
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gu8_TxCheckSum>
 1d0:	80 83       	st	Z, r24
 1d2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <gu8_TxCounter>
 1d6:	84 2f       	mov	r24, r20
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	2b 81       	ldd	r18, Y+3	; 0x03
 1dc:	3c 81       	ldd	r19, Y+4	; 0x04
 1de:	82 17       	cp	r24, r18
 1e0:	93 07       	cpc	r25, r19
 1e2:	98 f5       	brcc	.+102    	; 0x24a <BCM_Send+0x10e>
 1e4:	43 30       	cpi	r20, 0x03	; 3
 1e6:	78 f4       	brcc	.+30     	; 0x206 <BCM_Send+0xca>
 1e8:	49 81       	ldd	r20, Y+1	; 0x01
 1ea:	5a 81       	ldd	r21, Y+2	; 0x02
 1ec:	84 0f       	add	r24, r20
 1ee:	95 1f       	adc	r25, r21
 1f0:	82 0f       	add	r24, r18
 1f2:	93 1f       	adc	r25, r19
 1f4:	dc 01       	movw	r26, r24
 1f6:	14 97       	sbiw	r26, 0x04	; 4
 1f8:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <apf_SenderFunction.1815>
 1fc:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <apf_SenderFunction.1815+0x1>
 200:	8c 91       	ld	r24, X
 202:	09 95       	icall
 204:	1d c0       	rjmp	.+58     	; 0x240 <BCM_Send+0x104>
 206:	21 50       	subi	r18, 0x01	; 1
 208:	31 09       	sbc	r19, r1
 20a:	82 17       	cp	r24, r18
 20c:	93 07       	cpc	r25, r19
 20e:	61 f4       	brne	.+24     	; 0x228 <BCM_Send+0xec>
 210:	29 81       	ldd	r18, Y+1	; 0x01
 212:	3a 81       	ldd	r19, Y+2	; 0x02
 214:	d9 01       	movw	r26, r18
 216:	a8 0f       	add	r26, r24
 218:	b9 1f       	adc	r27, r25
 21a:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <apf_SenderFunction.1815>
 21e:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <apf_SenderFunction.1815+0x1>
 222:	8c 91       	ld	r24, X
 224:	09 95       	icall
 226:	0c c0       	rjmp	.+24     	; 0x240 <BCM_Send+0x104>
 228:	a9 81       	ldd	r26, Y+1	; 0x01
 22a:	ba 81       	ldd	r27, Y+2	; 0x02
 22c:	8a 0f       	add	r24, r26
 22e:	9b 1f       	adc	r25, r27
 230:	dc 01       	movw	r26, r24
 232:	13 97       	sbiw	r26, 0x03	; 3
 234:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <apf_SenderFunction.1815>
 238:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <apf_SenderFunction.1815+0x1>
 23c:	8c 91       	ld	r24, X
 23e:	09 95       	icall
 240:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gu8_TxCounter>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gu8_TxCounter>
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	fe 01       	movw	r30, r28
 24e:	aa e7       	ldi	r26, 0x7A	; 122
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	8a 95       	dec	r24
 258:	e1 f7       	brne	.-8      	; 0x252 <BCM_Send+0x116>
 25a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <BCM_TxDispatch>:
 264:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <gu8_BCM_SENDING_SM>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	01 f5       	brne	.+64     	; 0x2ac <BCM_TxDispatch+0x48>
 26c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <TxCfg+0x3>
 276:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <TxCfg+0x4>
 27a:	04 97       	sbiw	r24, 0x04	; 4
 27c:	28 17       	cp	r18, r24
 27e:	39 07       	cpc	r19, r25
 280:	70 f4       	brcc	.+28     	; 0x29e <BCM_TxDispatch+0x3a>
 282:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 286:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TxCfg+0x1>
 28a:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <TxCfg+0x2>
 28e:	e8 0f       	add	r30, r24
 290:	f1 1d       	adc	r31, r1
 292:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <gu8_TxCheckSum>
 296:	80 81       	ld	r24, Z
 298:	89 0f       	add	r24, r25
 29a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gu8_TxCheckSum>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <gu8_BCM_SENDING_SM>
 2a4:	8a e7       	ldi	r24, 0x7A	; 122
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 9e 00 	call	0x13c	; 0x13c <BCM_Send>
 2ac:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <TxCfg+0x3>
 2b6:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <TxCfg+0x4>
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	81 f4       	brne	.+32     	; 0x2e2 <BCM_TxDispatch+0x7e>
 2c2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gu8_BCM_SENDING_SM>
 2c6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <gu8_TxCounter>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 2d0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <gu8_TxCheckSum>
 2d4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <BCM_TxCallBackPtr>
 2d8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <BCM_TxCallBackPtr+0x1>
 2dc:	30 97       	sbiw	r30, 0x00	; 0
 2de:	09 f0       	breq	.+2      	; 0x2e2 <BCM_TxDispatch+0x7e>
 2e0:	09 95       	icall
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret

000002e6 <BCM_TxSetCallBack>:
 *
 * Description	: function BCM_RxSetCallBack shall assign the Rx call back function to be performed in ISR.
**/
void BCM_TxSetCallBack(void (*a_ptr)(void))
{
	BCM_TxCallBackPtr = a_ptr;
 2e6:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <BCM_TxCallBackPtr+0x1>
 2ea:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <BCM_TxCallBackPtr>
 2ee:	08 95       	ret

000002f0 <Bcm_TxCallBack>:

//static uint8_t i = 0;

void Bcm_TxCallBack(void)
{
	UART_status = UART_NOT_DONE;
 2f0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <UART_status>
	BCM_InitOnce = BCM_NOT_INITIALIZED;
 2f4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <BCM_InitOnce>

	for(counter = 0 ; counter < ELEMENTS(50) ; counter++)
 2f8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <counter>
 2fc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <counter>
 300:	86 33       	cpi	r24, 0x36	; 54
 302:	80 f4       	brcc	.+32     	; 0x324 <Bcm_TxCallBack+0x34>
	{
		ReceivedString[counter] = ' ';
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <counter>
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ed 57       	subi	r30, 0x7D	; 125
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	90 83       	st	Z, r25
void Bcm_TxCallBack(void)
{
	UART_status = UART_NOT_DONE;
	BCM_InitOnce = BCM_NOT_INITIALIZED;

	for(counter = 0 ; counter < ELEMENTS(50) ; counter++)
 312:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <counter>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <counter>
 31c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <counter>
 320:	86 33       	cpi	r24, 0x36	; 54
 322:	88 f3       	brcs	.-30     	; 0x306 <Bcm_TxCallBack+0x16>
 324:	08 95       	ret

00000326 <main>:
		ReceivedString[counter] = ' ';
	}
}

int main(void)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	2d 97       	sbiw	r28, 0x0d	; 13
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType UART_cfg = {
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	e7 e6       	ldi	r30, 0x67	; 103
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	de 01       	movw	r26, r28
 342:	11 96       	adiw	r26, 0x01	; 1
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x1e>
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT,
			UART_INTERRUPT_DISABLED
	};

	strBcmConfig_t BCM_cfg = {
 34c:	81 ea       	ldi	r24, 0xA1	; 161
 34e:	8f 83       	std	Y+7, r24	; 0x07
 350:	18 86       	std	Y+8, r1	; 0x08
			BCM_SPI_ID,
			BCM_TRANSMIT
	};

	strBcmSendConfig_t BCM_startCfg = {
 352:	85 e0       	ldi	r24, 0x05	; 5
 354:	ed e6       	ldi	r30, 0x6D	; 109
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	de 01       	movw	r26, r28
 35a:	19 96       	adiw	r26, 0x09	; 9
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x36>
			ELEMENTS(250)
	};

	

	UART_init(&UART_cfg);
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	0e 94 b5 02 	call	0x56a	; 0x56a <UART_init>

	BCM_TxSetCallBack(&Bcm_TxCallBack);
 36c:	88 e7       	ldi	r24, 0x78	; 120
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 73 01 	call	0x2e6	; 0x2e6 <BCM_TxSetCallBack>

	sei();
 374:	78 94       	sei
		}
		else if(UART_status == UART_NOT_DONE)
		{
			UART_receiveString((sint8_t*)ReceivedString);

			UART_status = UART_DONE;
 376:	11 e0       	ldi	r17, 0x01	; 1

	sei();

	while(1)
	{
		if(UART_status == UART_DONE)
 378:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <UART_status>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	89 f4       	brne	.+34     	; 0x3a2 <main+0x7c>
		{
			if(BCM_InitOnce == BCM_NOT_INITIALIZED)
 380:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <BCM_InitOnce>
 384:	81 11       	cpse	r24, r1
 386:	0a c0       	rjmp	.+20     	; 0x39c <main+0x76>
			{
				BCM_Init(&BCM_cfg);
 388:	ce 01       	movw	r24, r28
 38a:	07 96       	adiw	r24, 0x07	; 7
 38c:	0e 94 52 00 	call	0xa4	; 0xa4 <BCM_Init>

				BCM_Send(&BCM_startCfg);
 390:	ce 01       	movw	r24, r28
 392:	09 96       	adiw	r24, 0x09	; 9
 394:	0e 94 9e 00 	call	0x13c	; 0x13c <BCM_Send>

				BCM_InitOnce = BCM_INITIALIZED;
 398:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <BCM_InitOnce>
			}

			BCM_TxDispatch();
 39c:	0e 94 32 01 	call	0x264	; 0x264 <BCM_TxDispatch>
 3a0:	eb cf       	rjmp	.-42     	; 0x378 <main+0x52>
		}
		else if(UART_status == UART_NOT_DONE)
 3a2:	81 11       	cpse	r24, r1
 3a4:	e9 cf       	rjmp	.-46     	; 0x378 <main+0x52>
		{
			UART_receiveString((sint8_t*)ReceivedString);
 3a6:	83 e8       	ldi	r24, 0x83	; 131
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <UART_receiveString>

			UART_status = UART_DONE;
 3ae:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <UART_status>
 3b2:	e2 cf       	rjmp	.-60     	; 0x378 <main+0x52>

000003b4 <__vector_12>:
}

void SPI_deInit(void)
{
	SPCR_R = 0x00;
	SPSR_R = 0x00;
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
 3d6:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <g_SPI_callBackPtr>
 3da:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <g_SPI_callBackPtr+0x1>
 3de:	30 97       	sbiw	r30, 0x00	; 0
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <__vector_12+0x30>
 3e2:	09 95       	icall
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <SPI_init>:
 406:	fc 01       	movw	r30, r24
 408:	80 81       	ld	r24, Z
 40a:	81 11       	cpse	r24, r1
 40c:	06 c0       	rjmp	.+12     	; 0x41a <SPI_init+0x14>
 40e:	87 b3       	in	r24, 0x17	; 23
 410:	8f 74       	andi	r24, 0x4F	; 79
 412:	87 bb       	out	0x17, r24	; 23
 414:	be 9a       	sbi	0x17, 6	; 23
 416:	6c 98       	cbi	0x0d, 4	; 13
 418:	07 c0       	rjmp	.+14     	; 0x428 <SPI_init+0x22>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	29 f4       	brne	.+10     	; 0x428 <SPI_init+0x22>
 41e:	87 b3       	in	r24, 0x17	; 23
 420:	80 6b       	ori	r24, 0xB0	; 176
 422:	87 bb       	out	0x17, r24	; 23
 424:	be 98       	cbi	0x17, 6	; 23
 426:	6c 9a       	sbi	0x0d, 4	; 13
 428:	8d b1       	in	r24, 0x0d	; 13
 42a:	8f 77       	andi	r24, 0x7F	; 127
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	89 2b       	or	r24, r25
 430:	8d b9       	out	0x0d, r24	; 13
 432:	6e 9a       	sbi	0x0d, 6	; 13
 434:	9d b1       	in	r25, 0x0d	; 13
 436:	82 81       	ldd	r24, Z+2	; 0x02
 438:	83 70       	andi	r24, 0x03	; 3
 43a:	9c 7f       	andi	r25, 0xFC	; 252
 43c:	98 2b       	or	r25, r24
 43e:	9d b9       	out	0x0d, r25	; 13
 440:	9e b1       	in	r25, 0x0e	; 14
 442:	82 81       	ldd	r24, Z+2	; 0x02
 444:	28 2f       	mov	r18, r24
 446:	26 95       	lsr	r18
 448:	26 95       	lsr	r18
 44a:	89 2f       	mov	r24, r25
 44c:	8e 7f       	andi	r24, 0xFE	; 254
 44e:	82 2b       	or	r24, r18
 450:	8e b9       	out	0x0e, r24	; 14
 452:	08 95       	ret

00000454 <SPI_setCallBack>:
/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
 454:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <g_SPI_callBackPtr+0x1>
 458:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <g_SPI_callBackPtr>
 45c:	08 95       	ret

0000045e <SPI_sendByte>:
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
	/* send the data */
	SPDR = data;
 45e:	8f b9       	out	0x0f, r24	; 15
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
 460:	6f 99       	sbic	0x0d, 7	; 13
 462:	02 c0       	rjmp	.+4      	; 0x468 <SPI_sendByte+0xa>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
 464:	77 9b       	sbis	0x0e, 7	; 14
 466:	fe cf       	rjmp	.-4      	; 0x464 <SPI_sendByte+0x6>
 468:	08 95       	ret

0000046a <__vector_13>:
	while(str[index])
	{
		data=str[index++];
		UART_transmit(data);
	}
}
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <g_RXC_callBackPtr>
 490:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <g_RXC_callBackPtr+0x1>
 494:	30 97       	sbiw	r30, 0x00	; 0
 496:	09 f0       	breq	.+2      	; 0x49a <__vector_13+0x30>
 498:	09 95       	icall
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__vector_14>:
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
 4de:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <g_UDRE_callBackPtr>
 4e2:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <g_UDRE_callBackPtr+0x1>
 4e6:	30 97       	sbiw	r30, 0x00	; 0
 4e8:	09 f0       	breq	.+2      	; 0x4ec <__vector_14+0x30>
 4ea:	09 95       	icall
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__vector_15>:
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
 530:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <g_TXC_callBackPtr>
 534:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <g_TXC_callBackPtr+0x1>
 538:	30 97       	sbiw	r30, 0x00	; 0
 53a:	09 f0       	breq	.+2      	; 0x53e <__vector_15+0x30>
 53c:	09 95       	icall
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <UART_TXC_setCallBack>:
 560:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <g_TXC_callBackPtr+0x1>
 564:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <g_TXC_callBackPtr>
 568:	08 95       	ret

0000056a <UART_init>:
 56a:	fc 01       	movw	r30, r24
 56c:	59 9a       	sbi	0x0b, 1	; 11
 56e:	81 81       	ldd	r24, Z+1	; 0x01
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	51 f0       	breq	.+20     	; 0x588 <UART_init+0x1e>
 574:	18 f0       	brcs	.+6      	; 0x57c <UART_init+0x12>
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	69 f0       	breq	.+26     	; 0x594 <UART_init+0x2a>
 57a:	13 c0       	rjmp	.+38     	; 0x5a2 <UART_init+0x38>
 57c:	53 9a       	sbi	0x0a, 3	; 10
 57e:	85 81       	ldd	r24, Z+5	; 0x05
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	79 f4       	brne	.+30     	; 0x5a2 <UART_init+0x38>
 584:	56 9a       	sbi	0x0a, 6	; 10
 586:	0d c0       	rjmp	.+26     	; 0x5a2 <UART_init+0x38>
 588:	54 9a       	sbi	0x0a, 4	; 10
 58a:	85 81       	ldd	r24, Z+5	; 0x05
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	49 f4       	brne	.+18     	; 0x5a2 <UART_init+0x38>
 590:	57 9a       	sbi	0x0a, 7	; 10
 592:	07 c0       	rjmp	.+14     	; 0x5a2 <UART_init+0x38>
 594:	53 9a       	sbi	0x0a, 3	; 10
 596:	54 9a       	sbi	0x0a, 4	; 10
 598:	85 81       	ldd	r24, Z+5	; 0x05
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	11 f4       	brne	.+4      	; 0x5a2 <UART_init+0x38>
 59e:	56 9a       	sbi	0x0a, 6	; 10
 5a0:	57 9a       	sbi	0x0a, 7	; 10
 5a2:	8a b1       	in	r24, 0x0a	; 10
 5a4:	92 81       	ldd	r25, Z+2	; 0x02
 5a6:	94 70       	andi	r25, 0x04	; 4
 5a8:	8b 7f       	andi	r24, 0xFB	; 251
 5aa:	89 2b       	or	r24, r25
 5ac:	8a b9       	out	0x0a, r24	; 10
 5ae:	80 b5       	in	r24, 0x20	; 32
 5b0:	92 81       	ldd	r25, Z+2	; 0x02
 5b2:	93 70       	andi	r25, 0x03	; 3
 5b4:	99 0f       	add	r25, r25
 5b6:	20 81       	ld	r18, Z
 5b8:	29 2b       	or	r18, r25
 5ba:	93 81       	ldd	r25, Z+3	; 0x03
 5bc:	89 2b       	or	r24, r25
 5be:	80 68       	ori	r24, 0x80	; 128
 5c0:	94 81       	ldd	r25, Z+4	; 0x04
 5c2:	89 2b       	or	r24, r25
 5c4:	82 2b       	or	r24, r18
 5c6:	80 bd       	out	0x20, r24	; 32
 5c8:	10 bc       	out	0x20, r1	; 32
 5ca:	8f ec       	ldi	r24, 0xCF	; 207
 5cc:	89 b9       	out	0x09, r24	; 9
 5ce:	08 95       	ret

000005d0 <UART_transmit>:
 5d0:	56 99       	sbic	0x0a, 6	; 10
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <UART_transmit+0x8>
 5d4:	5d 9b       	sbis	0x0b, 5	; 11
 5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <UART_transmit+0x4>
 5d8:	8c b9       	out	0x0c, r24	; 12
 5da:	08 95       	ret

000005dc <UART_receive>:
 5dc:	57 99       	sbic	0x0a, 7	; 10
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <UART_receive+0x8>
 5e0:	5f 9b       	sbis	0x0b, 7	; 11
 5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <UART_receive+0x4>
 5e4:	8c b1       	in	r24, 0x0c	; 12
 5e6:	08 95       	ret

000005e8 <UART_receiveString>:


void UART_receiveString(sint8_t* Str)
{
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	7c 01       	movw	r14, r24
	uint8_t i = 0;
	Str[i] = UART_receive();
 5f4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <UART_receive>
 5f8:	f7 01       	movw	r30, r14
 5fa:	80 83       	st	Z, r24
	while(Str[i] != '\r')
 5fc:	8d 30       	cpi	r24, 0x0D	; 13
 5fe:	61 f0       	breq	.+24     	; 0x618 <UART_receiveString+0x30>
 600:	c0 e0       	ldi	r28, 0x00	; 0
	{
		i++;
 602:	cf 5f       	subi	r28, 0xFF	; 255
		Str[i] = UART_receive();
 604:	87 01       	movw	r16, r14
 606:	0c 0f       	add	r16, r28
 608:	11 1d       	adc	r17, r1
 60a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <UART_receive>
 60e:	f8 01       	movw	r30, r16
 610:	80 83       	st	Z, r24

void UART_receiveString(sint8_t* Str)
{
	uint8_t i = 0;
	Str[i] = UART_receive();
	while(Str[i] != '\r')
 612:	8d 30       	cpi	r24, 0x0D	; 13
 614:	b1 f7       	brne	.-20     	; 0x602 <UART_receiveString+0x1a>
 616:	01 c0       	rjmp	.+2      	; 0x61a <UART_receiveString+0x32>
 618:	87 01       	movw	r16, r14
	{
		i++;
		Str[i] = UART_receive();
	}
	Str[i] = '\0';
 61a:	f8 01       	movw	r30, r16
 61c:	10 82       	st	Z, r1
}
 61e:	cf 91       	pop	r28
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	08 95       	ret

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
