
BCM_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000121e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000121e  000012b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800072  00800072  000012c4  2**0
                  ALLOC
  3 .stab         00001fe0  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000193d  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_12>
      34:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_13>
      38:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_14>
      3c:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 08 	call	0x1164	; 0x1164 <main>
      8a:	0c 94 0d 09 	jmp	0x121a	; 0x121a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RxApp>:
static void (*BCM_CallBackPtr)(void) = NULL;

/*- CALL BACK FUNCTIONS ------------------------------------*/

void RxApp(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	gu8_BCM_Receiving_SM = BCM_RECEIVING_BYTE;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 73 00 	sts	0x0073, r24
	BCM_Receive(&RxCfg);
      a0:	83 e8       	ldi	r24, 0x83	; 131
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	0e 94 39 03 	call	0x672	; 0x672 <BCM_Receive>
	gu8_BCM_Receiving_SM = BCM_RECEIVING_COMPLETE;
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	80 93 73 00 	sts	0x0073, r24
	gu8_RxDispatchCounter++;
      ae:	80 91 61 00 	lds	r24, 0x0061
      b2:	8f 5f       	subi	r24, 0xFF	; 255
      b4:	80 93 61 00 	sts	0x0061, r24
}
      b8:	cf 91       	pop	r28
      ba:	df 91       	pop	r29
      bc:	08 95       	ret

000000be <TxApp>:

void TxApp(void)
{
      be:	df 93       	push	r29
      c0:	cf 93       	push	r28
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	gu8_BCM_SENDING_SM = BCM_SENDING_COMPLETE;
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	80 93 72 00 	sts	0x0072, r24
	gu8_TxDispatchCounter++;
      cc:	80 91 60 00 	lds	r24, 0x0060
      d0:	8f 5f       	subi	r24, 0xFF	; 255
      d2:	80 93 60 00 	sts	0x0060, r24
}
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <BCM_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

EnmBCMError_t BCM_Init(const strBcmConfig_t* ConfigPtr)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	6a 97       	sbiw	r28, 0x1a	; 26
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	f8 94       	cli
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	0f be       	out	0x3f, r0	; 63
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	9c 87       	std	Y+12, r25	; 0x0c
      f2:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t au8_Ret = E_OK;
      f4:	19 82       	std	Y+1, r1	; 0x01
			UNDETERMINED,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT,
			UART_INTERRUPT_ENABLED
	};
      f6:	9e 01       	movw	r18, r28
      f8:	2e 5f       	subi	r18, 0xFE	; 254
      fa:	3f 4f       	sbci	r19, 0xFF	; 255
      fc:	3a 8b       	std	Y+18, r19	; 0x12
      fe:	29 8b       	std	Y+17, r18	; 0x11
     100:	86 e6       	ldi	r24, 0x66	; 102
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	9c 8b       	std	Y+20, r25	; 0x14
     106:	8b 8b       	std	Y+19, r24	; 0x13
     108:	96 e0       	ldi	r25, 0x06	; 6
     10a:	9d 8b       	std	Y+21, r25	; 0x15
     10c:	eb 89       	ldd	r30, Y+19	; 0x13
     10e:	fc 89       	ldd	r31, Y+20	; 0x14
     110:	00 80       	ld	r0, Z
     112:	2b 89       	ldd	r18, Y+19	; 0x13
     114:	3c 89       	ldd	r19, Y+20	; 0x14
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	3c 8b       	std	Y+20, r19	; 0x14
     11c:	2b 8b       	std	Y+19, r18	; 0x13
     11e:	e9 89       	ldd	r30, Y+17	; 0x11
     120:	fa 89       	ldd	r31, Y+18	; 0x12
     122:	00 82       	st	Z, r0
     124:	29 89       	ldd	r18, Y+17	; 0x11
     126:	3a 89       	ldd	r19, Y+18	; 0x12
     128:	2f 5f       	subi	r18, 0xFF	; 255
     12a:	3f 4f       	sbci	r19, 0xFF	; 255
     12c:	3a 8b       	std	Y+18, r19	; 0x12
     12e:	29 8b       	std	Y+17, r18	; 0x11
     130:	3d 89       	ldd	r19, Y+21	; 0x15
     132:	31 50       	subi	r19, 0x01	; 1
     134:	3d 8b       	std	Y+21, r19	; 0x15
     136:	8d 89       	ldd	r24, Y+21	; 0x15
     138:	88 23       	and	r24, r24
     13a:	41 f7       	brne	.-48     	; 0x10c <BCM_Init+0x30>

	SPI_ConfigType SPI_cfg = {
			UNDETERMINED,
			SPI_INTERRUPT_ENABLED,
			SPI_F_OSC_4
	};
     13c:	fe 01       	movw	r30, r28
     13e:	38 96       	adiw	r30, 0x08	; 8
     140:	ff 8b       	std	Y+23, r31	; 0x17
     142:	ee 8b       	std	Y+22, r30	; 0x16
     144:	23 e6       	ldi	r18, 0x63	; 99
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	39 8f       	std	Y+25, r19	; 0x19
     14a:	28 8f       	std	Y+24, r18	; 0x18
     14c:	33 e0       	ldi	r19, 0x03	; 3
     14e:	3a 8f       	std	Y+26, r19	; 0x1a
     150:	e8 8d       	ldd	r30, Y+24	; 0x18
     152:	f9 8d       	ldd	r31, Y+25	; 0x19
     154:	00 80       	ld	r0, Z
     156:	28 8d       	ldd	r18, Y+24	; 0x18
     158:	39 8d       	ldd	r19, Y+25	; 0x19
     15a:	2f 5f       	subi	r18, 0xFF	; 255
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	39 8f       	std	Y+25, r19	; 0x19
     160:	28 8f       	std	Y+24, r18	; 0x18
     162:	ee 89       	ldd	r30, Y+22	; 0x16
     164:	ff 89       	ldd	r31, Y+23	; 0x17
     166:	00 82       	st	Z, r0
     168:	2e 89       	ldd	r18, Y+22	; 0x16
     16a:	3f 89       	ldd	r19, Y+23	; 0x17
     16c:	2f 5f       	subi	r18, 0xFF	; 255
     16e:	3f 4f       	sbci	r19, 0xFF	; 255
     170:	3f 8b       	std	Y+23, r19	; 0x17
     172:	2e 8b       	std	Y+22, r18	; 0x16
     174:	3a 8d       	ldd	r19, Y+26	; 0x1a
     176:	31 50       	subi	r19, 0x01	; 1
     178:	3a 8f       	std	Y+26, r19	; 0x1a
     17a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     17c:	88 23       	and	r24, r24
     17e:	41 f7       	brne	.-48     	; 0x150 <BCM_Init+0x74>

	switch(ConfigPtr->BCM_DataDirection)
     180:	eb 85       	ldd	r30, Y+11	; 0x0b
     182:	fc 85       	ldd	r31, Y+12	; 0x0c
     184:	81 81       	ldd	r24, Z+1	; 0x01
     186:	e8 2f       	mov	r30, r24
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	f8 8b       	std	Y+16, r31	; 0x10
     18c:	ef 87       	std	Y+15, r30	; 0x0f
     18e:	2f 85       	ldd	r18, Y+15	; 0x0f
     190:	38 89       	ldd	r19, Y+16	; 0x10
     192:	21 30       	cpi	r18, 0x01	; 1
     194:	31 05       	cpc	r19, r1
     196:	69 f0       	breq	.+26     	; 0x1b2 <BCM_Init+0xd6>
     198:	8f 85       	ldd	r24, Y+15	; 0x0f
     19a:	98 89       	ldd	r25, Y+16	; 0x10
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	91 05       	cpc	r25, r1
     1a0:	61 f0       	breq	.+24     	; 0x1ba <BCM_Init+0xde>
     1a2:	ef 85       	ldd	r30, Y+15	; 0x0f
     1a4:	f8 89       	ldd	r31, Y+16	; 0x10
     1a6:	30 97       	sbiw	r30, 0x00	; 0
     1a8:	59 f4       	brne	.+22     	; 0x1c0 <BCM_Init+0xe4>
	{
	case BCM_TRANSMIT:
		UART_cfg.communicationMode = UART_SENDER_MODE;
     1aa:	1b 82       	std	Y+3, r1	; 0x03
		SPI_cfg.MasterSlaveSelect = SPI_MASTER;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	88 87       	std	Y+8, r24	; 0x08
     1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <BCM_Init+0xe8>
		break;
	case BCM_RECEIVE:
		UART_cfg.communicationMode = UART_RECEIVER_MODE;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	8b 83       	std	Y+3, r24	; 0x03
		SPI_cfg.MasterSlaveSelect = SPI_SLAVE;
     1b6:	18 86       	std	Y+8, r1	; 0x08
     1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <BCM_Init+0xe8>
		break;
	case BCM_TRANSMIT_RECEIVE:
		UART_cfg.communicationMode = UART_SENDER_RECEIVER_MODE;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	8b 83       	std	Y+3, r24	; 0x03
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <BCM_Init+0xe8>
		break;
	default:
		au8_Ret = E_NOK;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	switch(ConfigPtr->BCM_ProtocolID)
     1c4:	eb 85       	ldd	r30, Y+11	; 0x0b
     1c6:	fc 85       	ldd	r31, Y+12	; 0x0c
     1c8:	80 81       	ld	r24, Z
     1ca:	28 2f       	mov	r18, r24
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	3e 87       	std	Y+14, r19	; 0x0e
     1d0:	2d 87       	std	Y+13, r18	; 0x0d
     1d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d4:	9e 85       	ldd	r25, Y+14	; 0x0e
     1d6:	80 3a       	cpi	r24, 0xA0	; 160
     1d8:	91 05       	cpc	r25, r1
     1da:	31 f0       	breq	.+12     	; 0x1e8 <BCM_Init+0x10c>
     1dc:	ed 85       	ldd	r30, Y+13	; 0x0d
     1de:	fe 85       	ldd	r31, Y+14	; 0x0e
     1e0:	e1 3a       	cpi	r30, 0xA1	; 161
     1e2:	f1 05       	cpc	r31, r1
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <BCM_Init+0x116>
     1e6:	0a c0       	rjmp	.+20     	; 0x1fc <BCM_Init+0x120>
	{
	case BCM_UART_ID:
		UART_init(&UART_cfg);
     1e8:	ce 01       	movw	r24, r28
     1ea:	02 96       	adiw	r24, 0x02	; 2
     1ec:	0e 94 47 07 	call	0xe8e	; 0xe8e <UART_init>
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <BCM_Init+0x124>
		break;
	case BCM_SPI_ID:
		SPI_init(&SPI_cfg);
     1f2:	ce 01       	movw	r24, r28
     1f4:	08 96       	adiw	r24, 0x08	; 8
     1f6:	0e 94 be 05 	call	0xb7c	; 0xb7c <SPI_init>
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <BCM_Init+0x124>
		break;
	default:
		au8_Ret = E_NOK;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     200:	89 81       	ldd	r24, Y+1	; 0x01
}
     202:	6a 96       	adiw	r28, 0x1a	; 26
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <BCM_DeInit>:

EnmBCMError_t BCM_DeInit(uint8_t BCM_ProtocolID)
{
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	00 d0       	rcall	.+0      	; 0x21a <BCM_DeInit+0x6>
     21a:	00 d0       	rcall	.+0      	; 0x21c <BCM_DeInit+0x8>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
     222:	19 82       	std	Y+1, r1	; 0x01

	switch(BCM_ProtocolID)
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	3c 83       	std	Y+4, r19	; 0x04
     22c:	2b 83       	std	Y+3, r18	; 0x03
     22e:	8b 81       	ldd	r24, Y+3	; 0x03
     230:	9c 81       	ldd	r25, Y+4	; 0x04
     232:	80 3a       	cpi	r24, 0xA0	; 160
     234:	91 05       	cpc	r25, r1
     236:	31 f0       	breq	.+12     	; 0x244 <BCM_DeInit+0x30>
     238:	2b 81       	ldd	r18, Y+3	; 0x03
     23a:	3c 81       	ldd	r19, Y+4	; 0x04
     23c:	21 3a       	cpi	r18, 0xA1	; 161
     23e:	31 05       	cpc	r19, r1
     240:	61 f0       	breq	.+24     	; 0x25a <BCM_DeInit+0x46>
     242:	12 c0       	rjmp	.+36     	; 0x268 <BCM_DeInit+0x54>
	{
	case BCM_UART_ID:
		UART_deInit();
     244:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <UART_deInit>
		UART_RXC_setCallBack(NULL);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 23 07 	call	0xe46	; 0xe46 <UART_RXC_setCallBack>
		UART_TXC_setCallBack(NULL);
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_TXC_setCallBack>
     258:	09 c0       	rjmp	.+18     	; 0x26c <BCM_DeInit+0x58>
		break;
	case BCM_SPI_ID:
		SPI_deInit();
     25a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <SPI_deInit>
		SPI_setCallBack(NULL);
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_setCallBack>
     266:	02 c0       	rjmp	.+4      	; 0x26c <BCM_DeInit+0x58>
		break;
	default:
		au8_Ret = E_NOK;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     26c:	89 81       	ldd	r24, Y+1	; 0x01
}
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <BCM_RxDispatch>:

EnmBCMError_t BCM_RxDispatch(void)
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_Ret = E_OK;
     286:	19 82       	std	Y+1, r1	; 0x01

	if(gu8_BCM_Receiving_SM == BCM_RECEIVING_COMPLETE && gu8_RxDispatchCounter < (RxCfg.BCM_ArraySize - 1) && gu8_RxDispatchCounter >= 3)
     288:	80 91 73 00 	lds	r24, 0x0073
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	21 f5       	brne	.+72     	; 0x2d8 <BCM_RxDispatch+0x5c>
     290:	80 91 61 00 	lds	r24, 0x0061
     294:	28 2f       	mov	r18, r24
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	80 91 86 00 	lds	r24, 0x0086
     29c:	90 91 87 00 	lds	r25, 0x0087
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	28 17       	cp	r18, r24
     2a4:	39 07       	cpc	r19, r25
     2a6:	c0 f4       	brcc	.+48     	; 0x2d8 <BCM_RxDispatch+0x5c>
     2a8:	80 91 61 00 	lds	r24, 0x0061
     2ac:	83 30       	cpi	r24, 0x03	; 3
     2ae:	a0 f0       	brcs	.+40     	; 0x2d8 <BCM_RxDispatch+0x5c>
	{
		gu8_RxCheckSum += RxCfg.BCM_ArrayStartAddress[gu8_RxDispatchCounter];
     2b0:	20 91 84 00 	lds	r18, 0x0084
     2b4:	30 91 85 00 	lds	r19, 0x0085
     2b8:	80 91 61 00 	lds	r24, 0x0061
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	f9 01       	movw	r30, r18
     2c2:	e8 0f       	add	r30, r24
     2c4:	f9 1f       	adc	r31, r25
     2c6:	90 81       	ld	r25, Z
     2c8:	80 91 76 00 	lds	r24, 0x0076
     2cc:	89 0f       	add	r24, r25
     2ce:	80 93 76 00 	sts	0x0076, r24

		gu8_BCM_Receiving_SM = BCM_RECEIVING_BYTE;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 73 00 	sts	0x0073, r24
	}

	if(gu8_RxDispatchCounter == RxCfg.BCM_ArraySize - 1)
     2d8:	80 91 61 00 	lds	r24, 0x0061
     2dc:	28 2f       	mov	r18, r24
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	80 91 86 00 	lds	r24, 0x0086
     2e4:	90 91 87 00 	lds	r25, 0x0087
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	28 17       	cp	r18, r24
     2ec:	39 07       	cpc	r19, r25
     2ee:	31 f5       	brne	.+76     	; 0x33c <BCM_RxDispatch+0xc0>
	{
		if(gu8_RxCheckSum != RxCfg.BCM_ArrayStartAddress[gu8_RxDispatchCounter])
     2f0:	20 91 84 00 	lds	r18, 0x0084
     2f4:	30 91 85 00 	lds	r19, 0x0085
     2f8:	80 91 61 00 	lds	r24, 0x0061
     2fc:	88 2f       	mov	r24, r24
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	e8 0f       	add	r30, r24
     304:	f9 1f       	adc	r31, r25
     306:	90 81       	ld	r25, Z
     308:	80 91 76 00 	lds	r24, 0x0076
     30c:	98 17       	cp	r25, r24
     30e:	11 f0       	breq	.+4      	; 0x314 <BCM_RxDispatch+0x98>
			au8_Ret = E_NOK;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	89 83       	std	Y+1, r24	; 0x01
		gu8_BCM_Receiving_SM = BCM_RECEIVER_IDLE;
     314:	10 92 73 00 	sts	0x0073, r1
		gu8_RxCounter = 0;
     318:	10 92 78 00 	sts	0x0078, r1
		gu8_RxDispatchCounter = 255;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	80 93 61 00 	sts	0x0061, r24
		gu8_RxCheckSum = 0;
     322:	10 92 76 00 	sts	0x0076, r1

		if(BCM_CallBackPtr != NULL)
     326:	80 91 79 00 	lds	r24, 0x0079
     32a:	90 91 7a 00 	lds	r25, 0x007A
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	29 f0       	breq	.+10     	; 0x33c <BCM_RxDispatch+0xc0>
		{
			BCM_CallBackPtr();
     332:	e0 91 79 00 	lds	r30, 0x0079
     336:	f0 91 7a 00 	lds	r31, 0x007A
     33a:	09 95       	icall
		}
	}

	return au8_Ret;
     33c:	89 81       	ldd	r24, Y+1	; 0x01
}
     33e:	0f 90       	pop	r0
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <BCM_TxDispatch>:

EnmBCMError_t BCM_TxDispatch(void)
{
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
	if(gu8_BCM_SENDING_SM == BCM_SENDING_COMPLETE)
     34e:	80 91 72 00 	lds	r24, 0x0072
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	21 f5       	brne	.+72     	; 0x39e <BCM_TxDispatch+0x58>
	{
		if(gu8_TxDispatchCounter < TxCfg.BCM_ArraySize - 4)
     356:	80 91 60 00 	lds	r24, 0x0060
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	80 91 81 00 	lds	r24, 0x0081
     362:	90 91 82 00 	lds	r25, 0x0082
     366:	04 97       	sbiw	r24, 0x04	; 4
     368:	28 17       	cp	r18, r24
     36a:	39 07       	cpc	r19, r25
     36c:	88 f4       	brcc	.+34     	; 0x390 <BCM_TxDispatch+0x4a>
		{
			gu8_TxCheckSum += TxCfg.BCM_ArrayStartAddress[gu8_TxDispatchCounter];
     36e:	20 91 7f 00 	lds	r18, 0x007F
     372:	30 91 80 00 	lds	r19, 0x0080
     376:	80 91 60 00 	lds	r24, 0x0060
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	e8 0f       	add	r30, r24
     382:	f9 1f       	adc	r31, r25
     384:	90 81       	ld	r25, Z
     386:	80 91 75 00 	lds	r24, 0x0075
     38a:	89 0f       	add	r24, r25
     38c:	80 93 75 00 	sts	0x0075, r24
		}

		gu8_BCM_SENDING_SM = BCM_SENDING_BYTE;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 72 00 	sts	0x0072, r24

		BCM_Send(&TxCfg);
     396:	8e e7       	ldi	r24, 0x7E	; 126
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <BCM_Send>
	}

	if(gu8_TxDispatchCounter == TxCfg.BCM_ArraySize - 1)
     39e:	80 91 60 00 	lds	r24, 0x0060
     3a2:	28 2f       	mov	r18, r24
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	80 91 81 00 	lds	r24, 0x0081
     3aa:	90 91 82 00 	lds	r25, 0x0082
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	28 17       	cp	r18, r24
     3b2:	39 07       	cpc	r19, r25
     3b4:	49 f4       	brne	.+18     	; 0x3c8 <BCM_TxDispatch+0x82>
	{
		gu8_BCM_SENDING_SM = BCM_SENDER_IDLE;
     3b6:	10 92 72 00 	sts	0x0072, r1
		gu8_TxCounter = 0;
     3ba:	10 92 77 00 	sts	0x0077, r1
		gu8_TxDispatchCounter = 255;
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	80 93 60 00 	sts	0x0060, r24
		gu8_TxCheckSum = 0;
     3c4:	10 92 75 00 	sts	0x0075, r1
	}

	return E_OK;
     3c8:	80 e0       	ldi	r24, 0x00	; 0
}
     3ca:	cf 91       	pop	r28
     3cc:	df 91       	pop	r29
     3ce:	08 95       	ret

000003d0 <BCM_Send>:

EnmBCMError_t BCM_Send(strBcmSendConfig_t* ConfigPtr)
{
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	2a 97       	sbiw	r28, 0x0a	; 10
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	9b 83       	std	Y+3, r25	; 0x03
     3e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
     3e8:	19 82       	std	Y+1, r1	; 0x01
	static PointerToSenderFunction apf_SenderFunction = NULL;

	if(gu8_TxCounter == 0)
     3ea:	80 91 77 00 	lds	r24, 0x0077
     3ee:	88 23       	and	r24, r24
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <BCM_Send+0x24>
     3f2:	5e c0       	rjmp	.+188    	; 0x4b0 <BCM_Send+0xe0>
	{
		switch(ConfigPtr->BCM_ProtocolID)
     3f4:	ea 81       	ldd	r30, Y+2	; 0x02
     3f6:	fb 81       	ldd	r31, Y+3	; 0x03
     3f8:	80 81       	ld	r24, Z
     3fa:	28 2f       	mov	r18, r24
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	3d 83       	std	Y+5, r19	; 0x05
     400:	2c 83       	std	Y+4, r18	; 0x04
     402:	8c 81       	ldd	r24, Y+4	; 0x04
     404:	9d 81       	ldd	r25, Y+5	; 0x05
     406:	80 3a       	cpi	r24, 0xA0	; 160
     408:	91 05       	cpc	r25, r1
     40a:	31 f0       	breq	.+12     	; 0x418 <BCM_Send+0x48>
     40c:	ec 81       	ldd	r30, Y+4	; 0x04
     40e:	fd 81       	ldd	r31, Y+5	; 0x05
     410:	e1 3a       	cpi	r30, 0xA1	; 161
     412:	f1 05       	cpc	r31, r1
     414:	61 f0       	breq	.+24     	; 0x42e <BCM_Send+0x5e>
     416:	16 c0       	rjmp	.+44     	; 0x444 <BCM_Send+0x74>
		{
		case BCM_UART_ID:
			UART_TXC_setCallBack(&TxApp);
     418:	8f e5       	ldi	r24, 0x5F	; 95
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_TXC_setCallBack>
			apf_SenderFunction = UART_transmit;
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	98 e0       	ldi	r25, 0x08	; 8
     424:	90 93 7c 00 	sts	0x007C, r25
     428:	80 93 7b 00 	sts	0x007B, r24
     42c:	0d c0       	rjmp	.+26     	; 0x448 <BCM_Send+0x78>
			break;
		case BCM_SPI_ID:
			SPI_setCallBack(&TxApp);
     42e:	8f e5       	ldi	r24, 0x5F	; 95
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_setCallBack>
			apf_SenderFunction = SPI_sendByte;
     436:	8c e4       	ldi	r24, 0x4C	; 76
     438:	96 e0       	ldi	r25, 0x06	; 6
     43a:	90 93 7c 00 	sts	0x007C, r25
     43e:	80 93 7b 00 	sts	0x007B, r24
     442:	02 c0       	rjmp	.+4      	; 0x448 <BCM_Send+0x78>
			break;
		default:
			au8_Ret = E_NOK;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 4] = BCM_ID;
     448:	ea 81       	ldd	r30, Y+2	; 0x02
     44a:	fb 81       	ldd	r31, Y+3	; 0x03
     44c:	21 81       	ldd	r18, Z+1	; 0x01
     44e:	32 81       	ldd	r19, Z+2	; 0x02
     450:	ea 81       	ldd	r30, Y+2	; 0x02
     452:	fb 81       	ldd	r31, Y+3	; 0x03
     454:	83 81       	ldd	r24, Z+3	; 0x03
     456:	94 81       	ldd	r25, Z+4	; 0x04
     458:	04 97       	sbiw	r24, 0x04	; 4
     45a:	f9 01       	movw	r30, r18
     45c:	e8 0f       	add	r30, r24
     45e:	f9 1f       	adc	r31, r25
     460:	8a e5       	ldi	r24, 0x5A	; 90
     462:	80 83       	st	Z, r24
		ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 3] = (uint8_t)((ConfigPtr->BCM_ArraySize-4) >> 8);
     464:	ea 81       	ldd	r30, Y+2	; 0x02
     466:	fb 81       	ldd	r31, Y+3	; 0x03
     468:	21 81       	ldd	r18, Z+1	; 0x01
     46a:	32 81       	ldd	r19, Z+2	; 0x02
     46c:	ea 81       	ldd	r30, Y+2	; 0x02
     46e:	fb 81       	ldd	r31, Y+3	; 0x03
     470:	83 81       	ldd	r24, Z+3	; 0x03
     472:	94 81       	ldd	r25, Z+4	; 0x04
     474:	03 97       	sbiw	r24, 0x03	; 3
     476:	d9 01       	movw	r26, r18
     478:	a8 0f       	add	r26, r24
     47a:	b9 1f       	adc	r27, r25
     47c:	ea 81       	ldd	r30, Y+2	; 0x02
     47e:	fb 81       	ldd	r31, Y+3	; 0x03
     480:	83 81       	ldd	r24, Z+3	; 0x03
     482:	94 81       	ldd	r25, Z+4	; 0x04
     484:	04 97       	sbiw	r24, 0x04	; 4
     486:	89 2f       	mov	r24, r25
     488:	99 27       	eor	r25, r25
     48a:	8c 93       	st	X, r24
		ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 2] =
     48c:	ea 81       	ldd	r30, Y+2	; 0x02
     48e:	fb 81       	ldd	r31, Y+3	; 0x03
     490:	21 81       	ldd	r18, Z+1	; 0x01
     492:	32 81       	ldd	r19, Z+2	; 0x02
     494:	ea 81       	ldd	r30, Y+2	; 0x02
     496:	fb 81       	ldd	r31, Y+3	; 0x03
     498:	83 81       	ldd	r24, Z+3	; 0x03
     49a:	94 81       	ldd	r25, Z+4	; 0x04
     49c:	02 97       	sbiw	r24, 0x02	; 2
     49e:	d9 01       	movw	r26, r18
     4a0:	a8 0f       	add	r26, r24
     4a2:	b9 1f       	adc	r27, r25
     4a4:	ea 81       	ldd	r30, Y+2	; 0x02
     4a6:	fb 81       	ldd	r31, Y+3	; 0x03
     4a8:	83 81       	ldd	r24, Z+3	; 0x03
     4aa:	94 81       	ldd	r25, Z+4	; 0x04
     4ac:	84 50       	subi	r24, 0x04	; 4
     4ae:	8c 93       	st	X, r24
				(uint8_t)((ConfigPtr->BCM_ArraySize-4) & 0x00FF);
	}

	ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 1] = gu8_TxCheckSum;
     4b0:	ea 81       	ldd	r30, Y+2	; 0x02
     4b2:	fb 81       	ldd	r31, Y+3	; 0x03
     4b4:	21 81       	ldd	r18, Z+1	; 0x01
     4b6:	32 81       	ldd	r19, Z+2	; 0x02
     4b8:	ea 81       	ldd	r30, Y+2	; 0x02
     4ba:	fb 81       	ldd	r31, Y+3	; 0x03
     4bc:	83 81       	ldd	r24, Z+3	; 0x03
     4be:	94 81       	ldd	r25, Z+4	; 0x04
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f9 01       	movw	r30, r18
     4c4:	e8 0f       	add	r30, r24
     4c6:	f9 1f       	adc	r31, r25
     4c8:	80 91 75 00 	lds	r24, 0x0075
     4cc:	80 83       	st	Z, r24

	if(gu8_TxCounter < ConfigPtr->BCM_ArraySize)
     4ce:	80 91 77 00 	lds	r24, 0x0077
     4d2:	28 2f       	mov	r18, r24
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	ea 81       	ldd	r30, Y+2	; 0x02
     4d8:	fb 81       	ldd	r31, Y+3	; 0x03
     4da:	83 81       	ldd	r24, Z+3	; 0x03
     4dc:	94 81       	ldd	r25, Z+4	; 0x04
     4de:	28 17       	cp	r18, r24
     4e0:	39 07       	cpc	r19, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <BCM_Send+0x116>
     4e4:	55 c0       	rjmp	.+170    	; 0x590 <BCM_Send+0x1c0>
	{
		if(gu8_TxCounter <= 2)
     4e6:	80 91 77 00 	lds	r24, 0x0077
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	d0 f4       	brcc	.+52     	; 0x522 <BCM_Send+0x152>
			apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 4 + gu8_TxCounter]);
     4ee:	60 91 7b 00 	lds	r22, 0x007B
     4f2:	70 91 7c 00 	lds	r23, 0x007C
     4f6:	ea 81       	ldd	r30, Y+2	; 0x02
     4f8:	fb 81       	ldd	r31, Y+3	; 0x03
     4fa:	41 81       	ldd	r20, Z+1	; 0x01
     4fc:	52 81       	ldd	r21, Z+2	; 0x02
     4fe:	ea 81       	ldd	r30, Y+2	; 0x02
     500:	fb 81       	ldd	r31, Y+3	; 0x03
     502:	23 81       	ldd	r18, Z+3	; 0x03
     504:	34 81       	ldd	r19, Z+4	; 0x04
     506:	80 91 77 00 	lds	r24, 0x0077
     50a:	88 2f       	mov	r24, r24
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	04 97       	sbiw	r24, 0x04	; 4
     514:	fa 01       	movw	r30, r20
     516:	e8 0f       	add	r30, r24
     518:	f9 1f       	adc	r31, r25
     51a:	80 81       	ld	r24, Z
     51c:	fb 01       	movw	r30, r22
     51e:	09 95       	icall
     520:	32 c0       	rjmp	.+100    	; 0x586 <BCM_Send+0x1b6>
		else if(gu8_TxCounter == ConfigPtr->BCM_ArraySize - 1)
     522:	80 91 77 00 	lds	r24, 0x0077
     526:	28 2f       	mov	r18, r24
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	ea 81       	ldd	r30, Y+2	; 0x02
     52c:	fb 81       	ldd	r31, Y+3	; 0x03
     52e:	83 81       	ldd	r24, Z+3	; 0x03
     530:	94 81       	ldd	r25, Z+4	; 0x04
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	99 f4       	brne	.+38     	; 0x560 <BCM_Send+0x190>
			apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[gu8_TxCounter]);
     53a:	40 91 7b 00 	lds	r20, 0x007B
     53e:	50 91 7c 00 	lds	r21, 0x007C
     542:	ea 81       	ldd	r30, Y+2	; 0x02
     544:	fb 81       	ldd	r31, Y+3	; 0x03
     546:	21 81       	ldd	r18, Z+1	; 0x01
     548:	32 81       	ldd	r19, Z+2	; 0x02
     54a:	80 91 77 00 	lds	r24, 0x0077
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	f9 01       	movw	r30, r18
     554:	e8 0f       	add	r30, r24
     556:	f9 1f       	adc	r31, r25
     558:	80 81       	ld	r24, Z
     55a:	fa 01       	movw	r30, r20
     55c:	09 95       	icall
     55e:	13 c0       	rjmp	.+38     	; 0x586 <BCM_Send+0x1b6>
		else
			apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[gu8_TxCounter - 3]);
     560:	40 91 7b 00 	lds	r20, 0x007B
     564:	50 91 7c 00 	lds	r21, 0x007C
     568:	ea 81       	ldd	r30, Y+2	; 0x02
     56a:	fb 81       	ldd	r31, Y+3	; 0x03
     56c:	21 81       	ldd	r18, Z+1	; 0x01
     56e:	32 81       	ldd	r19, Z+2	; 0x02
     570:	80 91 77 00 	lds	r24, 0x0077
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	03 97       	sbiw	r24, 0x03	; 3
     57a:	f9 01       	movw	r30, r18
     57c:	e8 0f       	add	r30, r24
     57e:	f9 1f       	adc	r31, r25
     580:	80 81       	ld	r24, Z
     582:	fa 01       	movw	r30, r20
     584:	09 95       	icall
		gu8_TxCounter++;
     586:	80 91 77 00 	lds	r24, 0x0077
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 77 00 	sts	0x0077, r24
	}

	TxCfg = *ConfigPtr;
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	9b 81       	ldd	r25, Y+3	; 0x03
     594:	2e e7       	ldi	r18, 0x7E	; 126
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	3f 83       	std	Y+7, r19	; 0x07
     59a:	2e 83       	std	Y+6, r18	; 0x06
     59c:	99 87       	std	Y+9, r25	; 0x09
     59e:	88 87       	std	Y+8, r24	; 0x08
     5a0:	35 e0       	ldi	r19, 0x05	; 5
     5a2:	3a 87       	std	Y+10, r19	; 0x0a
     5a4:	e8 85       	ldd	r30, Y+8	; 0x08
     5a6:	f9 85       	ldd	r31, Y+9	; 0x09
     5a8:	00 80       	ld	r0, Z
     5aa:	28 85       	ldd	r18, Y+8	; 0x08
     5ac:	39 85       	ldd	r19, Y+9	; 0x09
     5ae:	2f 5f       	subi	r18, 0xFF	; 255
     5b0:	3f 4f       	sbci	r19, 0xFF	; 255
     5b2:	39 87       	std	Y+9, r19	; 0x09
     5b4:	28 87       	std	Y+8, r18	; 0x08
     5b6:	ee 81       	ldd	r30, Y+6	; 0x06
     5b8:	ff 81       	ldd	r31, Y+7	; 0x07
     5ba:	00 82       	st	Z, r0
     5bc:	2e 81       	ldd	r18, Y+6	; 0x06
     5be:	3f 81       	ldd	r19, Y+7	; 0x07
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	3f 4f       	sbci	r19, 0xFF	; 255
     5c4:	3f 83       	std	Y+7, r19	; 0x07
     5c6:	2e 83       	std	Y+6, r18	; 0x06
     5c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     5ca:	31 50       	subi	r19, 0x01	; 1
     5cc:	3a 87       	std	Y+10, r19	; 0x0a
     5ce:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d0:	88 23       	and	r24, r24
     5d2:	41 f7       	brne	.-48     	; 0x5a4 <BCM_Send+0x1d4>

	return au8_Ret;
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     5d6:	2a 96       	adiw	r28, 0x0a	; 10
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <BCM_SetupRxBuffer>:

EnmBCMError_t BCM_SetupRxBuffer(uint8_t ProtocolID, uint8_t* ArrayFirstElementAddress, uint16_t ArraySize)
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	28 97       	sbiw	r28, 0x08	; 8
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	8a 83       	std	Y+2, r24	; 0x02
     5fe:	7c 83       	std	Y+4, r23	; 0x04
     600:	6b 83       	std	Y+3, r22	; 0x03
     602:	5e 83       	std	Y+6, r21	; 0x06
     604:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t au8_Ret = E_OK;
     606:	19 82       	std	Y+1, r1	; 0x01

	RxCfg.BCM_ArraySize = ArraySize;
     608:	8d 81       	ldd	r24, Y+5	; 0x05
     60a:	9e 81       	ldd	r25, Y+6	; 0x06
     60c:	90 93 87 00 	sts	0x0087, r25
     610:	80 93 86 00 	sts	0x0086, r24
	RxCfg.BCM_ArrayStartAddress = ArrayFirstElementAddress;
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	90 93 85 00 	sts	0x0085, r25
     61c:	80 93 84 00 	sts	0x0084, r24
	RxCfg.BCM_ProtocolID = ProtocolID;
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	80 93 83 00 	sts	0x0083, r24

	switch(ProtocolID)
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	38 87       	std	Y+8, r19	; 0x08
     62e:	2f 83       	std	Y+7, r18	; 0x07
     630:	8f 81       	ldd	r24, Y+7	; 0x07
     632:	98 85       	ldd	r25, Y+8	; 0x08
     634:	80 3a       	cpi	r24, 0xA0	; 160
     636:	91 05       	cpc	r25, r1
     638:	31 f0       	breq	.+12     	; 0x646 <BCM_SetupRxBuffer+0x5e>
     63a:	2f 81       	ldd	r18, Y+7	; 0x07
     63c:	38 85       	ldd	r19, Y+8	; 0x08
     63e:	21 3a       	cpi	r18, 0xA1	; 161
     640:	31 05       	cpc	r19, r1
     642:	31 f0       	breq	.+12     	; 0x650 <BCM_SetupRxBuffer+0x68>
     644:	0a c0       	rjmp	.+20     	; 0x65a <BCM_SetupRxBuffer+0x72>
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
     646:	89 e4       	ldi	r24, 0x49	; 73
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 23 07 	call	0xe46	; 0xe46 <UART_RXC_setCallBack>
     64e:	07 c0       	rjmp	.+14     	; 0x65e <BCM_SetupRxBuffer+0x76>
		break;
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
     650:	89 e4       	ldi	r24, 0x49	; 73
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_setCallBack>
     658:	02 c0       	rjmp	.+4      	; 0x65e <BCM_SetupRxBuffer+0x76>
		break;
	default:
		au8_Ret = E_NOK;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     65e:	89 81       	ldd	r24, Y+1	; 0x01
}
     660:	28 96       	adiw	r28, 0x08	; 8
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	08 95       	ret

00000672 <BCM_Receive>:

EnmBCMError_t BCM_Receive(strBcmSendConfig_t* ConfigPtr)
{
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	00 d0       	rcall	.+0      	; 0x67c <BCM_Receive+0xa>
     67c:	00 d0       	rcall	.+0      	; 0x67e <BCM_Receive+0xc>
     67e:	00 d0       	rcall	.+0      	; 0x680 <BCM_Receive+0xe>
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	9c 83       	std	Y+4, r25	; 0x04
     686:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t au8_Ret = E_OK;
	PointerToReceiverFunction apf_ReceiverFunction = NULL;
     688:	1a 82       	std	Y+2, r1	; 0x02
     68a:	19 82       	std	Y+1, r1	; 0x01

	switch(ConfigPtr->BCM_ProtocolID)
     68c:	eb 81       	ldd	r30, Y+3	; 0x03
     68e:	fc 81       	ldd	r31, Y+4	; 0x04
     690:	80 81       	ld	r24, Z
     692:	28 2f       	mov	r18, r24
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	3e 83       	std	Y+6, r19	; 0x06
     698:	2d 83       	std	Y+5, r18	; 0x05
     69a:	8d 81       	ldd	r24, Y+5	; 0x05
     69c:	9e 81       	ldd	r25, Y+6	; 0x06
     69e:	80 3a       	cpi	r24, 0xA0	; 160
     6a0:	91 05       	cpc	r25, r1
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <BCM_Receive+0x3e>
     6a4:	ed 81       	ldd	r30, Y+5	; 0x05
     6a6:	fe 81       	ldd	r31, Y+6	; 0x06
     6a8:	e1 3a       	cpi	r30, 0xA1	; 161
     6aa:	f1 05       	cpc	r31, r1
     6ac:	51 f0       	breq	.+20     	; 0x6c2 <BCM_Receive+0x50>
     6ae:	12 c0       	rjmp	.+36     	; 0x6d4 <BCM_Receive+0x62>
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
     6b0:	89 e4       	ldi	r24, 0x49	; 73
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 23 07 	call	0xe46	; 0xe46 <UART_RXC_setCallBack>
		apf_ReceiverFunction = UART_receive;
     6b8:	85 e2       	ldi	r24, 0x25	; 37
     6ba:	98 e0       	ldi	r25, 0x08	; 8
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	0c c0       	rjmp	.+24     	; 0x6da <BCM_Receive+0x68>
		break;
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
     6c2:	89 e4       	ldi	r24, 0x49	; 73
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 3a 06 	call	0xc74	; 0xc74 <SPI_setCallBack>
		apf_ReceiverFunction = SPI_receiveByte;
     6ca:	84 e6       	ldi	r24, 0x64	; 100
     6cc:	96 e0       	ldi	r25, 0x06	; 6
     6ce:	9a 83       	std	Y+2, r25	; 0x02
     6d0:	89 83       	std	Y+1, r24	; 0x01
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <BCM_Receive+0x68>
		break;
	default:
		au8_Ret = E_NOK;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 7d 00 	sts	0x007D, r24
		break;
	}

	if(gu8_RxCounter < ConfigPtr->BCM_ArraySize && au8_Ret == E_OK)
     6da:	80 91 78 00 	lds	r24, 0x0078
     6de:	28 2f       	mov	r18, r24
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	eb 81       	ldd	r30, Y+3	; 0x03
     6e4:	fc 81       	ldd	r31, Y+4	; 0x04
     6e6:	83 81       	ldd	r24, Z+3	; 0x03
     6e8:	94 81       	ldd	r25, Z+4	; 0x04
     6ea:	28 17       	cp	r18, r24
     6ec:	39 07       	cpc	r19, r25
     6ee:	08 f0       	brcs	.+2      	; 0x6f2 <BCM_Receive+0x80>
     6f0:	40 c0       	rjmp	.+128    	; 0x772 <BCM_Receive+0x100>
     6f2:	80 91 7d 00 	lds	r24, 0x007D
     6f6:	88 23       	and	r24, r24
     6f8:	e1 f5       	brne	.+120    	; 0x772 <BCM_Receive+0x100>
	{
		ConfigPtr->BCM_ArrayStartAddress[gu8_RxCounter] = apf_ReceiverFunction();
     6fa:	eb 81       	ldd	r30, Y+3	; 0x03
     6fc:	fc 81       	ldd	r31, Y+4	; 0x04
     6fe:	21 81       	ldd	r18, Z+1	; 0x01
     700:	32 81       	ldd	r19, Z+2	; 0x02
     702:	80 91 78 00 	lds	r24, 0x0078
     706:	88 2f       	mov	r24, r24
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	89 01       	movw	r16, r18
     70c:	08 0f       	add	r16, r24
     70e:	19 1f       	adc	r17, r25
     710:	e9 81       	ldd	r30, Y+1	; 0x01
     712:	fa 81       	ldd	r31, Y+2	; 0x02
     714:	09 95       	icall
     716:	f8 01       	movw	r30, r16
     718:	80 83       	st	Z, r24

		if(ConfigPtr->BCM_ArrayStartAddress[0] != BCM_ID)
     71a:	eb 81       	ldd	r30, Y+3	; 0x03
     71c:	fc 81       	ldd	r31, Y+4	; 0x04
     71e:	01 80       	ldd	r0, Z+1	; 0x01
     720:	f2 81       	ldd	r31, Z+2	; 0x02
     722:	e0 2d       	mov	r30, r0
     724:	80 81       	ld	r24, Z
     726:	8a 35       	cpi	r24, 0x5A	; 90
     728:	69 f0       	breq	.+26     	; 0x744 <BCM_Receive+0xd2>
		{
			au8_Ret = E_NOK;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 93 7d 00 	sts	0x007D, r24
			gu8_BCM_Receiving_SM = BCM_RECEIVER_IDLE;
     730:	10 92 73 00 	sts	0x0073, r1
			gu8_RxCounter = 0;
     734:	10 92 78 00 	sts	0x0078, r1
			gu8_RxDispatchCounter = 255;
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	80 93 61 00 	sts	0x0061, r24
			gu8_RxCheckSum = 0;
     73e:	10 92 76 00 	sts	0x0076, r1
     742:	03 c0       	rjmp	.+6      	; 0x74a <BCM_Receive+0xd8>
		}else
		{
			gu8_BCM_BufferState = BCM_BUFFER_LOCKED;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 74 00 	sts	0x0074, r24
		}

		PORTD_DIR = ConfigPtr->BCM_ArrayStartAddress[gu8_RxCounter];
     74a:	a1 e3       	ldi	r26, 0x31	; 49
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	eb 81       	ldd	r30, Y+3	; 0x03
     750:	fc 81       	ldd	r31, Y+4	; 0x04
     752:	21 81       	ldd	r18, Z+1	; 0x01
     754:	32 81       	ldd	r19, Z+2	; 0x02
     756:	80 91 78 00 	lds	r24, 0x0078
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	f9 01       	movw	r30, r18
     760:	e8 0f       	add	r30, r24
     762:	f9 1f       	adc	r31, r25
     764:	80 81       	ld	r24, Z
     766:	8c 93       	st	X, r24
		gu8_RxCounter++;
     768:	80 91 78 00 	lds	r24, 0x0078
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	80 93 78 00 	sts	0x0078, r24
	}

	return au8_Ret;
     772:	80 91 7d 00 	lds	r24, 0x007D
}
     776:	26 96       	adiw	r28, 0x06	; 6
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <BCM_SetCallBack>:

void BCM_SetCallBack(void (*a_ptr)(void))
{
     78c:	df 93       	push	r29
     78e:	cf 93       	push	r28
     790:	00 d0       	rcall	.+0      	; 0x792 <BCM_SetCallBack+0x6>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	9a 83       	std	Y+2, r25	; 0x02
     798:	89 83       	std	Y+1, r24	; 0x01
	BCM_CallBackPtr = a_ptr;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	90 93 7a 00 	sts	0x007A, r25
     7a2:	80 93 79 00 	sts	0x0079, r24
}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <DIO_init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	29 97       	sbiw	r28, 0x09	; 9
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	9d 83       	std	Y+5, r25	; 0x05
     7c6:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t au8_Ret = E_OK;
     7c8:	1b 82       	std	Y+3, r1	; 0x03
	/* A local pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDirectionPointer = NULL;
     7ca:	1a 82       	std	Y+2, r1	; 0x02
     7cc:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its direction */
	switch(DIO_info->GPIO)
     7ce:	ec 81       	ldd	r30, Y+4	; 0x04
     7d0:	fd 81       	ldd	r31, Y+5	; 0x05
     7d2:	80 81       	ld	r24, Z
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	39 87       	std	Y+9, r19	; 0x09
     7da:	28 87       	std	Y+8, r18	; 0x08
     7dc:	88 85       	ldd	r24, Y+8	; 0x08
     7de:	99 85       	ldd	r25, Y+9	; 0x09
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	91 05       	cpc	r25, r1
     7e4:	d1 f0       	breq	.+52     	; 0x81a <DIO_init+0x6a>
     7e6:	28 85       	ldd	r18, Y+8	; 0x08
     7e8:	39 85       	ldd	r19, Y+9	; 0x09
     7ea:	22 30       	cpi	r18, 0x02	; 2
     7ec:	31 05       	cpc	r19, r1
     7ee:	2c f4       	brge	.+10     	; 0x7fa <DIO_init+0x4a>
     7f0:	88 85       	ldd	r24, Y+8	; 0x08
     7f2:	99 85       	ldd	r25, Y+9	; 0x09
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	61 f0       	breq	.+24     	; 0x810 <DIO_init+0x60>
     7f8:	1f c0       	rjmp	.+62     	; 0x838 <DIO_init+0x88>
     7fa:	28 85       	ldd	r18, Y+8	; 0x08
     7fc:	39 85       	ldd	r19, Y+9	; 0x09
     7fe:	22 30       	cpi	r18, 0x02	; 2
     800:	31 05       	cpc	r19, r1
     802:	81 f0       	breq	.+32     	; 0x824 <DIO_init+0x74>
     804:	88 85       	ldd	r24, Y+8	; 0x08
     806:	99 85       	ldd	r25, Y+9	; 0x09
     808:	83 30       	cpi	r24, 0x03	; 3
     80a:	91 05       	cpc	r25, r1
     80c:	81 f0       	breq	.+32     	; 0x82e <DIO_init+0x7e>
     80e:	14 c0       	rjmp	.+40     	; 0x838 <DIO_init+0x88>
	{
	case GPIOA:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTA_DIR);
     810:	8a e3       	ldi	r24, 0x3A	; 58
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	9a 83       	std	Y+2, r25	; 0x02
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	11 c0       	rjmp	.+34     	; 0x83c <DIO_init+0x8c>
		break;
	case GPIOB:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTB_DIR);
     81a:	87 e3       	ldi	r24, 0x37	; 55
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9a 83       	std	Y+2, r25	; 0x02
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	0c c0       	rjmp	.+24     	; 0x83c <DIO_init+0x8c>
		break;
	case GPIOC:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTC_DIR);
     824:	84 e3       	ldi	r24, 0x34	; 52
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	07 c0       	rjmp	.+14     	; 0x83c <DIO_init+0x8c>
		break;
	case GPIOD:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTD_DIR);
     82e:	81 e3       	ldi	r24, 0x31	; 49
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	02 c0       	rjmp	.+4      	; 0x83c <DIO_init+0x8c>
		break;
	default:
		au8_Ret = E_NOK;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_Ret == E_OK)
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	88 23       	and	r24, r24
     840:	59 f5       	brne	.+86     	; 0x898 <__stack+0x39>
	{
		/* A switch case to determine which direction to be configured in the port */
		switch(DIO_info->dir)
     842:	ec 81       	ldd	r30, Y+4	; 0x04
     844:	fd 81       	ldd	r31, Y+5	; 0x05
     846:	82 81       	ldd	r24, Z+2	; 0x02
     848:	28 2f       	mov	r18, r24
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	3f 83       	std	Y+7, r19	; 0x07
     84e:	2e 83       	std	Y+6, r18	; 0x06
     850:	8e 81       	ldd	r24, Y+6	; 0x06
     852:	9f 81       	ldd	r25, Y+7	; 0x07
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	31 f0       	breq	.+12     	; 0x864 <__stack+0x5>
     858:	2e 81       	ldd	r18, Y+6	; 0x06
     85a:	3f 81       	ldd	r19, Y+7	; 0x07
     85c:	2f 3f       	cpi	r18, 0xFF	; 255
     85e:	31 05       	cpc	r19, r1
     860:	71 f0       	breq	.+28     	; 0x87e <__stack+0x1f>
     862:	18 c0       	rjmp	.+48     	; 0x894 <__stack+0x35>
		{
		case INPUT:
			*pau8_gpioDirectionPointer &= ~(DIO_info->pins);
     864:	e9 81       	ldd	r30, Y+1	; 0x01
     866:	fa 81       	ldd	r31, Y+2	; 0x02
     868:	80 81       	ld	r24, Z
     86a:	98 2f       	mov	r25, r24
     86c:	ec 81       	ldd	r30, Y+4	; 0x04
     86e:	fd 81       	ldd	r31, Y+5	; 0x05
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	80 95       	com	r24
     874:	89 23       	and	r24, r25
     876:	e9 81       	ldd	r30, Y+1	; 0x01
     878:	fa 81       	ldd	r31, Y+2	; 0x02
     87a:	80 83       	st	Z, r24
     87c:	0d c0       	rjmp	.+26     	; 0x898 <__stack+0x39>
			break;
		case OUTPUT:
			*pau8_gpioDirectionPointer |= (DIO_info->pins);
     87e:	e9 81       	ldd	r30, Y+1	; 0x01
     880:	fa 81       	ldd	r31, Y+2	; 0x02
     882:	90 81       	ld	r25, Z
     884:	ec 81       	ldd	r30, Y+4	; 0x04
     886:	fd 81       	ldd	r31, Y+5	; 0x05
     888:	81 81       	ldd	r24, Z+1	; 0x01
     88a:	89 2b       	or	r24, r25
     88c:	e9 81       	ldd	r30, Y+1	; 0x01
     88e:	fa 81       	ldd	r31, Y+2	; 0x02
     890:	80 83       	st	Z, r24
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
			break;
		default:
			au8_Ret = E_NOK;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
	}

	return au8_Ret;
     898:	8b 81       	ldd	r24, Y+3	; 0x03
}
     89a:	29 96       	adiw	r28, 0x09	; 9
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	cf 91       	pop	r28
     8a8:	df 91       	pop	r29
     8aa:	08 95       	ret

000008ac <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	2a 97       	sbiw	r28, 0x0a	; 10
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	8c 83       	std	Y+4, r24	; 0x04
     8c2:	6d 83       	std	Y+5, r22	; 0x05
     8c4:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t au8_Ret = E_OK;
     8c6:	1b 82       	std	Y+3, r1	; 0x03
	/* A pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDataPointer = NULL;
     8c8:	1a 82       	std	Y+2, r1	; 0x02
     8ca:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its data */
	switch(GPIO)
     8cc:	8c 81       	ldd	r24, Y+4	; 0x04
     8ce:	28 2f       	mov	r18, r24
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	3a 87       	std	Y+10, r19	; 0x0a
     8d4:	29 87       	std	Y+9, r18	; 0x09
     8d6:	89 85       	ldd	r24, Y+9	; 0x09
     8d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	91 05       	cpc	r25, r1
     8de:	d1 f0       	breq	.+52     	; 0x914 <DIO_Write+0x68>
     8e0:	29 85       	ldd	r18, Y+9	; 0x09
     8e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8e4:	22 30       	cpi	r18, 0x02	; 2
     8e6:	31 05       	cpc	r19, r1
     8e8:	2c f4       	brge	.+10     	; 0x8f4 <DIO_Write+0x48>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	61 f0       	breq	.+24     	; 0x90a <DIO_Write+0x5e>
     8f2:	1f c0       	rjmp	.+62     	; 0x932 <DIO_Write+0x86>
     8f4:	29 85       	ldd	r18, Y+9	; 0x09
     8f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f8:	22 30       	cpi	r18, 0x02	; 2
     8fa:	31 05       	cpc	r19, r1
     8fc:	81 f0       	breq	.+32     	; 0x91e <DIO_Write+0x72>
     8fe:	89 85       	ldd	r24, Y+9	; 0x09
     900:	9a 85       	ldd	r25, Y+10	; 0x0a
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	91 05       	cpc	r25, r1
     906:	81 f0       	breq	.+32     	; 0x928 <DIO_Write+0x7c>
     908:	14 c0       	rjmp	.+40     	; 0x932 <DIO_Write+0x86>
	{
	case GPIOA:
		pau8_gpioDataPointer = (uint8_t*)(&PORTA_DATA);
     90a:	8b e3       	ldi	r24, 0x3B	; 59
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9a 83       	std	Y+2, r25	; 0x02
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	11 c0       	rjmp	.+34     	; 0x936 <DIO_Write+0x8a>
		break;
	case GPIOB:
		pau8_gpioDataPointer = (uint8_t*)(&PORTB_DATA);
     914:	88 e3       	ldi	r24, 0x38	; 56
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	9a 83       	std	Y+2, r25	; 0x02
     91a:	89 83       	std	Y+1, r24	; 0x01
     91c:	0c c0       	rjmp	.+24     	; 0x936 <DIO_Write+0x8a>
		break;
	case GPIOC:
		pau8_gpioDataPointer = (uint8_t*)(&PORTC_DATA);
     91e:	85 e3       	ldi	r24, 0x35	; 53
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	07 c0       	rjmp	.+14     	; 0x936 <DIO_Write+0x8a>
		break;
	case GPIOD:
		pau8_gpioDataPointer = (uint8_t*)(&PORTD_DATA);
     928:	82 e3       	ldi	r24, 0x32	; 50
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_Write+0x8a>
		break;
	default:
		au8_Ret = E_NOK;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_Ret == E_OK)
     936:	8b 81       	ldd	r24, Y+3	; 0x03
     938:	88 23       	and	r24, r24
     93a:	29 f5       	brne	.+74     	; 0x986 <DIO_Write+0xda>
	{
		/* A switch case to determine which value to be configured in the port */
		switch(value)
     93c:	8e 81       	ldd	r24, Y+6	; 0x06
     93e:	28 2f       	mov	r18, r24
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	38 87       	std	Y+8, r19	; 0x08
     944:	2f 83       	std	Y+7, r18	; 0x07
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	31 f0       	breq	.+12     	; 0x95a <DIO_Write+0xae>
     94e:	2f 81       	ldd	r18, Y+7	; 0x07
     950:	38 85       	ldd	r19, Y+8	; 0x08
     952:	2f 3f       	cpi	r18, 0xFF	; 255
     954:	31 05       	cpc	r19, r1
     956:	61 f0       	breq	.+24     	; 0x970 <DIO_Write+0xc4>
     958:	14 c0       	rjmp	.+40     	; 0x982 <DIO_Write+0xd6>
		{
		case LOW:
			*pau8_gpioDataPointer &= ~(pins);
     95a:	e9 81       	ldd	r30, Y+1	; 0x01
     95c:	fa 81       	ldd	r31, Y+2	; 0x02
     95e:	80 81       	ld	r24, Z
     960:	98 2f       	mov	r25, r24
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	80 95       	com	r24
     966:	89 23       	and	r24, r25
     968:	e9 81       	ldd	r30, Y+1	; 0x01
     96a:	fa 81       	ldd	r31, Y+2	; 0x02
     96c:	80 83       	st	Z, r24
     96e:	0b c0       	rjmp	.+22     	; 0x986 <DIO_Write+0xda>
			break;
		case HIGH:
			*pau8_gpioDataPointer |= (pins);
     970:	e9 81       	ldd	r30, Y+1	; 0x01
     972:	fa 81       	ldd	r31, Y+2	; 0x02
     974:	90 81       	ld	r25, Z
     976:	8d 81       	ldd	r24, Y+5	; 0x05
     978:	89 2b       	or	r24, r25
     97a:	e9 81       	ldd	r30, Y+1	; 0x01
     97c:	fa 81       	ldd	r31, Y+2	; 0x02
     97e:	80 83       	st	Z, r24
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_Write+0xda>
			break;
		default:
			au8_Ret = E_NOK;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
	}

	return au8_Ret;
     986:	8b 81       	ldd	r24, Y+3	; 0x03
}
     988:	2a 96       	adiw	r28, 0x0a	; 10
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	08 95       	ret

0000099a <DIO_Read>:

ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t* data)
{
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	27 97       	sbiw	r28, 0x07	; 7
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	8a 83       	std	Y+2, r24	; 0x02
     9b0:	6b 83       	std	Y+3, r22	; 0x03
     9b2:	5d 83       	std	Y+5, r21	; 0x05
     9b4:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_Ret = E_OK;
     9b6:	19 82       	std	Y+1, r1	; 0x01

	if(data != NULL)
     9b8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ba:	9d 81       	ldd	r25, Y+5	; 0x05
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	09 f4       	brne	.+2      	; 0x9c2 <DIO_Read+0x28>
     9c0:	46 c0       	rjmp	.+140    	; 0xa4e <DIO_Read+0xb4>
	{
		/* A switch case to determine which port will be read from */
		switch(GPIO)
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	3f 83       	std	Y+7, r19	; 0x07
     9ca:	2e 83       	std	Y+6, r18	; 0x06
     9cc:	8e 81       	ldd	r24, Y+6	; 0x06
     9ce:	9f 81       	ldd	r25, Y+7	; 0x07
     9d0:	81 30       	cpi	r24, 0x01	; 1
     9d2:	91 05       	cpc	r25, r1
     9d4:	f1 f0       	breq	.+60     	; 0xa12 <DIO_Read+0x78>
     9d6:	2e 81       	ldd	r18, Y+6	; 0x06
     9d8:	3f 81       	ldd	r19, Y+7	; 0x07
     9da:	22 30       	cpi	r18, 0x02	; 2
     9dc:	31 05       	cpc	r19, r1
     9de:	2c f4       	brge	.+10     	; 0x9ea <DIO_Read+0x50>
     9e0:	8e 81       	ldd	r24, Y+6	; 0x06
     9e2:	9f 81       	ldd	r25, Y+7	; 0x07
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	61 f0       	breq	.+24     	; 0xa00 <DIO_Read+0x66>
     9e8:	2f c0       	rjmp	.+94     	; 0xa48 <DIO_Read+0xae>
     9ea:	2e 81       	ldd	r18, Y+6	; 0x06
     9ec:	3f 81       	ldd	r19, Y+7	; 0x07
     9ee:	22 30       	cpi	r18, 0x02	; 2
     9f0:	31 05       	cpc	r19, r1
     9f2:	c1 f0       	breq	.+48     	; 0xa24 <DIO_Read+0x8a>
     9f4:	8e 81       	ldd	r24, Y+6	; 0x06
     9f6:	9f 81       	ldd	r25, Y+7	; 0x07
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	91 05       	cpc	r25, r1
     9fc:	e1 f0       	breq	.+56     	; 0xa36 <DIO_Read+0x9c>
     9fe:	24 c0       	rjmp	.+72     	; 0xa48 <DIO_Read+0xae>
		{
		case GPIOA:
			*data = PORTA_PIN & pins;
     a00:	e9 e3       	ldi	r30, 0x39	; 57
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	90 81       	ld	r25, Z
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	89 23       	and	r24, r25
     a0a:	ec 81       	ldd	r30, Y+4	; 0x04
     a0c:	fd 81       	ldd	r31, Y+5	; 0x05
     a0e:	80 83       	st	Z, r24
     a10:	20 c0       	rjmp	.+64     	; 0xa52 <DIO_Read+0xb8>
			break;
		case GPIOB:
			*data = PORTB_PIN & pins;
     a12:	e6 e3       	ldi	r30, 0x36	; 54
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	90 81       	ld	r25, Z
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	89 23       	and	r24, r25
     a1c:	ec 81       	ldd	r30, Y+4	; 0x04
     a1e:	fd 81       	ldd	r31, Y+5	; 0x05
     a20:	80 83       	st	Z, r24
     a22:	17 c0       	rjmp	.+46     	; 0xa52 <DIO_Read+0xb8>
			break;
		case GPIOC:
			*data = PORTC_PIN & pins;
     a24:	e3 e3       	ldi	r30, 0x33	; 51
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	90 81       	ld	r25, Z
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	89 23       	and	r24, r25
     a2e:	ec 81       	ldd	r30, Y+4	; 0x04
     a30:	fd 81       	ldd	r31, Y+5	; 0x05
     a32:	80 83       	st	Z, r24
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <DIO_Read+0xb8>
			break;
		case GPIOD:
			*data = PORTD_PIN & pins;
     a36:	e0 e3       	ldi	r30, 0x30	; 48
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	90 81       	ld	r25, Z
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	89 23       	and	r24, r25
     a40:	ec 81       	ldd	r30, Y+4	; 0x04
     a42:	fd 81       	ldd	r31, Y+5	; 0x05
     a44:	80 83       	st	Z, r24
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <DIO_Read+0xb8>
			break;
		default:
			au8_Ret = E_NOK;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_Read+0xb8>
			break;
		}
	}else
	{
		au8_Ret = E_NOK;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
     a52:	89 81       	ldd	r24, Y+1	; 0x01
}
     a54:	27 96       	adiw	r28, 0x07	; 7
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	cf 91       	pop	r28
     a62:	df 91       	pop	r29
     a64:	08 95       	ret

00000a66 <DIO_Toggle>:

ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <DIO_Toggle+0x6>
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <DIO_Toggle+0x8>
     a6e:	0f 92       	push	r0
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	8a 83       	std	Y+2, r24	; 0x02
     a76:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
     a78:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which port value to be toggled */
	switch(GPIO)
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	3d 83       	std	Y+5, r19	; 0x05
     a82:	2c 83       	std	Y+4, r18	; 0x04
     a84:	8c 81       	ldd	r24, Y+4	; 0x04
     a86:	9d 81       	ldd	r25, Y+5	; 0x05
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	91 05       	cpc	r25, r1
     a8c:	f1 f0       	breq	.+60     	; 0xaca <DIO_Toggle+0x64>
     a8e:	2c 81       	ldd	r18, Y+4	; 0x04
     a90:	3d 81       	ldd	r19, Y+5	; 0x05
     a92:	22 30       	cpi	r18, 0x02	; 2
     a94:	31 05       	cpc	r19, r1
     a96:	2c f4       	brge	.+10     	; 0xaa2 <DIO_Toggle+0x3c>
     a98:	8c 81       	ldd	r24, Y+4	; 0x04
     a9a:	9d 81       	ldd	r25, Y+5	; 0x05
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	61 f0       	breq	.+24     	; 0xab8 <DIO_Toggle+0x52>
     aa0:	2f c0       	rjmp	.+94     	; 0xb00 <DIO_Toggle+0x9a>
     aa2:	2c 81       	ldd	r18, Y+4	; 0x04
     aa4:	3d 81       	ldd	r19, Y+5	; 0x05
     aa6:	22 30       	cpi	r18, 0x02	; 2
     aa8:	31 05       	cpc	r19, r1
     aaa:	c1 f0       	breq	.+48     	; 0xadc <DIO_Toggle+0x76>
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	83 30       	cpi	r24, 0x03	; 3
     ab2:	91 05       	cpc	r25, r1
     ab4:	e1 f0       	breq	.+56     	; 0xaee <DIO_Toggle+0x88>
     ab6:	24 c0       	rjmp	.+72     	; 0xb00 <DIO_Toggle+0x9a>
	{
	case GPIOA:
		PORTA_DATA ^= pins;
     ab8:	ab e3       	ldi	r26, 0x3B	; 59
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	eb e3       	ldi	r30, 0x3B	; 59
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	90 81       	ld	r25, Z
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	89 27       	eor	r24, r25
     ac6:	8c 93       	st	X, r24
     ac8:	1d c0       	rjmp	.+58     	; 0xb04 <DIO_Toggle+0x9e>
		break;
	case GPIOB:
		PORTB_DATA ^= pins;
     aca:	a8 e3       	ldi	r26, 0x38	; 56
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	e8 e3       	ldi	r30, 0x38	; 56
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	90 81       	ld	r25, Z
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	89 27       	eor	r24, r25
     ad8:	8c 93       	st	X, r24
     ada:	14 c0       	rjmp	.+40     	; 0xb04 <DIO_Toggle+0x9e>
		break;
	case GPIOC:
		PORTC_DATA ^= pins;
     adc:	a5 e3       	ldi	r26, 0x35	; 53
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e5 e3       	ldi	r30, 0x35	; 53
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	90 81       	ld	r25, Z
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	89 27       	eor	r24, r25
     aea:	8c 93       	st	X, r24
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <DIO_Toggle+0x9e>
		break;
	case GPIOD:
		PORTD_DATA ^= pins;
     aee:	a2 e3       	ldi	r26, 0x32	; 50
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	e2 e3       	ldi	r30, 0x32	; 50
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	90 81       	ld	r25, Z
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	89 27       	eor	r24, r25
     afc:	8c 93       	st	X, r24
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <DIO_Toggle+0x9e>
		break;
	default:
		au8_Ret = E_NOK;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
     b04:	89 81       	ldd	r24, Y+1	; 0x01
}
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	cf 91       	pop	r28
     b12:	df 91       	pop	r29
     b14:	08 95       	ret

00000b16 <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	2f 93       	push	r18
     b22:	3f 93       	push	r19
     b24:	4f 93       	push	r20
     b26:	5f 93       	push	r21
     b28:	6f 93       	push	r22
     b2a:	7f 93       	push	r23
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
     b30:	af 93       	push	r26
     b32:	bf 93       	push	r27
     b34:	ef 93       	push	r30
     b36:	ff 93       	push	r31
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
     b40:	80 91 88 00 	lds	r24, 0x0088
     b44:	90 91 89 00 	lds	r25, 0x0089
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	29 f0       	breq	.+10     	; 0xb56 <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
     b4c:	e0 91 88 00 	lds	r30, 0x0088
     b50:	f0 91 89 00 	lds	r31, 0x0089
     b54:	09 95       	icall
	}
}
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	ff 91       	pop	r31
     b5c:	ef 91       	pop	r30
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	7f 91       	pop	r23
     b68:	6f 91       	pop	r22
     b6a:	5f 91       	pop	r21
     b6c:	4f 91       	pop	r20
     b6e:	3f 91       	pop	r19
     b70:	2f 91       	pop	r18
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <SPI_init>:

/*
 * Description : A Function to Initialize the SPI Driver.
 */
void SPI_init(const SPI_ConfigType* ConfigPtr)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <SPI_init+0x6>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
	/* In case the MCU will be configured as a slave */
	if(ConfigPtr->MasterSlaveSelect == SPI_SLAVE)
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	80 81       	ld	r24, Z
     b90:	88 23       	and	r24, r24
     b92:	b1 f4       	brne	.+44     	; 0xbc0 <SPI_init+0x44>
	{
		/* select the slave mode and set the pins accordingly */
		SPI_GPIO &= ~(SS | MOSI | SCK);
     b94:	a7 e3       	ldi	r26, 0x37	; 55
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e3       	ldi	r30, 0x37	; 55
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 74       	andi	r24, 0x4F	; 79
     ba0:	8c 93       	st	X, r24
		SPI_GPIO |= MISO;
     ba2:	a7 e3       	ldi	r26, 0x37	; 55
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e3       	ldi	r30, 0x37	; 55
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, MSTR);
     bb0:	ad e2       	ldi	r26, 0x2D	; 45
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ed e2       	ldi	r30, 0x2D	; 45
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7e       	andi	r24, 0xEF	; 239
     bbc:	8c 93       	st	X, r24
     bbe:	1a c0       	rjmp	.+52     	; 0xbf4 <SPI_init+0x78>
	}
	/* In case the MCU will be configured as a master */
	else if(ConfigPtr->MasterSlaveSelect == SPI_MASTER)
     bc0:	e9 81       	ldd	r30, Y+1	; 0x01
     bc2:	fa 81       	ldd	r31, Y+2	; 0x02
     bc4:	80 81       	ld	r24, Z
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	a9 f4       	brne	.+42     	; 0xbf4 <SPI_init+0x78>
	{
		/* select the master mode and set the pins accordingly */
		SPI_GPIO |= SS | MOSI | SCK;
     bca:	a7 e3       	ldi	r26, 0x37	; 55
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e7 e3       	ldi	r30, 0x37	; 55
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 6b       	ori	r24, 0xB0	; 176
     bd6:	8c 93       	st	X, r24
		SPI_GPIO &= ~MISO;
     bd8:	a7 e3       	ldi	r26, 0x37	; 55
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e7 e3       	ldi	r30, 0x37	; 55
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 7b       	andi	r24, 0xBF	; 191
     be4:	8c 93       	st	X, r24
		SET_BIT(SPCR, MSTR);
     be6:	ad e2       	ldi	r26, 0x2D	; 45
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ed e2       	ldi	r30, 0x2D	; 45
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 61       	ori	r24, 0x10	; 16
     bf2:	8c 93       	st	X, r24
	}

	/* Selecting the interrupt mode (enabled of disabled) */
	SPCR = (SPCR & 0x7F) | ConfigPtr->Mode;
     bf4:	ad e2       	ldi	r26, 0x2D	; 45
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	ed e2       	ldi	r30, 0x2D	; 45
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	98 2f       	mov	r25, r24
     c00:	9f 77       	andi	r25, 0x7F	; 127
     c02:	e9 81       	ldd	r30, Y+1	; 0x01
     c04:	fa 81       	ldd	r31, Y+2	; 0x02
     c06:	81 81       	ldd	r24, Z+1	; 0x01
     c08:	89 2b       	or	r24, r25
     c0a:	8c 93       	st	X, r24
	/* Enable the SPI module */
	SET_BIT(SPCR, SPE);
     c0c:	ad e2       	ldi	r26, 0x2D	; 45
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ed e2       	ldi	r30, 0x2D	; 45
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	8c 93       	st	X, r24

	/* Selecting the clock rate */
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->ClockRateSelect) & 0x03);
     c1a:	ad e2       	ldi	r26, 0x2D	; 45
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ed e2       	ldi	r30, 0x2D	; 45
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	98 2f       	mov	r25, r24
     c26:	9c 7f       	andi	r25, 0xFC	; 252
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	83 70       	andi	r24, 0x03	; 3
     c30:	89 2b       	or	r24, r25
     c32:	8c 93       	st	X, r24
	SPSR = (SPSR & 0xFE) | ((ConfigPtr->ClockRateSelect) >> 2);
     c34:	ae e2       	ldi	r26, 0x2E	; 46
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ee e2       	ldi	r30, 0x2E	; 46
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	98 2f       	mov	r25, r24
     c40:	9e 7f       	andi	r25, 0xFE	; 254
     c42:	e9 81       	ldd	r30, Y+1	; 0x01
     c44:	fa 81       	ldd	r31, Y+2	; 0x02
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	86 95       	lsr	r24
     c4a:	86 95       	lsr	r24
     c4c:	89 2b       	or	r24, r25
     c4e:	8c 93       	st	X, r24
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <SPI_deInit>:

void SPI_deInit(void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	SPCR_R = 0x00;
     c62:	ed e2       	ldi	r30, 0x2D	; 45
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	10 82       	st	Z, r1
	SPSR_R = 0x00;
     c68:	ee e2       	ldi	r30, 0x2E	; 46
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	10 82       	st	Z, r1
}
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <SPI_setCallBack>:

/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	00 d0       	rcall	.+0      	; 0xc7a <SPI_setCallBack+0x6>
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	90 93 89 00 	sts	0x0089, r25
     c8a:	80 93 88 00 	sts	0x0088, r24
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <SPI_sendByte>:

/*
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
	/* send the data */
	SPDR = data;
     ca4:	ef e2       	ldi	r30, 0x2F	; 47
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	80 83       	st	Z, r24
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
     cac:	ed e2       	ldi	r30, 0x2D	; 45
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 23       	and	r24, r24
     cb4:	2c f0       	brlt	.+10     	; 0xcc0 <SPI_sendByte+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     cb6:	ee e2       	ldi	r30, 0x2E	; 46
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	dc f7       	brge	.-10     	; 0xcb6 <SPI_sendByte+0x1e>
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <SPI_receiveByte>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the SPIE bit in case the interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
     cd0:	ed e2       	ldi	r30, 0x2D	; 45
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	88 23       	and	r24, r24
     cd8:	2c f0       	brlt	.+10     	; 0xce4 <SPI_receiveByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     cda:	ee e2       	ldi	r30, 0x2E	; 46
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	88 23       	and	r24, r24
     ce2:	dc f7       	brge	.-10     	; 0xcda <SPI_receiveByte+0x12>
	}
	/* read the data */
	return SPDR;
     ce4:	ef e2       	ldi	r30, 0x2F	; 47
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
     d1a:	80 91 8c 00 	lds	r24, 0x008C
     d1e:	90 91 8d 00 	lds	r25, 0x008D
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	29 f0       	breq	.+10     	; 0xd30 <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
     d26:	e0 91 8c 00 	lds	r30, 0x008C
     d2a:	f0 91 8d 00 	lds	r31, 0x008D
     d2e:	09 95       	icall
	}
}
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_14>:

ISR(USART_UDRE_vect)
{
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
     d80:	80 91 8e 00 	lds	r24, 0x008E
     d84:	90 91 8f 00 	lds	r25, 0x008F
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	29 f0       	breq	.+10     	; 0xd96 <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
     d8c:	e0 91 8e 00 	lds	r30, 0x008E
     d90:	f0 91 8f 00 	lds	r31, 0x008F
     d94:	09 95       	icall
	}
}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_15>:

ISR(USART_TXC_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
     de6:	80 91 8a 00 	lds	r24, 0x008A
     dea:	90 91 8b 00 	lds	r25, 0x008B
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	29 f0       	breq	.+10     	; 0xdfc <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
     df2:	e0 91 8a 00 	lds	r30, 0x008A
     df6:	f0 91 8b 00 	lds	r31, 0x008B
     dfa:	09 95       	icall
	}
}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	ff 91       	pop	r31
     e02:	ef 91       	pop	r30
     e04:	bf 91       	pop	r27
     e06:	af 91       	pop	r26
     e08:	9f 91       	pop	r25
     e0a:	8f 91       	pop	r24
     e0c:	7f 91       	pop	r23
     e0e:	6f 91       	pop	r22
     e10:	5f 91       	pop	r21
     e12:	4f 91       	pop	r20
     e14:	3f 91       	pop	r19
     e16:	2f 91       	pop	r18
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	0f 90       	pop	r0
     e1e:	1f 90       	pop	r1
     e20:	18 95       	reti

00000e22 <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <UART_TXC_setCallBack+0x6>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	90 93 8b 00 	sts	0x008B, r25
     e38:	80 93 8a 00 	sts	0x008A, r24
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <UART_RXC_setCallBack+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	90 93 8d 00 	sts	0x008D, r25
     e5c:	80 93 8c 00 	sts	0x008C, r24
}
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <UART_UDRE_setCallBack+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	90 93 8f 00 	sts	0x008F, r25
     e80:	80 93 8e 00 	sts	0x008E, r24
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_init+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <UART_init+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
	/* Activating double speed mode */
	SET_BIT(UCSRA_R, U2X);
     e9e:	ab e2       	ldi	r26, 0x2B	; 43
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e2       	ldi	r30, 0x2B	; 43
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	8c 93       	st	X, r24

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3c 83       	std	Y+4, r19	; 0x04
     eb8:	2b 83       	std	Y+3, r18	; 0x03
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	91 05       	cpc	r25, r1
     ec2:	f1 f0       	breq	.+60     	; 0xf00 <UART_init+0x72>
     ec4:	2b 81       	ldd	r18, Y+3	; 0x03
     ec6:	3c 81       	ldd	r19, Y+4	; 0x04
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	69 f1       	breq	.+90     	; 0xf28 <UART_init+0x9a>
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	09 f0       	breq	.+2      	; 0xed8 <UART_init+0x4a>
     ed6:	49 c0       	rjmp	.+146    	; 0xf6a <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB_R, TXEN);
     ed8:	aa e2       	ldi	r26, 0x2A	; 42
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ea e2       	ldi	r30, 0x2A	; 42
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 60       	ori	r24, 0x08	; 8
     ee4:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     ee6:	e9 81       	ldd	r30, Y+1	; 0x01
     ee8:	fa 81       	ldd	r31, Y+2	; 0x02
     eea:	85 81       	ldd	r24, Z+5	; 0x05
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	e9 f5       	brne	.+122    	; 0xf6a <UART_init+0xdc>
			SET_BIT(UCSRB_R, TXCIE);
     ef0:	aa e2       	ldi	r26, 0x2A	; 42
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e2       	ldi	r30, 0x2A	; 42
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 64       	ori	r24, 0x40	; 64
     efc:	8c 93       	st	X, r24
     efe:	35 c0       	rjmp	.+106    	; 0xf6a <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB_R, RXEN);
     f00:	aa e2       	ldi	r26, 0x2A	; 42
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ea e2       	ldi	r30, 0x2A	; 42
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 61       	ori	r24, 0x10	; 16
     f0c:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     f0e:	e9 81       	ldd	r30, Y+1	; 0x01
     f10:	fa 81       	ldd	r31, Y+2	; 0x02
     f12:	85 81       	ldd	r24, Z+5	; 0x05
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	49 f5       	brne	.+82     	; 0xf6a <UART_init+0xdc>
			SET_BIT(UCSRB_R, RXCIE);
     f18:	aa e2       	ldi	r26, 0x2A	; 42
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ea e2       	ldi	r30, 0x2A	; 42
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 68       	ori	r24, 0x80	; 128
     f24:	8c 93       	st	X, r24
     f26:	21 c0       	rjmp	.+66     	; 0xf6a <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB_R, TXEN);
     f28:	aa e2       	ldi	r26, 0x2A	; 42
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ea e2       	ldi	r30, 0x2A	; 42
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 60       	ori	r24, 0x08	; 8
     f34:	8c 93       	st	X, r24
		SET_BIT(UCSRB_R, RXEN);
     f36:	aa e2       	ldi	r26, 0x2A	; 42
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ea e2       	ldi	r30, 0x2A	; 42
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 61       	ori	r24, 0x10	; 16
     f42:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     f44:	e9 81       	ldd	r30, Y+1	; 0x01
     f46:	fa 81       	ldd	r31, Y+2	; 0x02
     f48:	85 81       	ldd	r24, Z+5	; 0x05
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	71 f4       	brne	.+28     	; 0xf6a <UART_init+0xdc>
		{
			SET_BIT(UCSRB_R, TXCIE);
     f4e:	aa e2       	ldi	r26, 0x2A	; 42
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	8c 93       	st	X, r24
			SET_BIT(UCSRB_R, RXCIE);
     f5c:	aa e2       	ldi	r26, 0x2A	; 42
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ea e2       	ldi	r30, 0x2A	; 42
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	8c 93       	st	X, r24
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB_R = (UCSRB_R & 0xFB) | (ConfigPtr->charSize & 0x04);
     f6a:	aa e2       	ldi	r26, 0x2A	; 42
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ea e2       	ldi	r30, 0x2A	; 42
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	98 2f       	mov	r25, r24
     f76:	9b 7f       	andi	r25, 0xFB	; 251
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	84 70       	andi	r24, 0x04	; 4
     f80:	89 2b       	or	r24, r25
     f82:	8c 93       	st	X, r24

	UCSRC_R |= ConfigPtr->mode | ((ConfigPtr->charSize & 0x03) << UCSZ0) |
     f84:	a0 e4       	ldi	r26, 0x40	; 64
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e0 e4       	ldi	r30, 0x40	; 64
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	38 2f       	mov	r19, r24
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	80 81       	ld	r24, Z
     f96:	28 2f       	mov	r18, r24
     f98:	e9 81       	ldd	r30, Y+1	; 0x01
     f9a:	fa 81       	ldd	r31, Y+2	; 0x02
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	83 70       	andi	r24, 0x03	; 3
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	82 2b       	or	r24, r18
     fac:	98 2f       	mov	r25, r24
     fae:	90 68       	ori	r25, 0x80	; 128
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	83 81       	ldd	r24, Z+3	; 0x03
     fb6:	98 2b       	or	r25, r24
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	84 81       	ldd	r24, Z+4	; 0x04
     fbe:	89 2b       	or	r24, r25
     fc0:	83 2b       	or	r24, r19
     fc2:	8c 93       	st	X, r24
			(1 << URSEL) | ConfigPtr->parityMode | ConfigPtr->stopBits;

	/* Choosing the baud rate of the process */
	UBRRH_R = BAUDPRESCALE >> 8;
     fc4:	e0 e4       	ldi	r30, 0x40	; 64
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	10 82       	st	Z, r1
	UBRRL_R = BAUDPRESCALE;
     fca:	e9 e2       	ldi	r30, 0x29	; 41
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	8f ec       	ldi	r24, 0xCF	; 207
     fd0:	80 83       	st	Z, r24
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <UART_deInit>:

void UART_deInit(void)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	UCSRA_R = 0x20;
     fe8:	eb e2       	ldi	r30, 0x2B	; 43
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	80 83       	st	Z, r24
	UCSRB_R = 0x00;
     ff0:	ea e2       	ldi	r30, 0x2A	; 42
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	10 82       	st	Z, r1
	UCSRC_R = 0x06;
     ff6:	e0 e4       	ldi	r30, 0x40	; 64
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	80 83       	st	Z, r24
	UBRRL_R = 0x00;
     ffe:	e9 e2       	ldi	r30, 0x29	; 41
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	10 82       	st	Z, r1
}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <UART_transmit>:

void UART_transmit(const uint8_t data)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	89 83       	std	Y+1, r24	; 0x01
	/* busy-waiting the UDRE bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB_R, TXCIE))
    1016:	ea e2       	ldi	r30, 0x2A	; 42
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	80 74       	andi	r24, 0x40	; 64
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	49 f4       	brne	.+18     	; 0x103a <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA_R, UDRE));
    1028:	eb e2       	ldi	r30, 0x2B	; 43
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	80 72       	andi	r24, 0x20	; 32
    1034:	90 70       	andi	r25, 0x00	; 0
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	b9 f3       	breq	.-18     	; 0x1028 <UART_transmit+0x1e>
	/* sending the data */
	UDR = data;
    103a:	ec e2       	ldi	r30, 0x2C	; 44
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	80 83       	st	Z, r24
}
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <UART_receive>:

uint8_t UART_receive(void)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the RXC bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB_R, RXCIE))
    1052:	ea e2       	ldi	r30, 0x2A	; 42
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	2c f0       	brlt	.+10     	; 0x1066 <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA_R, RXC));
    105c:	eb e2       	ldi	r30, 0x2B	; 43
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	dc f7       	brge	.-10     	; 0x105c <UART_receive+0x12>
	/* read the received data */
	return UDR;
    1066:	ec e2       	ldi	r30, 0x2C	; 44
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <UART_Send_String>:

void UART_Send_String(char* str)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <UART_Send_String+0x6>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9b 83       	std	Y+3, r25	; 0x03
    1080:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t index = 0;
	uint8_t data = 0;
    1082:	19 82       	std	Y+1, r1	; 0x01

	if(str[index])
    1084:	80 91 90 00 	lds	r24, 0x0090
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	fc 01       	movw	r30, r24
    1092:	e2 0f       	add	r30, r18
    1094:	f3 1f       	adc	r31, r19
    1096:	80 81       	ld	r24, Z
    1098:	88 23       	and	r24, r24
    109a:	91 f0       	breq	.+36     	; 0x10c0 <UART_Send_String+0x4e>
	{
		data=str[index++];
    109c:	40 91 90 00 	lds	r20, 0x0090
    10a0:	24 2f       	mov	r18, r20
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	fc 01       	movw	r30, r24
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	80 81       	ld	r24, Z
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	84 2f       	mov	r24, r20
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	80 93 90 00 	sts	0x0090, r24
		UART_transmit(data);
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	0e 94 05 08 	call	0x100a	; 0x100a <UART_transmit>
	}
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <UART_receiveString>:


void UART_receiveString(sint8_t* Str)
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <UART_receiveString+0xa>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t i = 0;

	if(Str[i] != '#')
    10de:	80 91 91 00 	lds	r24, 0x0091
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	80 81       	ld	r24, Z
    10f2:	83 32       	cpi	r24, 0x23	; 35
    10f4:	91 f0       	breq	.+36     	; 0x111a <UART_receiveString+0x4e>
	{
		Str[i] = UART_receive();
    10f6:	80 91 91 00 	lds	r24, 0x0091
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	8c 01       	movw	r16, r24
    1104:	02 0f       	add	r16, r18
    1106:	13 1f       	adc	r17, r19
    1108:	0e 94 25 08 	call	0x104a	; 0x104a <UART_receive>
    110c:	f8 01       	movw	r30, r16
    110e:	80 83       	st	Z, r24
		i++;
    1110:	80 91 91 00 	lds	r24, 0x0091
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	80 93 91 00 	sts	0x0091, r24
	}

	Str[i] = '\0';
    111a:	80 91 91 00 	lds	r24, 0x0091
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	fc 01       	movw	r30, r24
    1128:	e2 0f       	add	r30, r18
    112a:	f3 1f       	adc	r31, r19
    112c:	10 82       	st	Z, r1
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <Uart_SendingApp>:
uint8_t uart_flag = 1;

uint8_t bcm_flag = BCM_NOT_DONE;

void Uart_SendingApp(void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	uart_flag = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 62 00 	sts	0x0062, r24
}
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <Bcm_CallBack>:

void Bcm_CallBack(void)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
	bcm_flag = BCM_DONE;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 93 00 	sts	0x0093, r24
}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <main>:

int main(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	2e 97       	sbiw	r28, 0x0e	; 14
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
	uint8_t UART_status = BCM_NOT_DONE;
    1178:	19 82       	std	Y+1, r1	; 0x01
			UART_SENDER_MODE,
			UART_INTERRUPT_ENABLED,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT
	};
    117a:	ce 01       	movw	r24, r28
    117c:	02 96       	adiw	r24, 0x02	; 2
    117e:	9b 87       	std	Y+11, r25	; 0x0b
    1180:	8a 87       	std	Y+10, r24	; 0x0a
    1182:	ec e6       	ldi	r30, 0x6C	; 108
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	fd 87       	std	Y+13, r31	; 0x0d
    1188:	ec 87       	std	Y+12, r30	; 0x0c
    118a:	f6 e0       	ldi	r31, 0x06	; 6
    118c:	fe 87       	std	Y+14, r31	; 0x0e
    118e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1190:	fd 85       	ldd	r31, Y+13	; 0x0d
    1192:	00 80       	ld	r0, Z
    1194:	8c 85       	ldd	r24, Y+12	; 0x0c
    1196:	9d 85       	ldd	r25, Y+13	; 0x0d
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	9d 87       	std	Y+13, r25	; 0x0d
    119c:	8c 87       	std	Y+12, r24	; 0x0c
    119e:	ea 85       	ldd	r30, Y+10	; 0x0a
    11a0:	fb 85       	ldd	r31, Y+11	; 0x0b
    11a2:	00 82       	st	Z, r0
    11a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	9b 87       	std	Y+11, r25	; 0x0b
    11ac:	8a 87       	std	Y+10, r24	; 0x0a
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	91 50       	subi	r25, 0x01	; 1
    11b2:	9e 87       	std	Y+14, r25	; 0x0e
    11b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    11b6:	ee 23       	and	r30, r30
    11b8:	51 f7       	brne	.-44     	; 0x118e <main+0x2a>

	strBcmConfig_t BCM_cfg = {
			BCM_SPI_ID,
			BCM_RECEIVE
	};
    11ba:	81 ea       	ldi	r24, 0xA1	; 161
    11bc:	88 87       	std	Y+8, r24	; 0x08
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	89 87       	std	Y+9, r24	; 0x09

	BCM_SetCallBack(&Bcm_CallBack);
    11c2:	88 ea       	ldi	r24, 0xA8	; 168
    11c4:	98 e0       	ldi	r25, 0x08	; 8
    11c6:	0e 94 c6 03 	call	0x78c	; 0x78c <BCM_SetCallBack>

	BCM_Init(&BCM_cfg);
    11ca:	ce 01       	movw	r24, r28
    11cc:	08 96       	adiw	r24, 0x08	; 8
    11ce:	0e 94 6e 00 	call	0xdc	; 0xdc <BCM_Init>

	UART_TXC_setCallBack(&Uart_SendingApp);
    11d2:	8e e9       	ldi	r24, 0x9E	; 158
    11d4:	98 e0       	ldi	r25, 0x08	; 8
    11d6:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_TXC_setCallBack>

	UART_init(&UART_cfg);
    11da:	ce 01       	movw	r24, r28
    11dc:	02 96       	adiw	r24, 0x02	; 2
    11de:	0e 94 47 07 	call	0xe8e	; 0xe8e <UART_init>

	sei();
    11e2:	78 94       	sei

	BCM_SetupRxBuffer(BCM_SPI_ID, (uint8_t*)SendingString, ELEMENTS(20));
    11e4:	24 e9       	ldi	r18, 0x94	; 148
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 ea       	ldi	r24, 0xA1	; 161
    11ea:	b9 01       	movw	r22, r18
    11ec:	48 e1       	ldi	r20, 0x18	; 24
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <BCM_SetupRxBuffer>

	while(1)
	{
		if(UART_status == BCM_DONE && uart_flag == 1)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	51 f4       	brne	.+20     	; 0x120e <main+0xaa>
    11fa:	80 91 62 00 	lds	r24, 0x0062
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	31 f4       	brne	.+12     	; 0x120e <main+0xaa>
		{
			UART_Send_String((char*)SendingString);
    1202:	84 e9       	ldi	r24, 0x94	; 148
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 39 08 	call	0x1072	; 0x1072 <UART_Send_String>
			uart_flag = 0;
    120a:	10 92 62 00 	sts	0x0062, r1
		}

		if(UART_status == BCM_NOT_DONE)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	88 23       	and	r24, r24
    1212:	81 f7       	brne	.-32     	; 0x11f4 <main+0x90>
		{
			BCM_RxDispatch();
    1214:	0e 94 3e 01 	call	0x27c	; 0x27c <BCM_RxDispatch>
    1218:	ed cf       	rjmp	.-38     	; 0x11f4 <main+0x90>

0000121a <_exit>:
    121a:	f8 94       	cli

0000121c <__stop_program>:
    121c:	ff cf       	rjmp	.-2      	; 0x121c <__stop_program>
