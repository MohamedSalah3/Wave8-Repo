
BCM_Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000122c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000122c  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800076  00800076  000012d6  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018e7  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_12>
      34:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_13>
      38:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__vector_14>
      3c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 08 	call	0x1140	; 0x1140 <main>
      8a:	0c 94 14 09 	jmp	0x1228	; 0x1228 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <RxApp>:


/*- CALL BACK FUNCTIONS ------------------------------------*/

void RxApp(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	gu8_BCM_Receiving_SM = BCM_RECEIVING_BYTE;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 77 00 	sts	0x0077, r24
	BCM_Receive(&RxCfg);
      a0:	85 e8       	ldi	r24, 0x85	; 133
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	0e 94 2e 03 	call	0x65c	; 0x65c <BCM_Receive>
	gu8_BCM_Receiving_SM = BCM_RECEIVING_COMPLETE;
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	80 93 77 00 	sts	0x0077, r24
	gu8_RxDispatchCounter++;
      ae:	80 91 61 00 	lds	r24, 0x0061
      b2:	8f 5f       	subi	r24, 0xFF	; 255
      b4:	80 93 61 00 	sts	0x0061, r24
}
      b8:	cf 91       	pop	r28
      ba:	df 91       	pop	r29
      bc:	08 95       	ret

000000be <TxApp>:

void TxApp(void)
{
      be:	df 93       	push	r29
      c0:	cf 93       	push	r28
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	gu8_BCM_SENDING_SM = BCM_SENDING_COMPLETE;
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	80 93 76 00 	sts	0x0076, r24
	gu8_TxDispatchCounter++;
      cc:	80 91 60 00 	lds	r24, 0x0060
      d0:	8f 5f       	subi	r24, 0xFF	; 255
      d2:	80 93 60 00 	sts	0x0060, r24
}
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <BCM_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

EnmBCMError_t BCM_Init(const strBcmConfig_t* ConfigPtr)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	6a 97       	sbiw	r28, 0x1a	; 26
      e6:	0f b6       	in	r0, 0x3f	; 63
      e8:	f8 94       	cli
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	0f be       	out	0x3f, r0	; 63
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	9c 87       	std	Y+12, r25	; 0x0c
      f2:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t au8_Ret = E_OK;
      f4:	19 82       	std	Y+1, r1	; 0x01
			UNDETERMINED,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT,
			UART_INTERRUPT_ENABLED
	};
      f6:	9e 01       	movw	r18, r28
      f8:	2e 5f       	subi	r18, 0xFE	; 254
      fa:	3f 4f       	sbci	r19, 0xFF	; 255
      fc:	3a 8b       	std	Y+18, r19	; 0x12
      fe:	29 8b       	std	Y+17, r18	; 0x11
     100:	85 e6       	ldi	r24, 0x65	; 101
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	9c 8b       	std	Y+20, r25	; 0x14
     106:	8b 8b       	std	Y+19, r24	; 0x13
     108:	96 e0       	ldi	r25, 0x06	; 6
     10a:	9d 8b       	std	Y+21, r25	; 0x15
     10c:	eb 89       	ldd	r30, Y+19	; 0x13
     10e:	fc 89       	ldd	r31, Y+20	; 0x14
     110:	00 80       	ld	r0, Z
     112:	2b 89       	ldd	r18, Y+19	; 0x13
     114:	3c 89       	ldd	r19, Y+20	; 0x14
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	3c 8b       	std	Y+20, r19	; 0x14
     11c:	2b 8b       	std	Y+19, r18	; 0x13
     11e:	e9 89       	ldd	r30, Y+17	; 0x11
     120:	fa 89       	ldd	r31, Y+18	; 0x12
     122:	00 82       	st	Z, r0
     124:	29 89       	ldd	r18, Y+17	; 0x11
     126:	3a 89       	ldd	r19, Y+18	; 0x12
     128:	2f 5f       	subi	r18, 0xFF	; 255
     12a:	3f 4f       	sbci	r19, 0xFF	; 255
     12c:	3a 8b       	std	Y+18, r19	; 0x12
     12e:	29 8b       	std	Y+17, r18	; 0x11
     130:	3d 89       	ldd	r19, Y+21	; 0x15
     132:	31 50       	subi	r19, 0x01	; 1
     134:	3d 8b       	std	Y+21, r19	; 0x15
     136:	8d 89       	ldd	r24, Y+21	; 0x15
     138:	88 23       	and	r24, r24
     13a:	41 f7       	brne	.-48     	; 0x10c <BCM_Init+0x30>

	SPI_ConfigType SPI_cfg = {
			UNDETERMINED,
			SPI_INTERRUPT_ENABLED,
			SPI_F_OSC_4
	};
     13c:	fe 01       	movw	r30, r28
     13e:	38 96       	adiw	r30, 0x08	; 8
     140:	ff 8b       	std	Y+23, r31	; 0x17
     142:	ee 8b       	std	Y+22, r30	; 0x16
     144:	22 e6       	ldi	r18, 0x62	; 98
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	39 8f       	std	Y+25, r19	; 0x19
     14a:	28 8f       	std	Y+24, r18	; 0x18
     14c:	33 e0       	ldi	r19, 0x03	; 3
     14e:	3a 8f       	std	Y+26, r19	; 0x1a
     150:	e8 8d       	ldd	r30, Y+24	; 0x18
     152:	f9 8d       	ldd	r31, Y+25	; 0x19
     154:	00 80       	ld	r0, Z
     156:	28 8d       	ldd	r18, Y+24	; 0x18
     158:	39 8d       	ldd	r19, Y+25	; 0x19
     15a:	2f 5f       	subi	r18, 0xFF	; 255
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	39 8f       	std	Y+25, r19	; 0x19
     160:	28 8f       	std	Y+24, r18	; 0x18
     162:	ee 89       	ldd	r30, Y+22	; 0x16
     164:	ff 89       	ldd	r31, Y+23	; 0x17
     166:	00 82       	st	Z, r0
     168:	2e 89       	ldd	r18, Y+22	; 0x16
     16a:	3f 89       	ldd	r19, Y+23	; 0x17
     16c:	2f 5f       	subi	r18, 0xFF	; 255
     16e:	3f 4f       	sbci	r19, 0xFF	; 255
     170:	3f 8b       	std	Y+23, r19	; 0x17
     172:	2e 8b       	std	Y+22, r18	; 0x16
     174:	3a 8d       	ldd	r19, Y+26	; 0x1a
     176:	31 50       	subi	r19, 0x01	; 1
     178:	3a 8f       	std	Y+26, r19	; 0x1a
     17a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     17c:	88 23       	and	r24, r24
     17e:	41 f7       	brne	.-48     	; 0x150 <BCM_Init+0x74>

	switch(ConfigPtr->BCM_DataDirection)
     180:	eb 85       	ldd	r30, Y+11	; 0x0b
     182:	fc 85       	ldd	r31, Y+12	; 0x0c
     184:	81 81       	ldd	r24, Z+1	; 0x01
     186:	e8 2f       	mov	r30, r24
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	f8 8b       	std	Y+16, r31	; 0x10
     18c:	ef 87       	std	Y+15, r30	; 0x0f
     18e:	2f 85       	ldd	r18, Y+15	; 0x0f
     190:	38 89       	ldd	r19, Y+16	; 0x10
     192:	21 30       	cpi	r18, 0x01	; 1
     194:	31 05       	cpc	r19, r1
     196:	69 f0       	breq	.+26     	; 0x1b2 <BCM_Init+0xd6>
     198:	8f 85       	ldd	r24, Y+15	; 0x0f
     19a:	98 89       	ldd	r25, Y+16	; 0x10
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	91 05       	cpc	r25, r1
     1a0:	61 f0       	breq	.+24     	; 0x1ba <BCM_Init+0xde>
     1a2:	ef 85       	ldd	r30, Y+15	; 0x0f
     1a4:	f8 89       	ldd	r31, Y+16	; 0x10
     1a6:	30 97       	sbiw	r30, 0x00	; 0
     1a8:	59 f4       	brne	.+22     	; 0x1c0 <BCM_Init+0xe4>
	{
	case BCM_TRANSMIT:
		UART_cfg.communicationMode = UART_SENDER_MODE;
     1aa:	1b 82       	std	Y+3, r1	; 0x03
		SPI_cfg.MasterSlaveSelect = SPI_MASTER;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	88 87       	std	Y+8, r24	; 0x08
     1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <BCM_Init+0xe8>
		break;
	case BCM_RECEIVE:
		UART_cfg.communicationMode = UART_RECEIVER_MODE;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	8b 83       	std	Y+3, r24	; 0x03
		SPI_cfg.MasterSlaveSelect = SPI_SLAVE;
     1b6:	18 86       	std	Y+8, r1	; 0x08
     1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <BCM_Init+0xe8>
		break;
	case BCM_TRANSMIT_RECEIVE:
		UART_cfg.communicationMode = UART_SENDER_RECEIVER_MODE;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	8b 83       	std	Y+3, r24	; 0x03
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <BCM_Init+0xe8>
		break;
	default:
		au8_Ret = E_NOK;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	switch(ConfigPtr->BCM_ProtocolID)
     1c4:	eb 85       	ldd	r30, Y+11	; 0x0b
     1c6:	fc 85       	ldd	r31, Y+12	; 0x0c
     1c8:	80 81       	ld	r24, Z
     1ca:	28 2f       	mov	r18, r24
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	3e 87       	std	Y+14, r19	; 0x0e
     1d0:	2d 87       	std	Y+13, r18	; 0x0d
     1d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d4:	9e 85       	ldd	r25, Y+14	; 0x0e
     1d6:	80 3a       	cpi	r24, 0xA0	; 160
     1d8:	91 05       	cpc	r25, r1
     1da:	31 f0       	breq	.+12     	; 0x1e8 <BCM_Init+0x10c>
     1dc:	ed 85       	ldd	r30, Y+13	; 0x0d
     1de:	fe 85       	ldd	r31, Y+14	; 0x0e
     1e0:	e1 3a       	cpi	r30, 0xA1	; 161
     1e2:	f1 05       	cpc	r31, r1
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <BCM_Init+0x116>
     1e6:	0a c0       	rjmp	.+20     	; 0x1fc <BCM_Init+0x120>
	{
	case BCM_UART_ID:
		UART_init(&UART_cfg);
     1e8:	ce 01       	movw	r24, r28
     1ea:	02 96       	adiw	r24, 0x02	; 2
     1ec:	0e 94 2a 07 	call	0xe54	; 0xe54 <UART_init>
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <BCM_Init+0x124>
		break;
	case BCM_SPI_ID:
		SPI_init(&SPI_cfg);
     1f2:	ce 01       	movw	r24, r28
     1f4:	08 96       	adiw	r24, 0x08	; 8
     1f6:	0e 94 a1 05 	call	0xb42	; 0xb42 <SPI_init>
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <BCM_Init+0x124>
		break;
	default:
		au8_Ret = E_NOK;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     200:	89 81       	ldd	r24, Y+1	; 0x01
}
     202:	6a 96       	adiw	r28, 0x1a	; 26
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	f8 94       	cli
     208:	de bf       	out	0x3e, r29	; 62
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	cd bf       	out	0x3d, r28	; 61
     20e:	cf 91       	pop	r28
     210:	df 91       	pop	r29
     212:	08 95       	ret

00000214 <BCM_DeInit>:

EnmBCMError_t BCM_DeInit(uint8_t BCM_ProtocolID)
{
     214:	df 93       	push	r29
     216:	cf 93       	push	r28
     218:	00 d0       	rcall	.+0      	; 0x21a <BCM_DeInit+0x6>
     21a:	00 d0       	rcall	.+0      	; 0x21c <BCM_DeInit+0x8>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
     222:	19 82       	std	Y+1, r1	; 0x01

	switch(BCM_ProtocolID)
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	3c 83       	std	Y+4, r19	; 0x04
     22c:	2b 83       	std	Y+3, r18	; 0x03
     22e:	8b 81       	ldd	r24, Y+3	; 0x03
     230:	9c 81       	ldd	r25, Y+4	; 0x04
     232:	80 3a       	cpi	r24, 0xA0	; 160
     234:	91 05       	cpc	r25, r1
     236:	31 f0       	breq	.+12     	; 0x244 <BCM_DeInit+0x30>
     238:	2b 81       	ldd	r18, Y+3	; 0x03
     23a:	3c 81       	ldd	r19, Y+4	; 0x04
     23c:	21 3a       	cpi	r18, 0xA1	; 161
     23e:	31 05       	cpc	r19, r1
     240:	61 f0       	breq	.+24     	; 0x25a <BCM_DeInit+0x46>
     242:	12 c0       	rjmp	.+36     	; 0x268 <BCM_DeInit+0x54>
	{
	case BCM_UART_ID:
		UART_deInit();
     244:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <UART_deInit>
		UART_RXC_setCallBack(NULL);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_RXC_setCallBack>
		UART_TXC_setCallBack(NULL);
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 f4 06 	call	0xde8	; 0xde8 <UART_TXC_setCallBack>
     258:	09 c0       	rjmp	.+18     	; 0x26c <BCM_DeInit+0x58>
		break;
	case BCM_SPI_ID:
		SPI_deInit();
     25a:	0e 94 10 06 	call	0xc20	; 0xc20 <SPI_deInit>
		SPI_setCallBack(NULL);
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_setCallBack>
     266:	02 c0       	rjmp	.+4      	; 0x26c <BCM_DeInit+0x58>
		break;
	default:
		au8_Ret = E_NOK;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     26c:	89 81       	ldd	r24, Y+1	; 0x01
}
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <BCM_RxDispatch>:

EnmBCMError_t BCM_RxDispatch(void)
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_Ret = E_OK;
     286:	19 82       	std	Y+1, r1	; 0x01

	if(gu8_BCM_Receiving_SM == BCM_RECEIVING_COMPLETE && gu8_RxDispatchCounter < (RxCfg.BCM_ArraySize - 1) && gu8_RxDispatchCounter >= 3)
     288:	80 91 77 00 	lds	r24, 0x0077
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	21 f5       	brne	.+72     	; 0x2d8 <BCM_RxDispatch+0x5c>
     290:	80 91 61 00 	lds	r24, 0x0061
     294:	28 2f       	mov	r18, r24
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	80 91 88 00 	lds	r24, 0x0088
     29c:	90 91 89 00 	lds	r25, 0x0089
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	28 17       	cp	r18, r24
     2a4:	39 07       	cpc	r19, r25
     2a6:	c0 f4       	brcc	.+48     	; 0x2d8 <BCM_RxDispatch+0x5c>
     2a8:	80 91 61 00 	lds	r24, 0x0061
     2ac:	83 30       	cpi	r24, 0x03	; 3
     2ae:	a0 f0       	brcs	.+40     	; 0x2d8 <BCM_RxDispatch+0x5c>
	{
		gu8_RxCheckSum += RxCfg.BCM_ArrayStartAddress[gu8_RxDispatchCounter];
     2b0:	20 91 86 00 	lds	r18, 0x0086
     2b4:	30 91 87 00 	lds	r19, 0x0087
     2b8:	80 91 61 00 	lds	r24, 0x0061
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	f9 01       	movw	r30, r18
     2c2:	e8 0f       	add	r30, r24
     2c4:	f9 1f       	adc	r31, r25
     2c6:	90 81       	ld	r25, Z
     2c8:	80 91 7a 00 	lds	r24, 0x007A
     2cc:	89 0f       	add	r24, r25
     2ce:	80 93 7a 00 	sts	0x007A, r24

		gu8_BCM_Receiving_SM = BCM_RECEIVING_BYTE;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 77 00 	sts	0x0077, r24
	}

	if(gu8_RxDispatchCounter == RxCfg.BCM_ArraySize - 1)
     2d8:	80 91 61 00 	lds	r24, 0x0061
     2dc:	28 2f       	mov	r18, r24
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	80 91 88 00 	lds	r24, 0x0088
     2e4:	90 91 89 00 	lds	r25, 0x0089
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	28 17       	cp	r18, r24
     2ec:	39 07       	cpc	r19, r25
     2ee:	d9 f4       	brne	.+54     	; 0x326 <BCM_RxDispatch+0xaa>
	{
		if(gu8_RxCheckSum != RxCfg.BCM_ArrayStartAddress[gu8_RxDispatchCounter])
     2f0:	20 91 86 00 	lds	r18, 0x0086
     2f4:	30 91 87 00 	lds	r19, 0x0087
     2f8:	80 91 61 00 	lds	r24, 0x0061
     2fc:	88 2f       	mov	r24, r24
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	e8 0f       	add	r30, r24
     304:	f9 1f       	adc	r31, r25
     306:	90 81       	ld	r25, Z
     308:	80 91 7a 00 	lds	r24, 0x007A
     30c:	98 17       	cp	r25, r24
     30e:	11 f0       	breq	.+4      	; 0x314 <BCM_RxDispatch+0x98>
			au8_Ret = E_NOK;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	89 83       	std	Y+1, r24	; 0x01
		gu8_BCM_Receiving_SM = BCM_RECEIVER_IDLE;
     314:	10 92 77 00 	sts	0x0077, r1
		gu8_RxCounter = 0;
     318:	10 92 7c 00 	sts	0x007C, r1
		gu8_RxDispatchCounter = 255;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	80 93 61 00 	sts	0x0061, r24
		gu8_RxCheckSum = 0;
     322:	10 92 7a 00 	sts	0x007A, r1
	}

	return au8_Ret;
     326:	89 81       	ldd	r24, Y+1	; 0x01
}
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <BCM_TxDispatch>:

EnmBCMError_t BCM_TxDispatch(void)
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
	if(gu8_BCM_SENDING_SM == BCM_SENDING_COMPLETE)
     338:	80 91 76 00 	lds	r24, 0x0076
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	21 f5       	brne	.+72     	; 0x388 <BCM_TxDispatch+0x58>
	{
		if(gu8_TxDispatchCounter < TxCfg.BCM_ArraySize - 4)
     340:	80 91 60 00 	lds	r24, 0x0060
     344:	28 2f       	mov	r18, r24
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	80 91 83 00 	lds	r24, 0x0083
     34c:	90 91 84 00 	lds	r25, 0x0084
     350:	04 97       	sbiw	r24, 0x04	; 4
     352:	28 17       	cp	r18, r24
     354:	39 07       	cpc	r19, r25
     356:	88 f4       	brcc	.+34     	; 0x37a <BCM_TxDispatch+0x4a>
		{
			gu8_TxCheckSum += TxCfg.BCM_ArrayStartAddress[gu8_TxDispatchCounter];
     358:	20 91 81 00 	lds	r18, 0x0081
     35c:	30 91 82 00 	lds	r19, 0x0082
     360:	80 91 60 00 	lds	r24, 0x0060
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	f9 01       	movw	r30, r18
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	90 81       	ld	r25, Z
     370:	80 91 79 00 	lds	r24, 0x0079
     374:	89 0f       	add	r24, r25
     376:	80 93 79 00 	sts	0x0079, r24
		}

		gu8_BCM_SENDING_SM = BCM_SENDING_BYTE;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 76 00 	sts	0x0076, r24

		BCM_Send(&TxCfg);
     380:	80 e8       	ldi	r24, 0x80	; 128
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 dd 01 	call	0x3ba	; 0x3ba <BCM_Send>
	}

	if(gu8_TxDispatchCounter == TxCfg.BCM_ArraySize - 1)
     388:	80 91 60 00 	lds	r24, 0x0060
     38c:	28 2f       	mov	r18, r24
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	80 91 83 00 	lds	r24, 0x0083
     394:	90 91 84 00 	lds	r25, 0x0084
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	28 17       	cp	r18, r24
     39c:	39 07       	cpc	r19, r25
     39e:	49 f4       	brne	.+18     	; 0x3b2 <BCM_TxDispatch+0x82>
	{
		gu8_BCM_SENDING_SM = BCM_SENDER_IDLE;
     3a0:	10 92 76 00 	sts	0x0076, r1
		gu8_TxCounter = 0;
     3a4:	10 92 7b 00 	sts	0x007B, r1
		gu8_TxDispatchCounter = 255;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	80 93 60 00 	sts	0x0060, r24
		gu8_TxCheckSum = 0;
     3ae:	10 92 79 00 	sts	0x0079, r1
	}

	return E_OK;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
}
     3b4:	cf 91       	pop	r28
     3b6:	df 91       	pop	r29
     3b8:	08 95       	ret

000003ba <BCM_Send>:

EnmBCMError_t BCM_Send(strBcmSendConfig_t* ConfigPtr)
{
     3ba:	df 93       	push	r29
     3bc:	cf 93       	push	r28
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	2a 97       	sbiw	r28, 0x0a	; 10
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	9b 83       	std	Y+3, r25	; 0x03
     3d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
     3d2:	19 82       	std	Y+1, r1	; 0x01
	static PointerToSenderFunction apf_SenderFunction = NULL;

	if(gu8_TxCounter == 0)
     3d4:	80 91 7b 00 	lds	r24, 0x007B
     3d8:	88 23       	and	r24, r24
     3da:	09 f0       	breq	.+2      	; 0x3de <BCM_Send+0x24>
     3dc:	5e c0       	rjmp	.+188    	; 0x49a <BCM_Send+0xe0>
	{
		switch(ConfigPtr->BCM_ProtocolID)
     3de:	ea 81       	ldd	r30, Y+2	; 0x02
     3e0:	fb 81       	ldd	r31, Y+3	; 0x03
     3e2:	80 81       	ld	r24, Z
     3e4:	28 2f       	mov	r18, r24
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	3d 83       	std	Y+5, r19	; 0x05
     3ea:	2c 83       	std	Y+4, r18	; 0x04
     3ec:	8c 81       	ldd	r24, Y+4	; 0x04
     3ee:	9d 81       	ldd	r25, Y+5	; 0x05
     3f0:	80 3a       	cpi	r24, 0xA0	; 160
     3f2:	91 05       	cpc	r25, r1
     3f4:	31 f0       	breq	.+12     	; 0x402 <BCM_Send+0x48>
     3f6:	ec 81       	ldd	r30, Y+4	; 0x04
     3f8:	fd 81       	ldd	r31, Y+5	; 0x05
     3fa:	e1 3a       	cpi	r30, 0xA1	; 161
     3fc:	f1 05       	cpc	r31, r1
     3fe:	61 f0       	breq	.+24     	; 0x418 <BCM_Send+0x5e>
     400:	16 c0       	rjmp	.+44     	; 0x42e <BCM_Send+0x74>
		{
		case BCM_UART_ID:
			UART_TXC_setCallBack(&TxApp);
     402:	8f e5       	ldi	r24, 0x5F	; 95
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 f4 06 	call	0xde8	; 0xde8 <UART_TXC_setCallBack>
			apf_SenderFunction = UART_transmit;
     40a:	88 ee       	ldi	r24, 0xE8	; 232
     40c:	97 e0       	ldi	r25, 0x07	; 7
     40e:	90 93 7e 00 	sts	0x007E, r25
     412:	80 93 7d 00 	sts	0x007D, r24
     416:	0d c0       	rjmp	.+26     	; 0x432 <BCM_Send+0x78>
			break;
		case BCM_SPI_ID:
			SPI_setCallBack(&TxApp);
     418:	8f e5       	ldi	r24, 0x5F	; 95
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_setCallBack>
			apf_SenderFunction = SPI_sendByte;
     420:	8f e2       	ldi	r24, 0x2F	; 47
     422:	96 e0       	ldi	r25, 0x06	; 6
     424:	90 93 7e 00 	sts	0x007E, r25
     428:	80 93 7d 00 	sts	0x007D, r24
     42c:	02 c0       	rjmp	.+4      	; 0x432 <BCM_Send+0x78>
			break;
		default:
			au8_Ret = E_NOK;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 4] = BCM_ID;
     432:	ea 81       	ldd	r30, Y+2	; 0x02
     434:	fb 81       	ldd	r31, Y+3	; 0x03
     436:	21 81       	ldd	r18, Z+1	; 0x01
     438:	32 81       	ldd	r19, Z+2	; 0x02
     43a:	ea 81       	ldd	r30, Y+2	; 0x02
     43c:	fb 81       	ldd	r31, Y+3	; 0x03
     43e:	83 81       	ldd	r24, Z+3	; 0x03
     440:	94 81       	ldd	r25, Z+4	; 0x04
     442:	04 97       	sbiw	r24, 0x04	; 4
     444:	f9 01       	movw	r30, r18
     446:	e8 0f       	add	r30, r24
     448:	f9 1f       	adc	r31, r25
     44a:	8a e5       	ldi	r24, 0x5A	; 90
     44c:	80 83       	st	Z, r24
		ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 3] = (uint8_t)((ConfigPtr->BCM_ArraySize-4) >> 8);
     44e:	ea 81       	ldd	r30, Y+2	; 0x02
     450:	fb 81       	ldd	r31, Y+3	; 0x03
     452:	21 81       	ldd	r18, Z+1	; 0x01
     454:	32 81       	ldd	r19, Z+2	; 0x02
     456:	ea 81       	ldd	r30, Y+2	; 0x02
     458:	fb 81       	ldd	r31, Y+3	; 0x03
     45a:	83 81       	ldd	r24, Z+3	; 0x03
     45c:	94 81       	ldd	r25, Z+4	; 0x04
     45e:	03 97       	sbiw	r24, 0x03	; 3
     460:	d9 01       	movw	r26, r18
     462:	a8 0f       	add	r26, r24
     464:	b9 1f       	adc	r27, r25
     466:	ea 81       	ldd	r30, Y+2	; 0x02
     468:	fb 81       	ldd	r31, Y+3	; 0x03
     46a:	83 81       	ldd	r24, Z+3	; 0x03
     46c:	94 81       	ldd	r25, Z+4	; 0x04
     46e:	04 97       	sbiw	r24, 0x04	; 4
     470:	89 2f       	mov	r24, r25
     472:	99 27       	eor	r25, r25
     474:	8c 93       	st	X, r24
		ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 2] =
     476:	ea 81       	ldd	r30, Y+2	; 0x02
     478:	fb 81       	ldd	r31, Y+3	; 0x03
     47a:	21 81       	ldd	r18, Z+1	; 0x01
     47c:	32 81       	ldd	r19, Z+2	; 0x02
     47e:	ea 81       	ldd	r30, Y+2	; 0x02
     480:	fb 81       	ldd	r31, Y+3	; 0x03
     482:	83 81       	ldd	r24, Z+3	; 0x03
     484:	94 81       	ldd	r25, Z+4	; 0x04
     486:	02 97       	sbiw	r24, 0x02	; 2
     488:	d9 01       	movw	r26, r18
     48a:	a8 0f       	add	r26, r24
     48c:	b9 1f       	adc	r27, r25
     48e:	ea 81       	ldd	r30, Y+2	; 0x02
     490:	fb 81       	ldd	r31, Y+3	; 0x03
     492:	83 81       	ldd	r24, Z+3	; 0x03
     494:	94 81       	ldd	r25, Z+4	; 0x04
     496:	84 50       	subi	r24, 0x04	; 4
     498:	8c 93       	st	X, r24
				(uint8_t)((ConfigPtr->BCM_ArraySize-4) & 0x00FF);
	}

	ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 1] = gu8_TxCheckSum;
     49a:	ea 81       	ldd	r30, Y+2	; 0x02
     49c:	fb 81       	ldd	r31, Y+3	; 0x03
     49e:	21 81       	ldd	r18, Z+1	; 0x01
     4a0:	32 81       	ldd	r19, Z+2	; 0x02
     4a2:	ea 81       	ldd	r30, Y+2	; 0x02
     4a4:	fb 81       	ldd	r31, Y+3	; 0x03
     4a6:	83 81       	ldd	r24, Z+3	; 0x03
     4a8:	94 81       	ldd	r25, Z+4	; 0x04
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f9 01       	movw	r30, r18
     4ae:	e8 0f       	add	r30, r24
     4b0:	f9 1f       	adc	r31, r25
     4b2:	80 91 79 00 	lds	r24, 0x0079
     4b6:	80 83       	st	Z, r24

	if(gu8_TxCounter < ConfigPtr->BCM_ArraySize)
     4b8:	80 91 7b 00 	lds	r24, 0x007B
     4bc:	28 2f       	mov	r18, r24
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	ea 81       	ldd	r30, Y+2	; 0x02
     4c2:	fb 81       	ldd	r31, Y+3	; 0x03
     4c4:	83 81       	ldd	r24, Z+3	; 0x03
     4c6:	94 81       	ldd	r25, Z+4	; 0x04
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <BCM_Send+0x116>
     4ce:	55 c0       	rjmp	.+170    	; 0x57a <BCM_Send+0x1c0>
	{
		if(gu8_TxCounter <= 2)
     4d0:	80 91 7b 00 	lds	r24, 0x007B
     4d4:	83 30       	cpi	r24, 0x03	; 3
     4d6:	d0 f4       	brcc	.+52     	; 0x50c <BCM_Send+0x152>
			apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[ConfigPtr->BCM_ArraySize - 4 + gu8_TxCounter]);
     4d8:	60 91 7d 00 	lds	r22, 0x007D
     4dc:	70 91 7e 00 	lds	r23, 0x007E
     4e0:	ea 81       	ldd	r30, Y+2	; 0x02
     4e2:	fb 81       	ldd	r31, Y+3	; 0x03
     4e4:	41 81       	ldd	r20, Z+1	; 0x01
     4e6:	52 81       	ldd	r21, Z+2	; 0x02
     4e8:	ea 81       	ldd	r30, Y+2	; 0x02
     4ea:	fb 81       	ldd	r31, Y+3	; 0x03
     4ec:	23 81       	ldd	r18, Z+3	; 0x03
     4ee:	34 81       	ldd	r19, Z+4	; 0x04
     4f0:	80 91 7b 00 	lds	r24, 0x007B
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	82 0f       	add	r24, r18
     4fa:	93 1f       	adc	r25, r19
     4fc:	04 97       	sbiw	r24, 0x04	; 4
     4fe:	fa 01       	movw	r30, r20
     500:	e8 0f       	add	r30, r24
     502:	f9 1f       	adc	r31, r25
     504:	80 81       	ld	r24, Z
     506:	fb 01       	movw	r30, r22
     508:	09 95       	icall
     50a:	32 c0       	rjmp	.+100    	; 0x570 <BCM_Send+0x1b6>
		else if(gu8_TxCounter == ConfigPtr->BCM_ArraySize - 1)
     50c:	80 91 7b 00 	lds	r24, 0x007B
     510:	28 2f       	mov	r18, r24
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	ea 81       	ldd	r30, Y+2	; 0x02
     516:	fb 81       	ldd	r31, Y+3	; 0x03
     518:	83 81       	ldd	r24, Z+3	; 0x03
     51a:	94 81       	ldd	r25, Z+4	; 0x04
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	28 17       	cp	r18, r24
     520:	39 07       	cpc	r19, r25
     522:	99 f4       	brne	.+38     	; 0x54a <BCM_Send+0x190>
			apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[gu8_TxCounter]);
     524:	40 91 7d 00 	lds	r20, 0x007D
     528:	50 91 7e 00 	lds	r21, 0x007E
     52c:	ea 81       	ldd	r30, Y+2	; 0x02
     52e:	fb 81       	ldd	r31, Y+3	; 0x03
     530:	21 81       	ldd	r18, Z+1	; 0x01
     532:	32 81       	ldd	r19, Z+2	; 0x02
     534:	80 91 7b 00 	lds	r24, 0x007B
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	f9 01       	movw	r30, r18
     53e:	e8 0f       	add	r30, r24
     540:	f9 1f       	adc	r31, r25
     542:	80 81       	ld	r24, Z
     544:	fa 01       	movw	r30, r20
     546:	09 95       	icall
     548:	13 c0       	rjmp	.+38     	; 0x570 <BCM_Send+0x1b6>
		else
			apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[gu8_TxCounter - 3]);
     54a:	40 91 7d 00 	lds	r20, 0x007D
     54e:	50 91 7e 00 	lds	r21, 0x007E
     552:	ea 81       	ldd	r30, Y+2	; 0x02
     554:	fb 81       	ldd	r31, Y+3	; 0x03
     556:	21 81       	ldd	r18, Z+1	; 0x01
     558:	32 81       	ldd	r19, Z+2	; 0x02
     55a:	80 91 7b 00 	lds	r24, 0x007B
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	03 97       	sbiw	r24, 0x03	; 3
     564:	f9 01       	movw	r30, r18
     566:	e8 0f       	add	r30, r24
     568:	f9 1f       	adc	r31, r25
     56a:	80 81       	ld	r24, Z
     56c:	fa 01       	movw	r30, r20
     56e:	09 95       	icall
		gu8_TxCounter++;
     570:	80 91 7b 00 	lds	r24, 0x007B
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 7b 00 	sts	0x007B, r24
	}

	TxCfg = *ConfigPtr;
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	20 e8       	ldi	r18, 0x80	; 128
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	3f 83       	std	Y+7, r19	; 0x07
     584:	2e 83       	std	Y+6, r18	; 0x06
     586:	99 87       	std	Y+9, r25	; 0x09
     588:	88 87       	std	Y+8, r24	; 0x08
     58a:	35 e0       	ldi	r19, 0x05	; 5
     58c:	3a 87       	std	Y+10, r19	; 0x0a
     58e:	e8 85       	ldd	r30, Y+8	; 0x08
     590:	f9 85       	ldd	r31, Y+9	; 0x09
     592:	00 80       	ld	r0, Z
     594:	28 85       	ldd	r18, Y+8	; 0x08
     596:	39 85       	ldd	r19, Y+9	; 0x09
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	39 87       	std	Y+9, r19	; 0x09
     59e:	28 87       	std	Y+8, r18	; 0x08
     5a0:	ee 81       	ldd	r30, Y+6	; 0x06
     5a2:	ff 81       	ldd	r31, Y+7	; 0x07
     5a4:	00 82       	st	Z, r0
     5a6:	2e 81       	ldd	r18, Y+6	; 0x06
     5a8:	3f 81       	ldd	r19, Y+7	; 0x07
     5aa:	2f 5f       	subi	r18, 0xFF	; 255
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	3f 83       	std	Y+7, r19	; 0x07
     5b0:	2e 83       	std	Y+6, r18	; 0x06
     5b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     5b4:	31 50       	subi	r19, 0x01	; 1
     5b6:	3a 87       	std	Y+10, r19	; 0x0a
     5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ba:	88 23       	and	r24, r24
     5bc:	41 f7       	brne	.-48     	; 0x58e <BCM_Send+0x1d4>

	return au8_Ret;
     5be:	89 81       	ldd	r24, Y+1	; 0x01
}
     5c0:	2a 96       	adiw	r28, 0x0a	; 10
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	cf 91       	pop	r28
     5ce:	df 91       	pop	r29
     5d0:	08 95       	ret

000005d2 <BCM_SetupRxBuffer>:

EnmBCMError_t BCM_SetupRxBuffer(uint8_t ProtocolID, uint8_t* ArrayFirstElementAddress, uint16_t ArraySize)
{
     5d2:	df 93       	push	r29
     5d4:	cf 93       	push	r28
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	28 97       	sbiw	r28, 0x08	; 8
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	8a 83       	std	Y+2, r24	; 0x02
     5e8:	7c 83       	std	Y+4, r23	; 0x04
     5ea:	6b 83       	std	Y+3, r22	; 0x03
     5ec:	5e 83       	std	Y+6, r21	; 0x06
     5ee:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t au8_Ret = E_OK;
     5f0:	19 82       	std	Y+1, r1	; 0x01

	RxCfg.BCM_ArraySize = ArraySize;
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	9e 81       	ldd	r25, Y+6	; 0x06
     5f6:	90 93 89 00 	sts	0x0089, r25
     5fa:	80 93 88 00 	sts	0x0088, r24
	RxCfg.BCM_ArrayStartAddress = ArrayFirstElementAddress;
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	90 93 87 00 	sts	0x0087, r25
     606:	80 93 86 00 	sts	0x0086, r24
	RxCfg.BCM_ProtocolID = ProtocolID;
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	80 93 85 00 	sts	0x0085, r24

	switch(ProtocolID)
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	28 2f       	mov	r18, r24
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	38 87       	std	Y+8, r19	; 0x08
     618:	2f 83       	std	Y+7, r18	; 0x07
     61a:	8f 81       	ldd	r24, Y+7	; 0x07
     61c:	98 85       	ldd	r25, Y+8	; 0x08
     61e:	80 3a       	cpi	r24, 0xA0	; 160
     620:	91 05       	cpc	r25, r1
     622:	31 f0       	breq	.+12     	; 0x630 <BCM_SetupRxBuffer+0x5e>
     624:	2f 81       	ldd	r18, Y+7	; 0x07
     626:	38 85       	ldd	r19, Y+8	; 0x08
     628:	21 3a       	cpi	r18, 0xA1	; 161
     62a:	31 05       	cpc	r19, r1
     62c:	31 f0       	breq	.+12     	; 0x63a <BCM_SetupRxBuffer+0x68>
     62e:	0a c0       	rjmp	.+20     	; 0x644 <BCM_SetupRxBuffer+0x72>
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
     630:	89 e4       	ldi	r24, 0x49	; 73
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_RXC_setCallBack>
     638:	07 c0       	rjmp	.+14     	; 0x648 <BCM_SetupRxBuffer+0x76>
		break;
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
     63a:	89 e4       	ldi	r24, 0x49	; 73
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_setCallBack>
     642:	02 c0       	rjmp	.+4      	; 0x648 <BCM_SetupRxBuffer+0x76>
		break;
	default:
		au8_Ret = E_NOK;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     648:	89 81       	ldd	r24, Y+1	; 0x01
}
     64a:	28 96       	adiw	r28, 0x08	; 8
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	08 95       	ret

0000065c <BCM_Receive>:

EnmBCMError_t BCM_Receive(strBcmSendConfig_t* ConfigPtr)
{
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	00 d0       	rcall	.+0      	; 0x666 <BCM_Receive+0xa>
     666:	00 d0       	rcall	.+0      	; 0x668 <BCM_Receive+0xc>
     668:	00 d0       	rcall	.+0      	; 0x66a <BCM_Receive+0xe>
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	9c 83       	std	Y+4, r25	; 0x04
     670:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t au8_Ret = E_OK;
	PointerToReceiverFunction apf_ReceiverFunction = NULL;
     672:	1a 82       	std	Y+2, r1	; 0x02
     674:	19 82       	std	Y+1, r1	; 0x01

	switch(ConfigPtr->BCM_ProtocolID)
     676:	eb 81       	ldd	r30, Y+3	; 0x03
     678:	fc 81       	ldd	r31, Y+4	; 0x04
     67a:	80 81       	ld	r24, Z
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	3e 83       	std	Y+6, r19	; 0x06
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	9e 81       	ldd	r25, Y+6	; 0x06
     688:	80 3a       	cpi	r24, 0xA0	; 160
     68a:	91 05       	cpc	r25, r1
     68c:	31 f0       	breq	.+12     	; 0x69a <BCM_Receive+0x3e>
     68e:	ed 81       	ldd	r30, Y+5	; 0x05
     690:	fe 81       	ldd	r31, Y+6	; 0x06
     692:	e1 3a       	cpi	r30, 0xA1	; 161
     694:	f1 05       	cpc	r31, r1
     696:	51 f0       	breq	.+20     	; 0x6ac <BCM_Receive+0x50>
     698:	12 c0       	rjmp	.+36     	; 0x6be <BCM_Receive+0x62>
	{
	case BCM_UART_ID:
		UART_RXC_setCallBack(&RxApp);
     69a:	89 e4       	ldi	r24, 0x49	; 73
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_RXC_setCallBack>
		apf_ReceiverFunction = UART_receive;
     6a2:	88 e0       	ldi	r24, 0x08	; 8
     6a4:	98 e0       	ldi	r25, 0x08	; 8
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <BCM_Receive+0x68>
		break;
	case BCM_SPI_ID:
		SPI_setCallBack(&RxApp);
     6ac:	89 e4       	ldi	r24, 0x49	; 73
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SPI_setCallBack>
		apf_ReceiverFunction = SPI_receiveByte;
     6b4:	87 e4       	ldi	r24, 0x47	; 71
     6b6:	96 e0       	ldi	r25, 0x06	; 6
     6b8:	9a 83       	std	Y+2, r25	; 0x02
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <BCM_Receive+0x68>
		break;
	default:
		au8_Ret = E_NOK;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 7f 00 	sts	0x007F, r24
		break;
	}

	if(gu8_RxCounter < ConfigPtr->BCM_ArraySize && au8_Ret == E_OK)
     6c4:	80 91 7c 00 	lds	r24, 0x007C
     6c8:	28 2f       	mov	r18, r24
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	eb 81       	ldd	r30, Y+3	; 0x03
     6ce:	fc 81       	ldd	r31, Y+4	; 0x04
     6d0:	83 81       	ldd	r24, Z+3	; 0x03
     6d2:	94 81       	ldd	r25, Z+4	; 0x04
     6d4:	28 17       	cp	r18, r24
     6d6:	39 07       	cpc	r19, r25
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <BCM_Receive+0x80>
     6da:	40 c0       	rjmp	.+128    	; 0x75c <BCM_Receive+0x100>
     6dc:	80 91 7f 00 	lds	r24, 0x007F
     6e0:	88 23       	and	r24, r24
     6e2:	e1 f5       	brne	.+120    	; 0x75c <BCM_Receive+0x100>
	{
		ConfigPtr->BCM_ArrayStartAddress[gu8_RxCounter] = apf_ReceiverFunction();
     6e4:	eb 81       	ldd	r30, Y+3	; 0x03
     6e6:	fc 81       	ldd	r31, Y+4	; 0x04
     6e8:	21 81       	ldd	r18, Z+1	; 0x01
     6ea:	32 81       	ldd	r19, Z+2	; 0x02
     6ec:	80 91 7c 00 	lds	r24, 0x007C
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	89 01       	movw	r16, r18
     6f6:	08 0f       	add	r16, r24
     6f8:	19 1f       	adc	r17, r25
     6fa:	e9 81       	ldd	r30, Y+1	; 0x01
     6fc:	fa 81       	ldd	r31, Y+2	; 0x02
     6fe:	09 95       	icall
     700:	f8 01       	movw	r30, r16
     702:	80 83       	st	Z, r24

		if(ConfigPtr->BCM_ArrayStartAddress[0] != BCM_ID)
     704:	eb 81       	ldd	r30, Y+3	; 0x03
     706:	fc 81       	ldd	r31, Y+4	; 0x04
     708:	01 80       	ldd	r0, Z+1	; 0x01
     70a:	f2 81       	ldd	r31, Z+2	; 0x02
     70c:	e0 2d       	mov	r30, r0
     70e:	80 81       	ld	r24, Z
     710:	8a 35       	cpi	r24, 0x5A	; 90
     712:	69 f0       	breq	.+26     	; 0x72e <BCM_Receive+0xd2>
		{
			au8_Ret = E_NOK;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	80 93 7f 00 	sts	0x007F, r24
			gu8_BCM_Receiving_SM = BCM_RECEIVER_IDLE;
     71a:	10 92 77 00 	sts	0x0077, r1
			gu8_RxCounter = 0;
     71e:	10 92 7c 00 	sts	0x007C, r1
			gu8_RxDispatchCounter = 255;
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	80 93 61 00 	sts	0x0061, r24
			gu8_RxCheckSum = 0;
     728:	10 92 7a 00 	sts	0x007A, r1
     72c:	03 c0       	rjmp	.+6      	; 0x734 <BCM_Receive+0xd8>
		}else
		{
			gu8_BCM_BufferState = BCM_BUFFER_LOCKED;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 78 00 	sts	0x0078, r24
		}

		PORTD_DIR = ConfigPtr->BCM_ArrayStartAddress[gu8_RxCounter];
     734:	a1 e3       	ldi	r26, 0x31	; 49
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	eb 81       	ldd	r30, Y+3	; 0x03
     73a:	fc 81       	ldd	r31, Y+4	; 0x04
     73c:	21 81       	ldd	r18, Z+1	; 0x01
     73e:	32 81       	ldd	r19, Z+2	; 0x02
     740:	80 91 7c 00 	lds	r24, 0x007C
     744:	88 2f       	mov	r24, r24
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	e8 0f       	add	r30, r24
     74c:	f9 1f       	adc	r31, r25
     74e:	80 81       	ld	r24, Z
     750:	8c 93       	st	X, r24
		gu8_RxCounter++;
     752:	80 91 7c 00 	lds	r24, 0x007C
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 7c 00 	sts	0x007C, r24
	}

	return au8_Ret;
     75c:	80 91 7f 00 	lds	r24, 0x007F
}
     760:	26 96       	adiw	r28, 0x06	; 6
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	cf 91       	pop	r28
     76e:	df 91       	pop	r29
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <DIO_init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	29 97       	sbiw	r28, 0x09	; 9
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	9d 83       	std	Y+5, r25	; 0x05
     78c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t au8_Ret = E_OK;
     78e:	1b 82       	std	Y+3, r1	; 0x03
	/* A local pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDirectionPointer = NULL;
     790:	1a 82       	std	Y+2, r1	; 0x02
     792:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its direction */
	switch(DIO_info->GPIO)
     794:	ec 81       	ldd	r30, Y+4	; 0x04
     796:	fd 81       	ldd	r31, Y+5	; 0x05
     798:	80 81       	ld	r24, Z
     79a:	28 2f       	mov	r18, r24
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	39 87       	std	Y+9, r19	; 0x09
     7a0:	28 87       	std	Y+8, r18	; 0x08
     7a2:	88 85       	ldd	r24, Y+8	; 0x08
     7a4:	99 85       	ldd	r25, Y+9	; 0x09
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	91 05       	cpc	r25, r1
     7aa:	d1 f0       	breq	.+52     	; 0x7e0 <DIO_init+0x6a>
     7ac:	28 85       	ldd	r18, Y+8	; 0x08
     7ae:	39 85       	ldd	r19, Y+9	; 0x09
     7b0:	22 30       	cpi	r18, 0x02	; 2
     7b2:	31 05       	cpc	r19, r1
     7b4:	2c f4       	brge	.+10     	; 0x7c0 <DIO_init+0x4a>
     7b6:	88 85       	ldd	r24, Y+8	; 0x08
     7b8:	99 85       	ldd	r25, Y+9	; 0x09
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	61 f0       	breq	.+24     	; 0x7d6 <DIO_init+0x60>
     7be:	1f c0       	rjmp	.+62     	; 0x7fe <DIO_init+0x88>
     7c0:	28 85       	ldd	r18, Y+8	; 0x08
     7c2:	39 85       	ldd	r19, Y+9	; 0x09
     7c4:	22 30       	cpi	r18, 0x02	; 2
     7c6:	31 05       	cpc	r19, r1
     7c8:	81 f0       	breq	.+32     	; 0x7ea <DIO_init+0x74>
     7ca:	88 85       	ldd	r24, Y+8	; 0x08
     7cc:	99 85       	ldd	r25, Y+9	; 0x09
     7ce:	83 30       	cpi	r24, 0x03	; 3
     7d0:	91 05       	cpc	r25, r1
     7d2:	81 f0       	breq	.+32     	; 0x7f4 <DIO_init+0x7e>
     7d4:	14 c0       	rjmp	.+40     	; 0x7fe <DIO_init+0x88>
	{
	case GPIOA:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTA_DIR);
     7d6:	8a e3       	ldi	r24, 0x3A	; 58
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	11 c0       	rjmp	.+34     	; 0x802 <DIO_init+0x8c>
		break;
	case GPIOB:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTB_DIR);
     7e0:	87 e3       	ldi	r24, 0x37	; 55
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <DIO_init+0x8c>
		break;
	case GPIOC:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTC_DIR);
     7ea:	84 e3       	ldi	r24, 0x34	; 52
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <DIO_init+0x8c>
		break;
	case GPIOD:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTD_DIR);
     7f4:	81 e3       	ldi	r24, 0x31	; 49
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	89 83       	std	Y+1, r24	; 0x01
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_init+0x8c>
		break;
	default:
		au8_Ret = E_NOK;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_Ret == E_OK)
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	88 23       	and	r24, r24
     806:	59 f5       	brne	.+86     	; 0x85e <DIO_init+0xe8>
	{
		/* A switch case to determine which direction to be configured in the port */
		switch(DIO_info->dir)
     808:	ec 81       	ldd	r30, Y+4	; 0x04
     80a:	fd 81       	ldd	r31, Y+5	; 0x05
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	28 2f       	mov	r18, r24
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	3f 83       	std	Y+7, r19	; 0x07
     814:	2e 83       	std	Y+6, r18	; 0x06
     816:	8e 81       	ldd	r24, Y+6	; 0x06
     818:	9f 81       	ldd	r25, Y+7	; 0x07
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	31 f0       	breq	.+12     	; 0x82a <DIO_init+0xb4>
     81e:	2e 81       	ldd	r18, Y+6	; 0x06
     820:	3f 81       	ldd	r19, Y+7	; 0x07
     822:	2f 3f       	cpi	r18, 0xFF	; 255
     824:	31 05       	cpc	r19, r1
     826:	71 f0       	breq	.+28     	; 0x844 <DIO_init+0xce>
     828:	18 c0       	rjmp	.+48     	; 0x85a <DIO_init+0xe4>
		{
		case INPUT:
			*pau8_gpioDirectionPointer &= ~(DIO_info->pins);
     82a:	e9 81       	ldd	r30, Y+1	; 0x01
     82c:	fa 81       	ldd	r31, Y+2	; 0x02
     82e:	80 81       	ld	r24, Z
     830:	98 2f       	mov	r25, r24
     832:	ec 81       	ldd	r30, Y+4	; 0x04
     834:	fd 81       	ldd	r31, Y+5	; 0x05
     836:	81 81       	ldd	r24, Z+1	; 0x01
     838:	80 95       	com	r24
     83a:	89 23       	and	r24, r25
     83c:	e9 81       	ldd	r30, Y+1	; 0x01
     83e:	fa 81       	ldd	r31, Y+2	; 0x02
     840:	80 83       	st	Z, r24
     842:	0d c0       	rjmp	.+26     	; 0x85e <DIO_init+0xe8>
			break;
		case OUTPUT:
			*pau8_gpioDirectionPointer |= (DIO_info->pins);
     844:	e9 81       	ldd	r30, Y+1	; 0x01
     846:	fa 81       	ldd	r31, Y+2	; 0x02
     848:	90 81       	ld	r25, Z
     84a:	ec 81       	ldd	r30, Y+4	; 0x04
     84c:	fd 81       	ldd	r31, Y+5	; 0x05
     84e:	81 81       	ldd	r24, Z+1	; 0x01
     850:	89 2b       	or	r24, r25
     852:	e9 81       	ldd	r30, Y+1	; 0x01
     854:	fa 81       	ldd	r31, Y+2	; 0x02
     856:	80 83       	st	Z, r24
     858:	02 c0       	rjmp	.+4      	; 0x85e <DIO_init+0xe8>
			break;
		default:
			au8_Ret = E_NOK;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
	}

	return au8_Ret;
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     860:	29 96       	adiw	r28, 0x09	; 9
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	08 95       	ret

00000872 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
     872:	df 93       	push	r29
     874:	cf 93       	push	r28
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	2a 97       	sbiw	r28, 0x0a	; 10
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	8c 83       	std	Y+4, r24	; 0x04
     888:	6d 83       	std	Y+5, r22	; 0x05
     88a:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t au8_Ret = E_OK;
     88c:	1b 82       	std	Y+3, r1	; 0x03
	/* A pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDataPointer = NULL;
     88e:	1a 82       	std	Y+2, r1	; 0x02
     890:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its data */
	switch(GPIO)
     892:	8c 81       	ldd	r24, Y+4	; 0x04
     894:	28 2f       	mov	r18, r24
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	3a 87       	std	Y+10, r19	; 0x0a
     89a:	29 87       	std	Y+9, r18	; 0x09
     89c:	89 85       	ldd	r24, Y+9	; 0x09
     89e:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a0:	81 30       	cpi	r24, 0x01	; 1
     8a2:	91 05       	cpc	r25, r1
     8a4:	d1 f0       	breq	.+52     	; 0x8da <DIO_Write+0x68>
     8a6:	29 85       	ldd	r18, Y+9	; 0x09
     8a8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8aa:	22 30       	cpi	r18, 0x02	; 2
     8ac:	31 05       	cpc	r19, r1
     8ae:	2c f4       	brge	.+10     	; 0x8ba <DIO_Write+0x48>
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	61 f0       	breq	.+24     	; 0x8d0 <DIO_Write+0x5e>
     8b8:	1f c0       	rjmp	.+62     	; 0x8f8 <DIO_Write+0x86>
     8ba:	29 85       	ldd	r18, Y+9	; 0x09
     8bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     8be:	22 30       	cpi	r18, 0x02	; 2
     8c0:	31 05       	cpc	r19, r1
     8c2:	81 f0       	breq	.+32     	; 0x8e4 <DIO_Write+0x72>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	91 05       	cpc	r25, r1
     8cc:	81 f0       	breq	.+32     	; 0x8ee <DIO_Write+0x7c>
     8ce:	14 c0       	rjmp	.+40     	; 0x8f8 <DIO_Write+0x86>
	{
	case GPIOA:
		pau8_gpioDataPointer = (uint8_t*)(&PORTA_DATA);
     8d0:	8b e3       	ldi	r24, 0x3B	; 59
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	11 c0       	rjmp	.+34     	; 0x8fc <DIO_Write+0x8a>
		break;
	case GPIOB:
		pau8_gpioDataPointer = (uint8_t*)(&PORTB_DATA);
     8da:	88 e3       	ldi	r24, 0x38	; 56
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	9a 83       	std	Y+2, r25	; 0x02
     8e0:	89 83       	std	Y+1, r24	; 0x01
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <DIO_Write+0x8a>
		break;
	case GPIOC:
		pau8_gpioDataPointer = (uint8_t*)(&PORTC_DATA);
     8e4:	85 e3       	ldi	r24, 0x35	; 53
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	07 c0       	rjmp	.+14     	; 0x8fc <DIO_Write+0x8a>
		break;
	case GPIOD:
		pau8_gpioDataPointer = (uint8_t*)(&PORTD_DATA);
     8ee:	82 e3       	ldi	r24, 0x32	; 50
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <DIO_Write+0x8a>
		break;
	default:
		au8_Ret = E_NOK;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_Ret == E_OK)
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	88 23       	and	r24, r24
     900:	29 f5       	brne	.+74     	; 0x94c <DIO_Write+0xda>
	{
		/* A switch case to determine which value to be configured in the port */
		switch(value)
     902:	8e 81       	ldd	r24, Y+6	; 0x06
     904:	28 2f       	mov	r18, r24
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	38 87       	std	Y+8, r19	; 0x08
     90a:	2f 83       	std	Y+7, r18	; 0x07
     90c:	8f 81       	ldd	r24, Y+7	; 0x07
     90e:	98 85       	ldd	r25, Y+8	; 0x08
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	31 f0       	breq	.+12     	; 0x920 <DIO_Write+0xae>
     914:	2f 81       	ldd	r18, Y+7	; 0x07
     916:	38 85       	ldd	r19, Y+8	; 0x08
     918:	2f 3f       	cpi	r18, 0xFF	; 255
     91a:	31 05       	cpc	r19, r1
     91c:	61 f0       	breq	.+24     	; 0x936 <DIO_Write+0xc4>
     91e:	14 c0       	rjmp	.+40     	; 0x948 <DIO_Write+0xd6>
		{
		case LOW:
			*pau8_gpioDataPointer &= ~(pins);
     920:	e9 81       	ldd	r30, Y+1	; 0x01
     922:	fa 81       	ldd	r31, Y+2	; 0x02
     924:	80 81       	ld	r24, Z
     926:	98 2f       	mov	r25, r24
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	80 95       	com	r24
     92c:	89 23       	and	r24, r25
     92e:	e9 81       	ldd	r30, Y+1	; 0x01
     930:	fa 81       	ldd	r31, Y+2	; 0x02
     932:	80 83       	st	Z, r24
     934:	0b c0       	rjmp	.+22     	; 0x94c <DIO_Write+0xda>
			break;
		case HIGH:
			*pau8_gpioDataPointer |= (pins);
     936:	e9 81       	ldd	r30, Y+1	; 0x01
     938:	fa 81       	ldd	r31, Y+2	; 0x02
     93a:	90 81       	ld	r25, Z
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	89 2b       	or	r24, r25
     940:	e9 81       	ldd	r30, Y+1	; 0x01
     942:	fa 81       	ldd	r31, Y+2	; 0x02
     944:	80 83       	st	Z, r24
     946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_Write+0xda>
			break;
		default:
			au8_Ret = E_NOK;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
	}

	return au8_Ret;
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     94e:	2a 96       	adiw	r28, 0x0a	; 10
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <DIO_Read>:

ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t* data)
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	27 97       	sbiw	r28, 0x07	; 7
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	8a 83       	std	Y+2, r24	; 0x02
     976:	6b 83       	std	Y+3, r22	; 0x03
     978:	5d 83       	std	Y+5, r21	; 0x05
     97a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_Ret = E_OK;
     97c:	19 82       	std	Y+1, r1	; 0x01

	if(data != NULL)
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	09 f4       	brne	.+2      	; 0x988 <DIO_Read+0x28>
     986:	46 c0       	rjmp	.+140    	; 0xa14 <DIO_Read+0xb4>
	{
		/* A switch case to determine which port will be read from */
		switch(GPIO)
     988:	8a 81       	ldd	r24, Y+2	; 0x02
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	3f 83       	std	Y+7, r19	; 0x07
     990:	2e 83       	std	Y+6, r18	; 0x06
     992:	8e 81       	ldd	r24, Y+6	; 0x06
     994:	9f 81       	ldd	r25, Y+7	; 0x07
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	91 05       	cpc	r25, r1
     99a:	f1 f0       	breq	.+60     	; 0x9d8 <DIO_Read+0x78>
     99c:	2e 81       	ldd	r18, Y+6	; 0x06
     99e:	3f 81       	ldd	r19, Y+7	; 0x07
     9a0:	22 30       	cpi	r18, 0x02	; 2
     9a2:	31 05       	cpc	r19, r1
     9a4:	2c f4       	brge	.+10     	; 0x9b0 <DIO_Read+0x50>
     9a6:	8e 81       	ldd	r24, Y+6	; 0x06
     9a8:	9f 81       	ldd	r25, Y+7	; 0x07
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	61 f0       	breq	.+24     	; 0x9c6 <DIO_Read+0x66>
     9ae:	2f c0       	rjmp	.+94     	; 0xa0e <DIO_Read+0xae>
     9b0:	2e 81       	ldd	r18, Y+6	; 0x06
     9b2:	3f 81       	ldd	r19, Y+7	; 0x07
     9b4:	22 30       	cpi	r18, 0x02	; 2
     9b6:	31 05       	cpc	r19, r1
     9b8:	c1 f0       	breq	.+48     	; 0x9ea <DIO_Read+0x8a>
     9ba:	8e 81       	ldd	r24, Y+6	; 0x06
     9bc:	9f 81       	ldd	r25, Y+7	; 0x07
     9be:	83 30       	cpi	r24, 0x03	; 3
     9c0:	91 05       	cpc	r25, r1
     9c2:	e1 f0       	breq	.+56     	; 0x9fc <DIO_Read+0x9c>
     9c4:	24 c0       	rjmp	.+72     	; 0xa0e <DIO_Read+0xae>
		{
		case GPIOA:
			*data = PORTA_PIN & pins;
     9c6:	e9 e3       	ldi	r30, 0x39	; 57
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	90 81       	ld	r25, Z
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	89 23       	and	r24, r25
     9d0:	ec 81       	ldd	r30, Y+4	; 0x04
     9d2:	fd 81       	ldd	r31, Y+5	; 0x05
     9d4:	80 83       	st	Z, r24
     9d6:	20 c0       	rjmp	.+64     	; 0xa18 <DIO_Read+0xb8>
			break;
		case GPIOB:
			*data = PORTB_PIN & pins;
     9d8:	e6 e3       	ldi	r30, 0x36	; 54
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	90 81       	ld	r25, Z
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	89 23       	and	r24, r25
     9e2:	ec 81       	ldd	r30, Y+4	; 0x04
     9e4:	fd 81       	ldd	r31, Y+5	; 0x05
     9e6:	80 83       	st	Z, r24
     9e8:	17 c0       	rjmp	.+46     	; 0xa18 <DIO_Read+0xb8>
			break;
		case GPIOC:
			*data = PORTC_PIN & pins;
     9ea:	e3 e3       	ldi	r30, 0x33	; 51
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	90 81       	ld	r25, Z
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	89 23       	and	r24, r25
     9f4:	ec 81       	ldd	r30, Y+4	; 0x04
     9f6:	fd 81       	ldd	r31, Y+5	; 0x05
     9f8:	80 83       	st	Z, r24
     9fa:	0e c0       	rjmp	.+28     	; 0xa18 <DIO_Read+0xb8>
			break;
		case GPIOD:
			*data = PORTD_PIN & pins;
     9fc:	e0 e3       	ldi	r30, 0x30	; 48
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	90 81       	ld	r25, Z
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	89 23       	and	r24, r25
     a06:	ec 81       	ldd	r30, Y+4	; 0x04
     a08:	fd 81       	ldd	r31, Y+5	; 0x05
     a0a:	80 83       	st	Z, r24
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <DIO_Read+0xb8>
			break;
		default:
			au8_Ret = E_NOK;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_Read+0xb8>
			break;
		}
	}else
	{
		au8_Ret = E_NOK;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
     a18:	89 81       	ldd	r24, Y+1	; 0x01
}
     a1a:	27 96       	adiw	r28, 0x07	; 7
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	08 95       	ret

00000a2c <DIO_Toggle>:

ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	00 d0       	rcall	.+0      	; 0xa32 <DIO_Toggle+0x6>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <DIO_Toggle+0x8>
     a34:	0f 92       	push	r0
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	8a 83       	std	Y+2, r24	; 0x02
     a3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
     a3e:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which port value to be toggled */
	switch(GPIO)
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	28 2f       	mov	r18, r24
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	3d 83       	std	Y+5, r19	; 0x05
     a48:	2c 83       	std	Y+4, r18	; 0x04
     a4a:	8c 81       	ldd	r24, Y+4	; 0x04
     a4c:	9d 81       	ldd	r25, Y+5	; 0x05
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	91 05       	cpc	r25, r1
     a52:	f1 f0       	breq	.+60     	; 0xa90 <DIO_Toggle+0x64>
     a54:	2c 81       	ldd	r18, Y+4	; 0x04
     a56:	3d 81       	ldd	r19, Y+5	; 0x05
     a58:	22 30       	cpi	r18, 0x02	; 2
     a5a:	31 05       	cpc	r19, r1
     a5c:	2c f4       	brge	.+10     	; 0xa68 <DIO_Toggle+0x3c>
     a5e:	8c 81       	ldd	r24, Y+4	; 0x04
     a60:	9d 81       	ldd	r25, Y+5	; 0x05
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	61 f0       	breq	.+24     	; 0xa7e <DIO_Toggle+0x52>
     a66:	2f c0       	rjmp	.+94     	; 0xac6 <DIO_Toggle+0x9a>
     a68:	2c 81       	ldd	r18, Y+4	; 0x04
     a6a:	3d 81       	ldd	r19, Y+5	; 0x05
     a6c:	22 30       	cpi	r18, 0x02	; 2
     a6e:	31 05       	cpc	r19, r1
     a70:	c1 f0       	breq	.+48     	; 0xaa2 <DIO_Toggle+0x76>
     a72:	8c 81       	ldd	r24, Y+4	; 0x04
     a74:	9d 81       	ldd	r25, Y+5	; 0x05
     a76:	83 30       	cpi	r24, 0x03	; 3
     a78:	91 05       	cpc	r25, r1
     a7a:	e1 f0       	breq	.+56     	; 0xab4 <DIO_Toggle+0x88>
     a7c:	24 c0       	rjmp	.+72     	; 0xac6 <DIO_Toggle+0x9a>
	{
	case GPIOA:
		PORTA_DATA ^= pins;
     a7e:	ab e3       	ldi	r26, 0x3B	; 59
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	eb e3       	ldi	r30, 0x3B	; 59
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	90 81       	ld	r25, Z
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	89 27       	eor	r24, r25
     a8c:	8c 93       	st	X, r24
     a8e:	1d c0       	rjmp	.+58     	; 0xaca <DIO_Toggle+0x9e>
		break;
	case GPIOB:
		PORTB_DATA ^= pins;
     a90:	a8 e3       	ldi	r26, 0x38	; 56
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	e8 e3       	ldi	r30, 0x38	; 56
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	90 81       	ld	r25, Z
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	89 27       	eor	r24, r25
     a9e:	8c 93       	st	X, r24
     aa0:	14 c0       	rjmp	.+40     	; 0xaca <DIO_Toggle+0x9e>
		break;
	case GPIOC:
		PORTC_DATA ^= pins;
     aa2:	a5 e3       	ldi	r26, 0x35	; 53
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e5 e3       	ldi	r30, 0x35	; 53
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	90 81       	ld	r25, Z
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	89 27       	eor	r24, r25
     ab0:	8c 93       	st	X, r24
     ab2:	0b c0       	rjmp	.+22     	; 0xaca <DIO_Toggle+0x9e>
		break;
	case GPIOD:
		PORTD_DATA ^= pins;
     ab4:	a2 e3       	ldi	r26, 0x32	; 50
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e2 e3       	ldi	r30, 0x32	; 50
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	90 81       	ld	r25, Z
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	89 27       	eor	r24, r25
     ac2:	8c 93       	st	X, r24
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_Toggle+0x9e>
		break;
	default:
		au8_Ret = E_NOK;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
     aca:	89 81       	ldd	r24, Y+1	; 0x01
}
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	cf 91       	pop	r28
     ad8:	df 91       	pop	r29
     ada:	08 95       	ret

00000adc <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
     b06:	80 91 8a 00 	lds	r24, 0x008A
     b0a:	90 91 8b 00 	lds	r25, 0x008B
     b0e:	00 97       	sbiw	r24, 0x00	; 0
     b10:	29 f0       	breq	.+10     	; 0xb1c <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
     b12:	e0 91 8a 00 	lds	r30, 0x008A
     b16:	f0 91 8b 00 	lds	r31, 0x008B
     b1a:	09 95       	icall
	}
}
     b1c:	cf 91       	pop	r28
     b1e:	df 91       	pop	r29
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <SPI_init>:

/*
 * Description : A Function to Initialize the SPI Driver.
 */
void SPI_init(const SPI_ConfigType* ConfigPtr)
{
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	00 d0       	rcall	.+0      	; 0xb48 <SPI_init+0x6>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	89 83       	std	Y+1, r24	; 0x01
	/* In case the MCU will be configured as a slave */
	if(ConfigPtr->MasterSlaveSelect == SPI_SLAVE)
     b50:	e9 81       	ldd	r30, Y+1	; 0x01
     b52:	fa 81       	ldd	r31, Y+2	; 0x02
     b54:	80 81       	ld	r24, Z
     b56:	88 23       	and	r24, r24
     b58:	b1 f4       	brne	.+44     	; 0xb86 <SPI_init+0x44>
	{
		/* select the slave mode and set the pins accordingly */
		SPI_GPIO &= ~(SS | MOSI | SCK);
     b5a:	a7 e3       	ldi	r26, 0x37	; 55
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e3       	ldi	r30, 0x37	; 55
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 74       	andi	r24, 0x4F	; 79
     b66:	8c 93       	st	X, r24
		SPI_GPIO |= MISO;
     b68:	a7 e3       	ldi	r26, 0x37	; 55
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e7 e3       	ldi	r30, 0x37	; 55
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 64       	ori	r24, 0x40	; 64
     b74:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, MSTR);
     b76:	ad e2       	ldi	r26, 0x2D	; 45
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ed e2       	ldi	r30, 0x2D	; 45
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8f 7e       	andi	r24, 0xEF	; 239
     b82:	8c 93       	st	X, r24
     b84:	1a c0       	rjmp	.+52     	; 0xbba <SPI_init+0x78>
	}
	/* In case the MCU will be configured as a master */
	else if(ConfigPtr->MasterSlaveSelect == SPI_MASTER)
     b86:	e9 81       	ldd	r30, Y+1	; 0x01
     b88:	fa 81       	ldd	r31, Y+2	; 0x02
     b8a:	80 81       	ld	r24, Z
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	a9 f4       	brne	.+42     	; 0xbba <SPI_init+0x78>
	{
		/* select the master mode and set the pins accordingly */
		SPI_GPIO |= SS | MOSI | SCK;
     b90:	a7 e3       	ldi	r26, 0x37	; 55
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e7 e3       	ldi	r30, 0x37	; 55
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 6b       	ori	r24, 0xB0	; 176
     b9c:	8c 93       	st	X, r24
		SPI_GPIO &= ~MISO;
     b9e:	a7 e3       	ldi	r26, 0x37	; 55
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e7 e3       	ldi	r30, 0x37	; 55
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8f 7b       	andi	r24, 0xBF	; 191
     baa:	8c 93       	st	X, r24
		SET_BIT(SPCR, MSTR);
     bac:	ad e2       	ldi	r26, 0x2D	; 45
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ed e2       	ldi	r30, 0x2D	; 45
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 61       	ori	r24, 0x10	; 16
     bb8:	8c 93       	st	X, r24
	}

	/* Selecting the interrupt mode (enabled of disabled) */
	SPCR = (SPCR & 0x7F) | ConfigPtr->Mode;
     bba:	ad e2       	ldi	r26, 0x2D	; 45
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ed e2       	ldi	r30, 0x2D	; 45
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	98 2f       	mov	r25, r24
     bc6:	9f 77       	andi	r25, 0x7F	; 127
     bc8:	e9 81       	ldd	r30, Y+1	; 0x01
     bca:	fa 81       	ldd	r31, Y+2	; 0x02
     bcc:	81 81       	ldd	r24, Z+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	8c 93       	st	X, r24
	/* Enable the SPI module */
	SET_BIT(SPCR, SPE);
     bd2:	ad e2       	ldi	r26, 0x2D	; 45
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ed e2       	ldi	r30, 0x2D	; 45
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8c 93       	st	X, r24

	/* Selecting the clock rate */
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->ClockRateSelect) & 0x03);
     be0:	ad e2       	ldi	r26, 0x2D	; 45
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ed e2       	ldi	r30, 0x2D	; 45
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	98 2f       	mov	r25, r24
     bec:	9c 7f       	andi	r25, 0xFC	; 252
     bee:	e9 81       	ldd	r30, Y+1	; 0x01
     bf0:	fa 81       	ldd	r31, Y+2	; 0x02
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	83 70       	andi	r24, 0x03	; 3
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24
	SPSR = (SPSR & 0xFE) | ((ConfigPtr->ClockRateSelect) >> 2);
     bfa:	ae e2       	ldi	r26, 0x2E	; 46
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	ee e2       	ldi	r30, 0x2E	; 46
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	98 2f       	mov	r25, r24
     c06:	9e 7f       	andi	r25, 0xFE	; 254
     c08:	e9 81       	ldd	r30, Y+1	; 0x01
     c0a:	fa 81       	ldd	r31, Y+2	; 0x02
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	86 95       	lsr	r24
     c10:	86 95       	lsr	r24
     c12:	89 2b       	or	r24, r25
     c14:	8c 93       	st	X, r24
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <SPI_deInit>:

void SPI_deInit(void)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	SPCR_R = 0x00;
     c28:	ed e2       	ldi	r30, 0x2D	; 45
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	10 82       	st	Z, r1
	SPSR_R = 0x00;
     c2e:	ee e2       	ldi	r30, 0x2E	; 46
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	10 82       	st	Z, r1
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <SPI_setCallBack>:

/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <SPI_setCallBack+0x6>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	90 93 8b 00 	sts	0x008B, r25
     c50:	80 93 8a 00 	sts	0x008A, r24
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <SPI_sendByte>:

/*
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	0f 92       	push	r0
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	89 83       	std	Y+1, r24	; 0x01
	/* send the data */
	SPDR = data;
     c6a:	ef e2       	ldi	r30, 0x2F	; 47
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	80 83       	st	Z, r24
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
     c72:	ed e2       	ldi	r30, 0x2D	; 45
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 23       	and	r24, r24
     c7a:	2c f0       	brlt	.+10     	; 0xc86 <SPI_sendByte+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     c7c:	ee e2       	ldi	r30, 0x2E	; 46
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	88 23       	and	r24, r24
     c84:	dc f7       	brge	.-10     	; 0xc7c <SPI_sendByte+0x1e>
	}
}
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <SPI_receiveByte>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the SPIE bit in case the interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
     c96:	ed e2       	ldi	r30, 0x2D	; 45
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 23       	and	r24, r24
     c9e:	2c f0       	brlt	.+10     	; 0xcaa <SPI_receiveByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
     ca0:	ee e2       	ldi	r30, 0x2E	; 46
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	dc f7       	brge	.-10     	; 0xca0 <SPI_receiveByte+0x12>
	}
	/* read the data */
	return SPDR;
     caa:	ef e2       	ldi	r30, 0x2F	; 47
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	2f 93       	push	r18
     cc2:	3f 93       	push	r19
     cc4:	4f 93       	push	r20
     cc6:	5f 93       	push	r21
     cc8:	6f 93       	push	r22
     cca:	7f 93       	push	r23
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	af 93       	push	r26
     cd2:	bf 93       	push	r27
     cd4:	ef 93       	push	r30
     cd6:	ff 93       	push	r31
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
     ce0:	80 91 8e 00 	lds	r24, 0x008E
     ce4:	90 91 8f 00 	lds	r25, 0x008F
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	29 f0       	breq	.+10     	; 0xcf6 <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
     cec:	e0 91 8e 00 	lds	r30, 0x008E
     cf0:	f0 91 8f 00 	lds	r31, 0x008F
     cf4:	09 95       	icall
	}
}
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_14>:

ISR(USART_UDRE_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	5f 93       	push	r21
     d2e:	6f 93       	push	r22
     d30:	7f 93       	push	r23
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
     d46:	80 91 90 00 	lds	r24, 0x0090
     d4a:	90 91 91 00 	lds	r25, 0x0091
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	29 f0       	breq	.+10     	; 0xd5c <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
     d52:	e0 91 90 00 	lds	r30, 0x0090
     d56:	f0 91 91 00 	lds	r31, 0x0091
     d5a:	09 95       	icall
	}
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_15>:

ISR(USART_TXC_vect)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
     dac:	80 91 8c 00 	lds	r24, 0x008C
     db0:	90 91 8d 00 	lds	r25, 0x008D
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	29 f0       	breq	.+10     	; 0xdc2 <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
     db8:	e0 91 8c 00 	lds	r30, 0x008C
     dbc:	f0 91 8d 00 	lds	r31, 0x008D
     dc0:	09 95       	icall
	}
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <UART_TXC_setCallBack+0x6>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	90 93 8d 00 	sts	0x008D, r25
     dfe:	80 93 8c 00 	sts	0x008C, r24
}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <UART_RXC_setCallBack+0x6>
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	90 93 8f 00 	sts	0x008F, r25
     e22:	80 93 8e 00 	sts	0x008E, r24
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_UDRE_setCallBack+0x6>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	90 93 91 00 	sts	0x0091, r25
     e46:	80 93 90 00 	sts	0x0090, r24
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <UART_init+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <UART_init+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
	/* Activating double speed mode */
	SET_BIT(UCSRA_R, U2X);
     e64:	ab e2       	ldi	r26, 0x2B	; 43
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	eb e2       	ldi	r30, 0x2B	; 43
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	8c 93       	st	X, r24

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3c 83       	std	Y+4, r19	; 0x04
     e7e:	2b 83       	std	Y+3, r18	; 0x03
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	f1 f0       	breq	.+60     	; 0xec6 <UART_init+0x72>
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	69 f1       	breq	.+90     	; 0xeee <UART_init+0x9a>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	09 f0       	breq	.+2      	; 0xe9e <UART_init+0x4a>
     e9c:	49 c0       	rjmp	.+146    	; 0xf30 <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB_R, TXEN);
     e9e:	aa e2       	ldi	r26, 0x2A	; 42
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e2       	ldi	r30, 0x2A	; 42
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	85 81       	ldd	r24, Z+5	; 0x05
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	e9 f5       	brne	.+122    	; 0xf30 <UART_init+0xdc>
			SET_BIT(UCSRB_R, TXCIE);
     eb6:	aa e2       	ldi	r26, 0x2A	; 42
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e2       	ldi	r30, 0x2A	; 42
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 64       	ori	r24, 0x40	; 64
     ec2:	8c 93       	st	X, r24
     ec4:	35 c0       	rjmp	.+106    	; 0xf30 <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB_R, RXEN);
     ec6:	aa e2       	ldi	r26, 0x2A	; 42
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e2       	ldi	r30, 0x2A	; 42
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 61       	ori	r24, 0x10	; 16
     ed2:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     ed4:	e9 81       	ldd	r30, Y+1	; 0x01
     ed6:	fa 81       	ldd	r31, Y+2	; 0x02
     ed8:	85 81       	ldd	r24, Z+5	; 0x05
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	49 f5       	brne	.+82     	; 0xf30 <UART_init+0xdc>
			SET_BIT(UCSRB_R, RXCIE);
     ede:	aa e2       	ldi	r26, 0x2A	; 42
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e2       	ldi	r30, 0x2A	; 42
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	8c 93       	st	X, r24
     eec:	21 c0       	rjmp	.+66     	; 0xf30 <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB_R, TXEN);
     eee:	aa e2       	ldi	r26, 0x2A	; 42
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e2       	ldi	r30, 0x2A	; 42
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	8c 93       	st	X, r24
		SET_BIT(UCSRB_R, RXEN);
     efc:	aa e2       	ldi	r26, 0x2A	; 42
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e2       	ldi	r30, 0x2A	; 42
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	85 81       	ldd	r24, Z+5	; 0x05
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	71 f4       	brne	.+28     	; 0xf30 <UART_init+0xdc>
		{
			SET_BIT(UCSRB_R, TXCIE);
     f14:	aa e2       	ldi	r26, 0x2A	; 42
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e2       	ldi	r30, 0x2A	; 42
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 64       	ori	r24, 0x40	; 64
     f20:	8c 93       	st	X, r24
			SET_BIT(UCSRB_R, RXCIE);
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	8c 93       	st	X, r24
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB_R = (UCSRB_R & 0xFB) | (ConfigPtr->charSize & 0x04);
     f30:	aa e2       	ldi	r26, 0x2A	; 42
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e2       	ldi	r30, 0x2A	; 42
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	98 2f       	mov	r25, r24
     f3c:	9b 7f       	andi	r25, 0xFB	; 251
     f3e:	e9 81       	ldd	r30, Y+1	; 0x01
     f40:	fa 81       	ldd	r31, Y+2	; 0x02
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	84 70       	andi	r24, 0x04	; 4
     f46:	89 2b       	or	r24, r25
     f48:	8c 93       	st	X, r24

	UCSRC_R |= ConfigPtr->mode | ((ConfigPtr->charSize & 0x03) << UCSZ0) |
     f4a:	a0 e4       	ldi	r26, 0x40	; 64
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e0 e4       	ldi	r30, 0x40	; 64
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	38 2f       	mov	r19, r24
     f56:	e9 81       	ldd	r30, Y+1	; 0x01
     f58:	fa 81       	ldd	r31, Y+2	; 0x02
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	e9 81       	ldd	r30, Y+1	; 0x01
     f60:	fa 81       	ldd	r31, Y+2	; 0x02
     f62:	82 81       	ldd	r24, Z+2	; 0x02
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	83 70       	andi	r24, 0x03	; 3
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 2b       	or	r24, r18
     f72:	98 2f       	mov	r25, r24
     f74:	90 68       	ori	r25, 0x80	; 128
     f76:	e9 81       	ldd	r30, Y+1	; 0x01
     f78:	fa 81       	ldd	r31, Y+2	; 0x02
     f7a:	83 81       	ldd	r24, Z+3	; 0x03
     f7c:	98 2b       	or	r25, r24
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	84 81       	ldd	r24, Z+4	; 0x04
     f84:	89 2b       	or	r24, r25
     f86:	83 2b       	or	r24, r19
     f88:	8c 93       	st	X, r24
			(1 << URSEL) | ConfigPtr->parityMode | ConfigPtr->stopBits;

	/* Choosing the baud rate of the process */
	UBRRH_R = BAUDPRESCALE >> 8;
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	10 82       	st	Z, r1
	UBRRL_R = BAUDPRESCALE;
     f90:	e9 e2       	ldi	r30, 0x29	; 41
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8f ec       	ldi	r24, 0xCF	; 207
     f96:	80 83       	st	Z, r24
}
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <UART_deInit>:

void UART_deInit(void)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	UCSRA_R = 0x20;
     fae:	eb e2       	ldi	r30, 0x2B	; 43
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 e2       	ldi	r24, 0x20	; 32
     fb4:	80 83       	st	Z, r24
	UCSRB_R = 0x00;
     fb6:	ea e2       	ldi	r30, 0x2A	; 42
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	10 82       	st	Z, r1
	UCSRC_R = 0x06;
     fbc:	e0 e4       	ldi	r30, 0x40	; 64
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	80 83       	st	Z, r24
	UBRRL_R = 0x00;
     fc4:	e9 e2       	ldi	r30, 0x29	; 41
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	10 82       	st	Z, r1
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <UART_transmit>:

void UART_transmit(const uint8_t data)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
	/* busy-waiting the UDRE bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB_R, TXCIE))
     fdc:	ea e2       	ldi	r30, 0x2A	; 42
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 74       	andi	r24, 0x40	; 64
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	49 f4       	brne	.+18     	; 0x1000 <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA_R, UDRE));
     fee:	eb e2       	ldi	r30, 0x2B	; 43
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	80 72       	andi	r24, 0x20	; 32
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	b9 f3       	breq	.-18     	; 0xfee <UART_transmit+0x1e>
	/* sending the data */
	UDR = data;
    1000:	ec e2       	ldi	r30, 0x2C	; 44
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	80 83       	st	Z, r24
}
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <UART_receive>:

uint8_t UART_receive(void)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the RXC bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB_R, RXCIE))
    1018:	ea e2       	ldi	r30, 0x2A	; 42
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	88 23       	and	r24, r24
    1020:	2c f0       	brlt	.+10     	; 0x102c <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA_R, RXC));
    1022:	eb e2       	ldi	r30, 0x2B	; 43
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 23       	and	r24, r24
    102a:	dc f7       	brge	.-10     	; 0x1022 <UART_receive+0x12>
	/* read the received data */
	return UDR;
    102c:	ec e2       	ldi	r30, 0x2C	; 44
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <UART_Send_String>:

void UART_Send_String(char* str)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <UART_Send_String+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <UART_Send_String+0x8>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t index = 0;
    1048:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t data = 0;
    104a:	19 82       	std	Y+1, r1	; 0x01
    104c:	10 c0       	rjmp	.+32     	; 0x106e <UART_Send_String+0x36>

	while(str[index])
	{
		data=str[index++];
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	80 81       	ld	r24, Z
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	8a 83       	std	Y+2, r24	; 0x02
		UART_transmit(data);
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <UART_transmit>
void UART_Send_String(char* str)
{
	uint8_t index = 0;
	uint8_t data = 0;

	while(str[index])
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	80 81       	ld	r24, Z
    1080:	88 23       	and	r24, r24
    1082:	29 f7       	brne	.-54     	; 0x104e <UART_Send_String+0x16>
	{
		data=str[index++];
		UART_transmit(data);
	}
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <UART_receiveString>:


void UART_receiveString(sint8_t* Str)
{
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <UART_receiveString+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t i = 0;

	if(Str[i] != '#')
    10a4:	80 91 92 00 	lds	r24, 0x0092
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	fc 01       	movw	r30, r24
    10b2:	e2 0f       	add	r30, r18
    10b4:	f3 1f       	adc	r31, r19
    10b6:	80 81       	ld	r24, Z
    10b8:	83 32       	cpi	r24, 0x23	; 35
    10ba:	91 f0       	breq	.+36     	; 0x10e0 <UART_receiveString+0x4e>
	{
		Str[i] = UART_receive();
    10bc:	80 91 92 00 	lds	r24, 0x0092
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	8c 01       	movw	r16, r24
    10ca:	02 0f       	add	r16, r18
    10cc:	13 1f       	adc	r17, r19
    10ce:	0e 94 08 08 	call	0x1010	; 0x1010 <UART_receive>
    10d2:	f8 01       	movw	r30, r16
    10d4:	80 83       	st	Z, r24
		i++;
    10d6:	80 91 92 00 	lds	r24, 0x0092
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	80 93 92 00 	sts	0x0092, r24
	}

	Str[i] = '\0';
    10e0:	80 91 92 00 	lds	r24, 0x0092
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	fc 01       	movw	r30, r24
    10ee:	e2 0f       	add	r30, r18
    10f0:	f3 1f       	adc	r31, r19
    10f2:	10 82       	st	Z, r1
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <Uart_receivingApp>:
volatile uint8_t uart_counter = 0;

static uint8_t i = 0;

void Uart_receivingApp(void)
{
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	ReceivedString[i] = UART_receive();
    110e:	80 91 94 00 	lds	r24, 0x0094
    1112:	08 2f       	mov	r16, r24
    1114:	10 e0       	ldi	r17, 0x00	; 0
    1116:	0e 94 08 08 	call	0x1010	; 0x1010 <UART_receive>
    111a:	f8 01       	movw	r30, r16
    111c:	eb 56       	subi	r30, 0x6B	; 107
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 83       	st	Z, r24
	uart_counter++;
    1122:	80 91 93 00 	lds	r24, 0x0093
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 93 00 	sts	0x0093, r24
	i++;
    112c:	80 91 94 00 	lds	r24, 0x0094
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	80 93 94 00 	sts	0x0094, r24
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <main>:

int main(void)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	68 97       	sbiw	r28, 0x18	; 24
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
	uint8_t UART_status = 0;
    1154:	19 82       	std	Y+1, r1	; 0x01
			UART_RECEIVER_MODE,
			UART_INTERRUPT_ENABLED,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT
	};
    1156:	ce 01       	movw	r24, r28
    1158:	02 96       	adiw	r24, 0x02	; 2
    115a:	98 8b       	std	Y+16, r25	; 0x10
    115c:	8f 87       	std	Y+15, r24	; 0x0f
    115e:	e0 e7       	ldi	r30, 0x70	; 112
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	fa 8b       	std	Y+18, r31	; 0x12
    1164:	e9 8b       	std	Y+17, r30	; 0x11
    1166:	f6 e0       	ldi	r31, 0x06	; 6
    1168:	fb 8b       	std	Y+19, r31	; 0x13
    116a:	e9 89       	ldd	r30, Y+17	; 0x11
    116c:	fa 89       	ldd	r31, Y+18	; 0x12
    116e:	00 80       	ld	r0, Z
    1170:	89 89       	ldd	r24, Y+17	; 0x11
    1172:	9a 89       	ldd	r25, Y+18	; 0x12
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	9a 8b       	std	Y+18, r25	; 0x12
    1178:	89 8b       	std	Y+17, r24	; 0x11
    117a:	ef 85       	ldd	r30, Y+15	; 0x0f
    117c:	f8 89       	ldd	r31, Y+16	; 0x10
    117e:	00 82       	st	Z, r0
    1180:	8f 85       	ldd	r24, Y+15	; 0x0f
    1182:	98 89       	ldd	r25, Y+16	; 0x10
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	98 8b       	std	Y+16, r25	; 0x10
    1188:	8f 87       	std	Y+15, r24	; 0x0f
    118a:	9b 89       	ldd	r25, Y+19	; 0x13
    118c:	91 50       	subi	r25, 0x01	; 1
    118e:	9b 8b       	std	Y+19, r25	; 0x13
    1190:	eb 89       	ldd	r30, Y+19	; 0x13
    1192:	ee 23       	and	r30, r30
    1194:	51 f7       	brne	.-44     	; 0x116a <main+0x2a>

	strBcmConfig_t BCM_cfg = {
			BCM_SPI_ID,
			BCM_TRANSMIT
	};
    1196:	81 ea       	ldi	r24, 0xA1	; 161
    1198:	88 87       	std	Y+8, r24	; 0x08
    119a:	19 86       	std	Y+9, r1	; 0x09

	strBcmSendConfig_t BCM_startCfg = {
			BCM_SPI_ID,
			(uint8_t*)ReceivedString,
			ELEMENTS(20)
	};
    119c:	ce 01       	movw	r24, r28
    119e:	0a 96       	adiw	r24, 0x0a	; 10
    11a0:	9d 8b       	std	Y+21, r25	; 0x15
    11a2:	8c 8b       	std	Y+20, r24	; 0x14
    11a4:	eb e6       	ldi	r30, 0x6B	; 107
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	ff 8b       	std	Y+23, r31	; 0x17
    11aa:	ee 8b       	std	Y+22, r30	; 0x16
    11ac:	f5 e0       	ldi	r31, 0x05	; 5
    11ae:	f8 8f       	std	Y+24, r31	; 0x18
    11b0:	ee 89       	ldd	r30, Y+22	; 0x16
    11b2:	ff 89       	ldd	r31, Y+23	; 0x17
    11b4:	00 80       	ld	r0, Z
    11b6:	8e 89       	ldd	r24, Y+22	; 0x16
    11b8:	9f 89       	ldd	r25, Y+23	; 0x17
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	9f 8b       	std	Y+23, r25	; 0x17
    11be:	8e 8b       	std	Y+22, r24	; 0x16
    11c0:	ec 89       	ldd	r30, Y+20	; 0x14
    11c2:	fd 89       	ldd	r31, Y+21	; 0x15
    11c4:	00 82       	st	Z, r0
    11c6:	8c 89       	ldd	r24, Y+20	; 0x14
    11c8:	9d 89       	ldd	r25, Y+21	; 0x15
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	9d 8b       	std	Y+21, r25	; 0x15
    11ce:	8c 8b       	std	Y+20, r24	; 0x14
    11d0:	98 8d       	ldd	r25, Y+24	; 0x18
    11d2:	91 50       	subi	r25, 0x01	; 1
    11d4:	98 8f       	std	Y+24, r25	; 0x18
    11d6:	e8 8d       	ldd	r30, Y+24	; 0x18
    11d8:	ee 23       	and	r30, r30
    11da:	51 f7       	brne	.-44     	; 0x11b0 <main+0x70>


	BCM_Init(&BCM_cfg);
    11dc:	ce 01       	movw	r24, r28
    11de:	08 96       	adiw	r24, 0x08	; 8
    11e0:	0e 94 6e 00 	call	0xdc	; 0xdc <BCM_Init>

	UART_RXC_setCallBack(&Uart_receivingApp);
    11e4:	81 e8       	ldi	r24, 0x81	; 129
    11e6:	98 e0       	ldi	r25, 0x08	; 8
    11e8:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_RXC_setCallBack>

	UART_init(&UART_cfg);
    11ec:	ce 01       	movw	r24, r28
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	0e 94 2a 07 	call	0xe54	; 0xe54 <UART_init>

	sei();
    11f4:	78 94       	sei

	while(1)
	{
		if(uart_counter == ELEMENTS(20))
    11f6:	80 91 93 00 	lds	r24, 0x0093
    11fa:	88 31       	cpi	r24, 0x18	; 24
    11fc:	11 f4       	brne	.+4      	; 0x1202 <main+0xc2>
			UART_status = UART_DONE;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01

		if(UART_status == UART_DONE)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	b9 f7       	brne	.-18     	; 0x11f6 <main+0xb6>
		{
			if(uart_counter == ELEMENTS(20))
    1208:	80 91 93 00 	lds	r24, 0x0093
    120c:	88 31       	cpi	r24, 0x18	; 24
    120e:	49 f4       	brne	.+18     	; 0x1222 <main+0xe2>
			{
				BCM_Send(&BCM_startCfg);
    1210:	ce 01       	movw	r24, r28
    1212:	0a 96       	adiw	r24, 0x0a	; 10
    1214:	0e 94 dd 01 	call	0x3ba	; 0x3ba <BCM_Send>
				uart_counter++;
    1218:	80 91 93 00 	lds	r24, 0x0093
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 93 00 	sts	0x0093, r24
			}

			BCM_TxDispatch();
    1222:	0e 94 98 01 	call	0x330	; 0x330 <BCM_TxDispatch>
    1226:	e7 cf       	rjmp	.-50     	; 0x11f6 <main+0xb6>

00001228 <_exit>:
    1228:	f8 94       	cli

0000122a <__stop_program>:
    122a:	ff cf       	rjmp	.-2      	; 0x122a <__stop_program>
