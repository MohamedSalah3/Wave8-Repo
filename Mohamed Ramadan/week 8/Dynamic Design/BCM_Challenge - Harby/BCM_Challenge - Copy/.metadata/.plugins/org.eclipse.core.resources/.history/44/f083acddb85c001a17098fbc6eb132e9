
BCM_Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000e20  00000eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007e  0080007e  00000ed2  2**0
                  ALLOC
  3 .stab         00001bb4  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016bc  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_12>
  34:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_13>
  38:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_14>
  3c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 06 	call	0xdca	; 0xdca <main>
  8a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCM_Init>:
static volatile uint8_t gu8_BCM_UART_SM;
static volatile uint8_t gu8_BCM_SPI_SM;


EnmBCMError_t BCM_Init(const strBcmConfig_t* ConfigPtr)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	6e 97       	sbiw	r28, 0x1e	; 30
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	98 8b       	std	Y+16, r25	; 0x10
  a8:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t au8_Ret = E_OK;
  aa:	1d 82       	std	Y+5, r1	; 0x05
	PointerToCallBackFunction apf_UART_CallBackPtr = NULL;
  ac:	1c 82       	std	Y+4, r1	; 0x04
  ae:	1b 82       	std	Y+3, r1	; 0x03
	PointerToCallBackFunction apf_SPI_CallBackPtr = NULL;
  b0:	1a 82       	std	Y+2, r1	; 0x02
  b2:	19 82       	std	Y+1, r1	; 0x01
			UNDETERMINED,
			UART_EIGHT_BITS,
			UART_PARITY_DISABLED,
			UART_ONE_STOP_BIT,
			UART_INTERRUPT_ENABLED
	};
  b4:	9e 01       	movw	r18, r28
  b6:	2a 5f       	subi	r18, 0xFA	; 250
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	3e 8b       	std	Y+22, r19	; 0x16
  bc:	2d 8b       	std	Y+21, r18	; 0x15
  be:	88 e7       	ldi	r24, 0x78	; 120
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	98 8f       	std	Y+24, r25	; 0x18
  c4:	8f 8b       	std	Y+23, r24	; 0x17
  c6:	96 e0       	ldi	r25, 0x06	; 6
  c8:	99 8f       	std	Y+25, r25	; 0x19
  ca:	ef 89       	ldd	r30, Y+23	; 0x17
  cc:	f8 8d       	ldd	r31, Y+24	; 0x18
  ce:	00 80       	ld	r0, Z
  d0:	2f 89       	ldd	r18, Y+23	; 0x17
  d2:	38 8d       	ldd	r19, Y+24	; 0x18
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	38 8f       	std	Y+24, r19	; 0x18
  da:	2f 8b       	std	Y+23, r18	; 0x17
  dc:	ed 89       	ldd	r30, Y+21	; 0x15
  de:	fe 89       	ldd	r31, Y+22	; 0x16
  e0:	00 82       	st	Z, r0
  e2:	2d 89       	ldd	r18, Y+21	; 0x15
  e4:	3e 89       	ldd	r19, Y+22	; 0x16
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	3e 8b       	std	Y+22, r19	; 0x16
  ec:	2d 8b       	std	Y+21, r18	; 0x15
  ee:	39 8d       	ldd	r19, Y+25	; 0x19
  f0:	31 50       	subi	r19, 0x01	; 1
  f2:	39 8f       	std	Y+25, r19	; 0x19
  f4:	89 8d       	ldd	r24, Y+25	; 0x19
  f6:	88 23       	and	r24, r24
  f8:	41 f7       	brne	.-48     	; 0xca <BCM_Init+0x38>

	SPI_ConfigType SPI_cfg = {
			UNDETERMINED,
			SPI_INTERRUPT_ENABLED,
			SPI_F_OSC_4
	};
  fa:	fe 01       	movw	r30, r28
  fc:	3c 96       	adiw	r30, 0x0c	; 12
  fe:	fb 8f       	std	Y+27, r31	; 0x1b
 100:	ea 8f       	std	Y+26, r30	; 0x1a
 102:	25 e7       	ldi	r18, 0x75	; 117
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	3d 8f       	std	Y+29, r19	; 0x1d
 108:	2c 8f       	std	Y+28, r18	; 0x1c
 10a:	33 e0       	ldi	r19, 0x03	; 3
 10c:	3e 8f       	std	Y+30, r19	; 0x1e
 10e:	ec 8d       	ldd	r30, Y+28	; 0x1c
 110:	fd 8d       	ldd	r31, Y+29	; 0x1d
 112:	00 80       	ld	r0, Z
 114:	2c 8d       	ldd	r18, Y+28	; 0x1c
 116:	3d 8d       	ldd	r19, Y+29	; 0x1d
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	3d 8f       	std	Y+29, r19	; 0x1d
 11e:	2c 8f       	std	Y+28, r18	; 0x1c
 120:	ea 8d       	ldd	r30, Y+26	; 0x1a
 122:	fb 8d       	ldd	r31, Y+27	; 0x1b
 124:	00 82       	st	Z, r0
 126:	2a 8d       	ldd	r18, Y+26	; 0x1a
 128:	3b 8d       	ldd	r19, Y+27	; 0x1b
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	3b 8f       	std	Y+27, r19	; 0x1b
 130:	2a 8f       	std	Y+26, r18	; 0x1a
 132:	3e 8d       	ldd	r19, Y+30	; 0x1e
 134:	31 50       	subi	r19, 0x01	; 1
 136:	3e 8f       	std	Y+30, r19	; 0x1e
 138:	8e 8d       	ldd	r24, Y+30	; 0x1e
 13a:	88 23       	and	r24, r24
 13c:	41 f7       	brne	.-48     	; 0x10e <BCM_Init+0x7c>

	switch(ConfigPtr->BCM_DataDirection)
 13e:	ef 85       	ldd	r30, Y+15	; 0x0f
 140:	f8 89       	ldd	r31, Y+16	; 0x10
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	fc 8b       	std	Y+20, r31	; 0x14
 14a:	eb 8b       	std	Y+19, r30	; 0x13
 14c:	2b 89       	ldd	r18, Y+19	; 0x13
 14e:	3c 89       	ldd	r19, Y+20	; 0x14
 150:	21 30       	cpi	r18, 0x01	; 1
 152:	31 05       	cpc	r19, r1
 154:	a9 f0       	breq	.+42     	; 0x180 <BCM_Init+0xee>
 156:	8b 89       	ldd	r24, Y+19	; 0x13
 158:	9c 89       	ldd	r25, Y+20	; 0x14
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	91 05       	cpc	r25, r1
 15e:	e1 f0       	breq	.+56     	; 0x198 <BCM_Init+0x106>
 160:	eb 89       	ldd	r30, Y+19	; 0x13
 162:	fc 89       	ldd	r31, Y+20	; 0x14
 164:	30 97       	sbiw	r30, 0x00	; 0
 166:	d9 f4       	brne	.+54     	; 0x19e <BCM_Init+0x10c>
	{
	case BCM_TRANSMIT:
		apf_UART_CallBackPtr = UART_TXC_setCallBack;
 168:	83 e4       	ldi	r24, 0x43	; 67
 16a:	95 e0       	ldi	r25, 0x05	; 5
 16c:	9c 83       	std	Y+4, r25	; 0x04
 16e:	8b 83       	std	Y+3, r24	; 0x03
		apf_SPI_CallBackPtr = SPI_setCallBack;
 170:	8c e6       	ldi	r24, 0x6C	; 108
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	9a 83       	std	Y+2, r25	; 0x02
 176:	89 83       	std	Y+1, r24	; 0x01
		UART_cfg.communicationMode = UART_SENDER_MODE;
 178:	1f 82       	std	Y+7, r1	; 0x07
		SPI_cfg.MasterSlaveSelect = SPI_MASTER;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	8c 87       	std	Y+12, r24	; 0x0c
 17e:	11 c0       	rjmp	.+34     	; 0x1a2 <BCM_Init+0x110>
		break;
	case BCM_RECEIVE:
		apf_UART_CallBackPtr = UART_RXC_setCallBack;
 180:	85 e5       	ldi	r24, 0x55	; 85
 182:	95 e0       	ldi	r25, 0x05	; 5
 184:	9c 83       	std	Y+4, r25	; 0x04
 186:	8b 83       	std	Y+3, r24	; 0x03
		apf_SPI_CallBackPtr = SPI_setCallBack;
 188:	8c e6       	ldi	r24, 0x6C	; 108
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	89 83       	std	Y+1, r24	; 0x01
		UART_cfg.communicationMode = UART_RECEIVER_MODE;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8f 83       	std	Y+7, r24	; 0x07
		SPI_cfg.MasterSlaveSelect = SPI_SLAVE;
 194:	1c 86       	std	Y+12, r1	; 0x0c
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <BCM_Init+0x110>
		break;
	case BCM_TRANSMIT_RECEIVE:
		UART_cfg.communicationMode = UART_SENDER_RECEIVER_MODE;
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	8f 83       	std	Y+7, r24	; 0x07
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <BCM_Init+0x110>
		break;
	default:
		au8_Ret = E_NOK;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8d 83       	std	Y+5, r24	; 0x05
		break;
	}

	switch(ConfigPtr->BCM_ProtocolID)
 1a2:	ef 85       	ldd	r30, Y+15	; 0x0f
 1a4:	f8 89       	ldd	r31, Y+16	; 0x10
 1a6:	80 81       	ld	r24, Z
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	3a 8b       	std	Y+18, r19	; 0x12
 1ae:	29 8b       	std	Y+17, r18	; 0x11
 1b0:	89 89       	ldd	r24, Y+17	; 0x11
 1b2:	9a 89       	ldd	r25, Y+18	; 0x12
 1b4:	80 3a       	cpi	r24, 0xA0	; 160
 1b6:	91 05       	cpc	r25, r1
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <BCM_Init+0x134>
 1ba:	e9 89       	ldd	r30, Y+17	; 0x11
 1bc:	fa 89       	ldd	r31, Y+18	; 0x12
 1be:	e1 3a       	cpi	r30, 0xA1	; 161
 1c0:	f1 05       	cpc	r31, r1
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <BCM_Init+0x152>
 1c4:	1e c0       	rjmp	.+60     	; 0x202 <BCM_Init+0x170>
	{
	case BCM_UART_ID:
		apf_UART_CallBackPtr(ConfigPtr->BCM_Cbk_ptr);
 1c6:	ef 85       	ldd	r30, Y+15	; 0x0f
 1c8:	f8 89       	ldd	r31, Y+16	; 0x10
 1ca:	82 81       	ldd	r24, Z+2	; 0x02
 1cc:	93 81       	ldd	r25, Z+3	; 0x03
 1ce:	eb 81       	ldd	r30, Y+3	; 0x03
 1d0:	fc 81       	ldd	r31, Y+4	; 0x04
 1d2:	09 95       	icall
		UART_init(&UART_cfg);
 1d4:	ce 01       	movw	r24, r28
 1d6:	06 96       	adiw	r24, 0x06	; 6
 1d8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <UART_init>
		gu8_BCM_UART_SM = (uint8_t)BCM_IDLE;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 80 00 	sts	0x0080, r24
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <BCM_Init+0x174>
		break;
	case BCM_SPI_ID:
		apf_SPI_CallBackPtr(ConfigPtr->BCM_Cbk_ptr);
 1e4:	ef 85       	ldd	r30, Y+15	; 0x0f
 1e6:	f8 89       	ldd	r31, Y+16	; 0x10
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	93 81       	ldd	r25, Z+3	; 0x03
 1ec:	e9 81       	ldd	r30, Y+1	; 0x01
 1ee:	fa 81       	ldd	r31, Y+2	; 0x02
 1f0:	09 95       	icall
		SPI_init(&SPI_cfg);
 1f2:	ce 01       	movw	r24, r28
 1f4:	0c 96       	adiw	r24, 0x0c	; 12
 1f6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <SPI_init>
		gu8_BCM_SPI_SM = (uint8_t)BCM_IDLE;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 81 00 	sts	0x0081, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <BCM_Init+0x174>
		break;
	default:
		au8_Ret = E_NOK;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	8d 83       	std	Y+5, r24	; 0x05
		break;
	}

	return au8_Ret;
 206:	8d 81       	ldd	r24, Y+5	; 0x05
}
 208:	6e 96       	adiw	r28, 0x1e	; 30
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	08 95       	ret

0000021a <BCM_DeInit>:

EnmBCMError_t BCM_DeInit(uint8_t BCM_ProtocolID)
{
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	00 d0       	rcall	.+0      	; 0x220 <BCM_DeInit+0x6>
 220:	00 d0       	rcall	.+0      	; 0x222 <BCM_DeInit+0x8>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
 228:	19 82       	std	Y+1, r1	; 0x01

	switch(BCM_ProtocolID)
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	3c 83       	std	Y+4, r19	; 0x04
 232:	2b 83       	std	Y+3, r18	; 0x03
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	9c 81       	ldd	r25, Y+4	; 0x04
 238:	80 3a       	cpi	r24, 0xA0	; 160
 23a:	91 05       	cpc	r25, r1
 23c:	31 f0       	breq	.+12     	; 0x24a <BCM_DeInit+0x30>
 23e:	2b 81       	ldd	r18, Y+3	; 0x03
 240:	3c 81       	ldd	r19, Y+4	; 0x04
 242:	21 3a       	cpi	r18, 0xA1	; 161
 244:	31 05       	cpc	r19, r1
 246:	71 f0       	breq	.+28     	; 0x264 <BCM_DeInit+0x4a>
 248:	16 c0       	rjmp	.+44     	; 0x276 <BCM_DeInit+0x5c>
	{
	case BCM_UART_ID:
		UART_deInit();
 24a:	0e 94 22 06 	call	0xc44	; 0xc44 <UART_deInit>
		UART_RXC_setCallBack(NULL);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 55 05 	call	0xaaa	; 0xaaa <UART_RXC_setCallBack>
		UART_TXC_setCallBack(NULL);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_TXC_setCallBack>
		gu8_BCM_UART_SM = (uint8_t)BCM_UNINITIALIZED;
 25e:	10 92 80 00 	sts	0x0080, r1
 262:	0b c0       	rjmp	.+22     	; 0x27a <BCM_DeInit+0x60>
		break;
	case BCM_SPI_ID:
		SPI_deInit();
 264:	0e 94 5f 04 	call	0x8be	; 0x8be <SPI_deInit>
		SPI_setCallBack(NULL);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <SPI_setCallBack>
		gu8_BCM_SPI_SM = (uint8_t)BCM_UNINITIALIZED;
 270:	10 92 81 00 	sts	0x0081, r1
 274:	02 c0       	rjmp	.+4      	; 0x27a <BCM_DeInit+0x60>
		break;
	default:
		au8_Ret = E_NOK;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return E_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
}
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <BCM_RxDispatch>:

EnmBCMError_t BCM_RxDispatch(void)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62


	return E_OK;
 292:	80 e0       	ldi	r24, 0x00	; 0
}
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	08 95       	ret

0000029a <BCM_TxDispatch>:

EnmBCMError_t BCM_TxDispatch(void)
{
 29a:	df 93       	push	r29
 29c:	cf 93       	push	r28
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62


	return E_OK;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
}
 2a4:	cf 91       	pop	r28
 2a6:	df 91       	pop	r29
 2a8:	08 95       	ret

000002aa <BCM_Send>:

EnmBCMError_t BCM_Send(strBcmStartConfig_t* ConfigPtr)
{
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	27 97       	sbiw	r28, 0x07	; 7
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	9d 83       	std	Y+5, r25	; 0x05
 2c0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t au8_Ret = E_OK;
 2c2:	1b 82       	std	Y+3, r1	; 0x03
	static uint8_t au8_counter = 0;
	PointerToSenderFunction apf_SenderFunction = NULL;
 2c4:	1a 82       	std	Y+2, r1	; 0x02
 2c6:	19 82       	std	Y+1, r1	; 0x01

	switch(ConfigPtr->BCM_ProtocolID)
 2c8:	ec 81       	ldd	r30, Y+4	; 0x04
 2ca:	fd 81       	ldd	r31, Y+5	; 0x05
 2cc:	80 81       	ld	r24, Z
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	3f 83       	std	Y+7, r19	; 0x07
 2d4:	2e 83       	std	Y+6, r18	; 0x06
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	9f 81       	ldd	r25, Y+7	; 0x07
 2da:	80 3a       	cpi	r24, 0xA0	; 160
 2dc:	91 05       	cpc	r25, r1
 2de:	31 f0       	breq	.+12     	; 0x2ec <BCM_Send+0x42>
 2e0:	2e 81       	ldd	r18, Y+6	; 0x06
 2e2:	3f 81       	ldd	r19, Y+7	; 0x07
 2e4:	21 3a       	cpi	r18, 0xA1	; 161
 2e6:	31 05       	cpc	r19, r1
 2e8:	49 f0       	breq	.+18     	; 0x2fc <BCM_Send+0x52>
 2ea:	10 c0       	rjmp	.+32     	; 0x30c <BCM_Send+0x62>
	{
	case BCM_UART_ID:
		apf_SenderFunction = UART_transmit;
 2ec:	87 e3       	ldi	r24, 0x37	; 55
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	89 83       	std	Y+1, r24	; 0x01
		gu8_BCM_UART_SM = BCM_SENDING_BYTE;
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	80 93 80 00 	sts	0x0080, r24
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <BCM_Send+0x66>
		break;
	case BCM_SPI_ID:
		apf_SenderFunction = SPI_sendByte;
 2fc:	8e e7       	ldi	r24, 0x7E	; 126
 2fe:	94 e0       	ldi	r25, 0x04	; 4
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
		gu8_BCM_SPI_SM = BCM_SENDING_BYTE;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 81 00 	sts	0x0081, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <BCM_Send+0x66>
		break;
	default:
		au8_Ret = E_NOK;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_counter < ConfigPtr->BCM_ArraySize)
 310:	ec 81       	ldd	r30, Y+4	; 0x04
 312:	fd 81       	ldd	r31, Y+5	; 0x05
 314:	93 81       	ldd	r25, Z+3	; 0x03
 316:	80 91 7e 00 	lds	r24, 0x007E
 31a:	89 17       	cp	r24, r25
 31c:	a0 f4       	brcc	.+40     	; 0x346 <BCM_Send+0x9c>
	{
		apf_SenderFunction(ConfigPtr->BCM_ArrayStartAddress[au8_counter]);
 31e:	ec 81       	ldd	r30, Y+4	; 0x04
 320:	fd 81       	ldd	r31, Y+5	; 0x05
 322:	21 81       	ldd	r18, Z+1	; 0x01
 324:	32 81       	ldd	r19, Z+2	; 0x02
 326:	80 91 7e 00 	lds	r24, 0x007E
 32a:	88 2f       	mov	r24, r24
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	e8 0f       	add	r30, r24
 332:	f9 1f       	adc	r31, r25
 334:	80 81       	ld	r24, Z
 336:	e9 81       	ldd	r30, Y+1	; 0x01
 338:	fa 81       	ldd	r31, Y+2	; 0x02
 33a:	09 95       	icall
		au8_counter++;
 33c:	80 91 7e 00 	lds	r24, 0x007E
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 7e 00 	sts	0x007E, r24
	}

	return E_OK;
 346:	80 e0       	ldi	r24, 0x00	; 0
}
 348:	27 96       	adiw	r28, 0x07	; 7
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	cf 91       	pop	r28
 356:	df 91       	pop	r29
 358:	08 95       	ret

0000035a <BCM_Receive>:

EnmBCMError_t BCM_Receive(strBcmStartConfig_t* ConfigPtr)
{
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	27 97       	sbiw	r28, 0x07	; 7
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	9d 83       	std	Y+5, r25	; 0x05
 374:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t au8_Ret = E_OK;
 376:	1b 82       	std	Y+3, r1	; 0x03
	static uint8_t au8_counter = 0;
	PointerToReceiverFunction apf_ReceiverFunction = NULL;
 378:	1a 82       	std	Y+2, r1	; 0x02
 37a:	19 82       	std	Y+1, r1	; 0x01

	switch(ConfigPtr->BCM_ProtocolID)
 37c:	ec 81       	ldd	r30, Y+4	; 0x04
 37e:	fd 81       	ldd	r31, Y+5	; 0x05
 380:	80 81       	ld	r24, Z
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	3f 83       	std	Y+7, r19	; 0x07
 388:	2e 83       	std	Y+6, r18	; 0x06
 38a:	8e 81       	ldd	r24, Y+6	; 0x06
 38c:	9f 81       	ldd	r25, Y+7	; 0x07
 38e:	80 3a       	cpi	r24, 0xA0	; 160
 390:	91 05       	cpc	r25, r1
 392:	31 f0       	breq	.+12     	; 0x3a0 <BCM_Receive+0x46>
 394:	ee 81       	ldd	r30, Y+6	; 0x06
 396:	ff 81       	ldd	r31, Y+7	; 0x07
 398:	e1 3a       	cpi	r30, 0xA1	; 161
 39a:	f1 05       	cpc	r31, r1
 39c:	49 f0       	breq	.+18     	; 0x3b0 <BCM_Receive+0x56>
 39e:	10 c0       	rjmp	.+32     	; 0x3c0 <BCM_Receive+0x66>
	{
	case BCM_UART_ID:
		apf_ReceiverFunction = UART_receive;
 3a0:	87 e5       	ldi	r24, 0x57	; 87
 3a2:	96 e0       	ldi	r25, 0x06	; 6
 3a4:	9a 83       	std	Y+2, r25	; 0x02
 3a6:	89 83       	std	Y+1, r24	; 0x01
		gu8_BCM_UART_SM = BCM_SENDING_BYTE;
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	80 93 80 00 	sts	0x0080, r24
 3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <BCM_Receive+0x6a>
		break;
	case BCM_SPI_ID:
		apf_ReceiverFunction = SPI_receiveByte;
 3b0:	86 e9       	ldi	r24, 0x96	; 150
 3b2:	94 e0       	ldi	r25, 0x04	; 4
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
		gu8_BCM_SPI_SM = BCM_SENDING_BYTE;
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 93 81 00 	sts	0x0081, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <BCM_Receive+0x6a>
		break;
	default:
		au8_Ret = E_NOK;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_counter < ConfigPtr->BCM_ArraySize)
 3c4:	ec 81       	ldd	r30, Y+4	; 0x04
 3c6:	fd 81       	ldd	r31, Y+5	; 0x05
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	80 91 7f 00 	lds	r24, 0x007F
 3ce:	89 17       	cp	r24, r25
 3d0:	a8 f4       	brcc	.+42     	; 0x3fc <BCM_Receive+0xa2>
	{
		ConfigPtr->BCM_ArrayStartAddress[au8_counter] = apf_ReceiverFunction();
 3d2:	ec 81       	ldd	r30, Y+4	; 0x04
 3d4:	fd 81       	ldd	r31, Y+5	; 0x05
 3d6:	21 81       	ldd	r18, Z+1	; 0x01
 3d8:	32 81       	ldd	r19, Z+2	; 0x02
 3da:	80 91 7f 00 	lds	r24, 0x007F
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	89 01       	movw	r16, r18
 3e4:	08 0f       	add	r16, r24
 3e6:	19 1f       	adc	r17, r25
 3e8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ea:	fa 81       	ldd	r31, Y+2	; 0x02
 3ec:	09 95       	icall
 3ee:	f8 01       	movw	r30, r16
 3f0:	80 83       	st	Z, r24
		au8_counter++;
 3f2:	80 91 7f 00 	lds	r24, 0x007F
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 7f 00 	sts	0x007F, r24
	}

	return E_OK;
 3fc:	80 e0       	ldi	r24, 0x00	; 0
}
 3fe:	27 96       	adiw	r28, 0x07	; 7
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <DIO_init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	29 97       	sbiw	r28, 0x09	; 9
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	9d 83       	std	Y+5, r25	; 0x05
 42a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t au8_Ret = E_OK;
 42c:	1b 82       	std	Y+3, r1	; 0x03
	/* A local pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDirectionPointer = NULL;
 42e:	1a 82       	std	Y+2, r1	; 0x02
 430:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its direction */
	switch(DIO_info->GPIO)
 432:	ec 81       	ldd	r30, Y+4	; 0x04
 434:	fd 81       	ldd	r31, Y+5	; 0x05
 436:	80 81       	ld	r24, Z
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	39 87       	std	Y+9, r19	; 0x09
 43e:	28 87       	std	Y+8, r18	; 0x08
 440:	88 85       	ldd	r24, Y+8	; 0x08
 442:	99 85       	ldd	r25, Y+9	; 0x09
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	91 05       	cpc	r25, r1
 448:	d1 f0       	breq	.+52     	; 0x47e <DIO_init+0x6a>
 44a:	28 85       	ldd	r18, Y+8	; 0x08
 44c:	39 85       	ldd	r19, Y+9	; 0x09
 44e:	22 30       	cpi	r18, 0x02	; 2
 450:	31 05       	cpc	r19, r1
 452:	2c f4       	brge	.+10     	; 0x45e <DIO_init+0x4a>
 454:	88 85       	ldd	r24, Y+8	; 0x08
 456:	99 85       	ldd	r25, Y+9	; 0x09
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	61 f0       	breq	.+24     	; 0x474 <DIO_init+0x60>
 45c:	1f c0       	rjmp	.+62     	; 0x49c <DIO_init+0x88>
 45e:	28 85       	ldd	r18, Y+8	; 0x08
 460:	39 85       	ldd	r19, Y+9	; 0x09
 462:	22 30       	cpi	r18, 0x02	; 2
 464:	31 05       	cpc	r19, r1
 466:	81 f0       	breq	.+32     	; 0x488 <DIO_init+0x74>
 468:	88 85       	ldd	r24, Y+8	; 0x08
 46a:	99 85       	ldd	r25, Y+9	; 0x09
 46c:	83 30       	cpi	r24, 0x03	; 3
 46e:	91 05       	cpc	r25, r1
 470:	81 f0       	breq	.+32     	; 0x492 <DIO_init+0x7e>
 472:	14 c0       	rjmp	.+40     	; 0x49c <DIO_init+0x88>
	{
	case GPIOA:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTA_DIR);
 474:	8a e3       	ldi	r24, 0x3A	; 58
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	9a 83       	std	Y+2, r25	; 0x02
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	11 c0       	rjmp	.+34     	; 0x4a0 <DIO_init+0x8c>
		break;
	case GPIOB:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTB_DIR);
 47e:	87 e3       	ldi	r24, 0x37	; 55
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	0c c0       	rjmp	.+24     	; 0x4a0 <DIO_init+0x8c>
		break;
	case GPIOC:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTC_DIR);
 488:	84 e3       	ldi	r24, 0x34	; 52
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	9a 83       	std	Y+2, r25	; 0x02
 48e:	89 83       	std	Y+1, r24	; 0x01
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <DIO_init+0x8c>
		break;
	case GPIOD:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTD_DIR);
 492:	81 e3       	ldi	r24, 0x31	; 49
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	9a 83       	std	Y+2, r25	; 0x02
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_init+0x8c>
		break;
	default:
		au8_Ret = E_NOK;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_Ret == E_OK)
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	88 23       	and	r24, r24
 4a4:	59 f5       	brne	.+86     	; 0x4fc <DIO_init+0xe8>
	{
		/* A switch case to determine which direction to be configured in the port */
		switch(DIO_info->dir)
 4a6:	ec 81       	ldd	r30, Y+4	; 0x04
 4a8:	fd 81       	ldd	r31, Y+5	; 0x05
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	3f 83       	std	Y+7, r19	; 0x07
 4b2:	2e 83       	std	Y+6, r18	; 0x06
 4b4:	8e 81       	ldd	r24, Y+6	; 0x06
 4b6:	9f 81       	ldd	r25, Y+7	; 0x07
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	31 f0       	breq	.+12     	; 0x4c8 <DIO_init+0xb4>
 4bc:	2e 81       	ldd	r18, Y+6	; 0x06
 4be:	3f 81       	ldd	r19, Y+7	; 0x07
 4c0:	2f 3f       	cpi	r18, 0xFF	; 255
 4c2:	31 05       	cpc	r19, r1
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <DIO_init+0xce>
 4c6:	18 c0       	rjmp	.+48     	; 0x4f8 <DIO_init+0xe4>
		{
		case INPUT:
			*pau8_gpioDirectionPointer &= ~(DIO_info->pins);
 4c8:	e9 81       	ldd	r30, Y+1	; 0x01
 4ca:	fa 81       	ldd	r31, Y+2	; 0x02
 4cc:	80 81       	ld	r24, Z
 4ce:	98 2f       	mov	r25, r24
 4d0:	ec 81       	ldd	r30, Y+4	; 0x04
 4d2:	fd 81       	ldd	r31, Y+5	; 0x05
 4d4:	81 81       	ldd	r24, Z+1	; 0x01
 4d6:	80 95       	com	r24
 4d8:	89 23       	and	r24, r25
 4da:	e9 81       	ldd	r30, Y+1	; 0x01
 4dc:	fa 81       	ldd	r31, Y+2	; 0x02
 4de:	80 83       	st	Z, r24
 4e0:	0d c0       	rjmp	.+26     	; 0x4fc <DIO_init+0xe8>
			break;
		case OUTPUT:
			*pau8_gpioDirectionPointer |= (DIO_info->pins);
 4e2:	e9 81       	ldd	r30, Y+1	; 0x01
 4e4:	fa 81       	ldd	r31, Y+2	; 0x02
 4e6:	90 81       	ld	r25, Z
 4e8:	ec 81       	ldd	r30, Y+4	; 0x04
 4ea:	fd 81       	ldd	r31, Y+5	; 0x05
 4ec:	81 81       	ldd	r24, Z+1	; 0x01
 4ee:	89 2b       	or	r24, r25
 4f0:	e9 81       	ldd	r30, Y+1	; 0x01
 4f2:	fa 81       	ldd	r31, Y+2	; 0x02
 4f4:	80 83       	st	Z, r24
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_init+0xe8>
			break;
		default:
			au8_Ret = E_NOK;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
	}

	return au8_Ret;
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
}
 4fe:	29 96       	adiw	r28, 0x09	; 9
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	cf 91       	pop	r28
 50c:	df 91       	pop	r29
 50e:	08 95       	ret

00000510 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
 510:	df 93       	push	r29
 512:	cf 93       	push	r28
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	2a 97       	sbiw	r28, 0x0a	; 10
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	8c 83       	std	Y+4, r24	; 0x04
 526:	6d 83       	std	Y+5, r22	; 0x05
 528:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t au8_Ret = E_OK;
 52a:	1b 82       	std	Y+3, r1	; 0x03
	/* A pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDataPointer = NULL;
 52c:	1a 82       	std	Y+2, r1	; 0x02
 52e:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its data */
	switch(GPIO)
 530:	8c 81       	ldd	r24, Y+4	; 0x04
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	3a 87       	std	Y+10, r19	; 0x0a
 538:	29 87       	std	Y+9, r18	; 0x09
 53a:	89 85       	ldd	r24, Y+9	; 0x09
 53c:	9a 85       	ldd	r25, Y+10	; 0x0a
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	91 05       	cpc	r25, r1
 542:	d1 f0       	breq	.+52     	; 0x578 <DIO_Write+0x68>
 544:	29 85       	ldd	r18, Y+9	; 0x09
 546:	3a 85       	ldd	r19, Y+10	; 0x0a
 548:	22 30       	cpi	r18, 0x02	; 2
 54a:	31 05       	cpc	r19, r1
 54c:	2c f4       	brge	.+10     	; 0x558 <DIO_Write+0x48>
 54e:	89 85       	ldd	r24, Y+9	; 0x09
 550:	9a 85       	ldd	r25, Y+10	; 0x0a
 552:	00 97       	sbiw	r24, 0x00	; 0
 554:	61 f0       	breq	.+24     	; 0x56e <DIO_Write+0x5e>
 556:	1f c0       	rjmp	.+62     	; 0x596 <DIO_Write+0x86>
 558:	29 85       	ldd	r18, Y+9	; 0x09
 55a:	3a 85       	ldd	r19, Y+10	; 0x0a
 55c:	22 30       	cpi	r18, 0x02	; 2
 55e:	31 05       	cpc	r19, r1
 560:	81 f0       	breq	.+32     	; 0x582 <DIO_Write+0x72>
 562:	89 85       	ldd	r24, Y+9	; 0x09
 564:	9a 85       	ldd	r25, Y+10	; 0x0a
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	91 05       	cpc	r25, r1
 56a:	81 f0       	breq	.+32     	; 0x58c <DIO_Write+0x7c>
 56c:	14 c0       	rjmp	.+40     	; 0x596 <DIO_Write+0x86>
	{
	case GPIOA:
		pau8_gpioDataPointer = (uint8_t*)(&PORTA_DATA);
 56e:	8b e3       	ldi	r24, 0x3B	; 59
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	9a 83       	std	Y+2, r25	; 0x02
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	11 c0       	rjmp	.+34     	; 0x59a <DIO_Write+0x8a>
		break;
	case GPIOB:
		pau8_gpioDataPointer = (uint8_t*)(&PORTB_DATA);
 578:	88 e3       	ldi	r24, 0x38	; 56
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	9a 83       	std	Y+2, r25	; 0x02
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	0c c0       	rjmp	.+24     	; 0x59a <DIO_Write+0x8a>
		break;
	case GPIOC:
		pau8_gpioDataPointer = (uint8_t*)(&PORTC_DATA);
 582:	85 e3       	ldi	r24, 0x35	; 53
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	9a 83       	std	Y+2, r25	; 0x02
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	07 c0       	rjmp	.+14     	; 0x59a <DIO_Write+0x8a>
		break;
	case GPIOD:
		pau8_gpioDataPointer = (uint8_t*)(&PORTD_DATA);
 58c:	82 e3       	ldi	r24, 0x32	; 50
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	9a 83       	std	Y+2, r25	; 0x02
 592:	89 83       	std	Y+1, r24	; 0x01
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_Write+0x8a>
		break;
	default:
		au8_Ret = E_NOK;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	if(au8_Ret == E_OK)
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	88 23       	and	r24, r24
 59e:	29 f5       	brne	.+74     	; 0x5ea <DIO_Write+0xda>
	{
		/* A switch case to determine which value to be configured in the port */
		switch(value)
 5a0:	8e 81       	ldd	r24, Y+6	; 0x06
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	38 87       	std	Y+8, r19	; 0x08
 5a8:	2f 83       	std	Y+7, r18	; 0x07
 5aa:	8f 81       	ldd	r24, Y+7	; 0x07
 5ac:	98 85       	ldd	r25, Y+8	; 0x08
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	31 f0       	breq	.+12     	; 0x5be <DIO_Write+0xae>
 5b2:	2f 81       	ldd	r18, Y+7	; 0x07
 5b4:	38 85       	ldd	r19, Y+8	; 0x08
 5b6:	2f 3f       	cpi	r18, 0xFF	; 255
 5b8:	31 05       	cpc	r19, r1
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <DIO_Write+0xc4>
 5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <DIO_Write+0xd6>
		{
		case LOW:
			*pau8_gpioDataPointer &= ~(pins);
 5be:	e9 81       	ldd	r30, Y+1	; 0x01
 5c0:	fa 81       	ldd	r31, Y+2	; 0x02
 5c2:	80 81       	ld	r24, Z
 5c4:	98 2f       	mov	r25, r24
 5c6:	8d 81       	ldd	r24, Y+5	; 0x05
 5c8:	80 95       	com	r24
 5ca:	89 23       	and	r24, r25
 5cc:	e9 81       	ldd	r30, Y+1	; 0x01
 5ce:	fa 81       	ldd	r31, Y+2	; 0x02
 5d0:	80 83       	st	Z, r24
 5d2:	0b c0       	rjmp	.+22     	; 0x5ea <DIO_Write+0xda>
			break;
		case HIGH:
			*pau8_gpioDataPointer |= (pins);
 5d4:	e9 81       	ldd	r30, Y+1	; 0x01
 5d6:	fa 81       	ldd	r31, Y+2	; 0x02
 5d8:	90 81       	ld	r25, Z
 5da:	8d 81       	ldd	r24, Y+5	; 0x05
 5dc:	89 2b       	or	r24, r25
 5de:	e9 81       	ldd	r30, Y+1	; 0x01
 5e0:	fa 81       	ldd	r31, Y+2	; 0x02
 5e2:	80 83       	st	Z, r24
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_Write+0xda>
			break;
		default:
			au8_Ret = E_NOK;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
	}

	return au8_Ret;
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5ec:	2a 96       	adiw	r28, 0x0a	; 10
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	de bf       	out	0x3e, r29	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	cd bf       	out	0x3d, r28	; 61
 5f8:	cf 91       	pop	r28
 5fa:	df 91       	pop	r29
 5fc:	08 95       	ret

000005fe <DIO_Read>:

ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t* data)
{
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	27 97       	sbiw	r28, 0x07	; 7
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	8a 83       	std	Y+2, r24	; 0x02
 614:	6b 83       	std	Y+3, r22	; 0x03
 616:	5d 83       	std	Y+5, r21	; 0x05
 618:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_Ret = E_OK;
 61a:	19 82       	std	Y+1, r1	; 0x01

	if(data != NULL)
 61c:	8c 81       	ldd	r24, Y+4	; 0x04
 61e:	9d 81       	ldd	r25, Y+5	; 0x05
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	09 f4       	brne	.+2      	; 0x626 <DIO_Read+0x28>
 624:	46 c0       	rjmp	.+140    	; 0x6b2 <DIO_Read+0xb4>
	{
		/* A switch case to determine which port will be read from */
		switch(GPIO)
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	3f 83       	std	Y+7, r19	; 0x07
 62e:	2e 83       	std	Y+6, r18	; 0x06
 630:	8e 81       	ldd	r24, Y+6	; 0x06
 632:	9f 81       	ldd	r25, Y+7	; 0x07
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	91 05       	cpc	r25, r1
 638:	f1 f0       	breq	.+60     	; 0x676 <DIO_Read+0x78>
 63a:	2e 81       	ldd	r18, Y+6	; 0x06
 63c:	3f 81       	ldd	r19, Y+7	; 0x07
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	31 05       	cpc	r19, r1
 642:	2c f4       	brge	.+10     	; 0x64e <DIO_Read+0x50>
 644:	8e 81       	ldd	r24, Y+6	; 0x06
 646:	9f 81       	ldd	r25, Y+7	; 0x07
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	61 f0       	breq	.+24     	; 0x664 <DIO_Read+0x66>
 64c:	2f c0       	rjmp	.+94     	; 0x6ac <DIO_Read+0xae>
 64e:	2e 81       	ldd	r18, Y+6	; 0x06
 650:	3f 81       	ldd	r19, Y+7	; 0x07
 652:	22 30       	cpi	r18, 0x02	; 2
 654:	31 05       	cpc	r19, r1
 656:	c1 f0       	breq	.+48     	; 0x688 <DIO_Read+0x8a>
 658:	8e 81       	ldd	r24, Y+6	; 0x06
 65a:	9f 81       	ldd	r25, Y+7	; 0x07
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	91 05       	cpc	r25, r1
 660:	e1 f0       	breq	.+56     	; 0x69a <DIO_Read+0x9c>
 662:	24 c0       	rjmp	.+72     	; 0x6ac <DIO_Read+0xae>
		{
		case GPIOA:
			*data = PORTA_PIN & pins;
 664:	e9 e3       	ldi	r30, 0x39	; 57
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	90 81       	ld	r25, Z
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	89 23       	and	r24, r25
 66e:	ec 81       	ldd	r30, Y+4	; 0x04
 670:	fd 81       	ldd	r31, Y+5	; 0x05
 672:	80 83       	st	Z, r24
 674:	20 c0       	rjmp	.+64     	; 0x6b6 <DIO_Read+0xb8>
			break;
		case GPIOB:
			*data = PORTB_PIN & pins;
 676:	e6 e3       	ldi	r30, 0x36	; 54
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	90 81       	ld	r25, Z
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	89 23       	and	r24, r25
 680:	ec 81       	ldd	r30, Y+4	; 0x04
 682:	fd 81       	ldd	r31, Y+5	; 0x05
 684:	80 83       	st	Z, r24
 686:	17 c0       	rjmp	.+46     	; 0x6b6 <DIO_Read+0xb8>
			break;
		case GPIOC:
			*data = PORTC_PIN & pins;
 688:	e3 e3       	ldi	r30, 0x33	; 51
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	90 81       	ld	r25, Z
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	89 23       	and	r24, r25
 692:	ec 81       	ldd	r30, Y+4	; 0x04
 694:	fd 81       	ldd	r31, Y+5	; 0x05
 696:	80 83       	st	Z, r24
 698:	0e c0       	rjmp	.+28     	; 0x6b6 <DIO_Read+0xb8>
			break;
		case GPIOD:
			*data = PORTD_PIN & pins;
 69a:	e0 e3       	ldi	r30, 0x30	; 48
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	90 81       	ld	r25, Z
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	89 23       	and	r24, r25
 6a4:	ec 81       	ldd	r30, Y+4	; 0x04
 6a6:	fd 81       	ldd	r31, Y+5	; 0x05
 6a8:	80 83       	st	Z, r24
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <DIO_Read+0xb8>
			break;
		default:
			au8_Ret = E_NOK;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_Read+0xb8>
			break;
		}
	}else
	{
		au8_Ret = E_NOK;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b8:	27 96       	adiw	r28, 0x07	; 7
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	cf 91       	pop	r28
 6c6:	df 91       	pop	r29
 6c8:	08 95       	ret

000006ca <DIO_Toggle>:

ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
 6ca:	df 93       	push	r29
 6cc:	cf 93       	push	r28
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <DIO_Toggle+0x6>
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <DIO_Toggle+0x8>
 6d2:	0f 92       	push	r0
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	8a 83       	std	Y+2, r24	; 0x02
 6da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
 6dc:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which port value to be toggled */
	switch(GPIO)
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3d 83       	std	Y+5, r19	; 0x05
 6e6:	2c 83       	std	Y+4, r18	; 0x04
 6e8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ea:	9d 81       	ldd	r25, Y+5	; 0x05
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	91 05       	cpc	r25, r1
 6f0:	f1 f0       	breq	.+60     	; 0x72e <DIO_Toggle+0x64>
 6f2:	2c 81       	ldd	r18, Y+4	; 0x04
 6f4:	3d 81       	ldd	r19, Y+5	; 0x05
 6f6:	22 30       	cpi	r18, 0x02	; 2
 6f8:	31 05       	cpc	r19, r1
 6fa:	2c f4       	brge	.+10     	; 0x706 <DIO_Toggle+0x3c>
 6fc:	8c 81       	ldd	r24, Y+4	; 0x04
 6fe:	9d 81       	ldd	r25, Y+5	; 0x05
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	61 f0       	breq	.+24     	; 0x71c <DIO_Toggle+0x52>
 704:	2f c0       	rjmp	.+94     	; 0x764 <DIO_Toggle+0x9a>
 706:	2c 81       	ldd	r18, Y+4	; 0x04
 708:	3d 81       	ldd	r19, Y+5	; 0x05
 70a:	22 30       	cpi	r18, 0x02	; 2
 70c:	31 05       	cpc	r19, r1
 70e:	c1 f0       	breq	.+48     	; 0x740 <DIO_Toggle+0x76>
 710:	8c 81       	ldd	r24, Y+4	; 0x04
 712:	9d 81       	ldd	r25, Y+5	; 0x05
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	91 05       	cpc	r25, r1
 718:	e1 f0       	breq	.+56     	; 0x752 <DIO_Toggle+0x88>
 71a:	24 c0       	rjmp	.+72     	; 0x764 <DIO_Toggle+0x9a>
	{
	case GPIOA:
		PORTA_DATA ^= pins;
 71c:	ab e3       	ldi	r26, 0x3B	; 59
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	eb e3       	ldi	r30, 0x3B	; 59
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	90 81       	ld	r25, Z
 726:	8b 81       	ldd	r24, Y+3	; 0x03
 728:	89 27       	eor	r24, r25
 72a:	8c 93       	st	X, r24
 72c:	1d c0       	rjmp	.+58     	; 0x768 <DIO_Toggle+0x9e>
		break;
	case GPIOB:
		PORTB_DATA ^= pins;
 72e:	a8 e3       	ldi	r26, 0x38	; 56
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	e8 e3       	ldi	r30, 0x38	; 56
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	90 81       	ld	r25, Z
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	89 27       	eor	r24, r25
 73c:	8c 93       	st	X, r24
 73e:	14 c0       	rjmp	.+40     	; 0x768 <DIO_Toggle+0x9e>
		break;
	case GPIOC:
		PORTC_DATA ^= pins;
 740:	a5 e3       	ldi	r26, 0x35	; 53
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	e5 e3       	ldi	r30, 0x35	; 53
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	90 81       	ld	r25, Z
 74a:	8b 81       	ldd	r24, Y+3	; 0x03
 74c:	89 27       	eor	r24, r25
 74e:	8c 93       	st	X, r24
 750:	0b c0       	rjmp	.+22     	; 0x768 <DIO_Toggle+0x9e>
		break;
	case GPIOD:
		PORTD_DATA ^= pins;
 752:	a2 e3       	ldi	r26, 0x32	; 50
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	e2 e3       	ldi	r30, 0x32	; 50
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	90 81       	ld	r25, Z
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	89 27       	eor	r24, r25
 760:	8c 93       	st	X, r24
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_Toggle+0x9e>
		break;
	default:
		au8_Ret = E_NOK;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
 768:	89 81       	ldd	r24, Y+1	; 0x01
}
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	cf 91       	pop	r28
 776:	df 91       	pop	r29
 778:	08 95       	ret

0000077a <__vector_12>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(SPI_STC_vect)
{
 77a:	1f 92       	push	r1
 77c:	0f 92       	push	r0
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	0f 92       	push	r0
 782:	11 24       	eor	r1, r1
 784:	2f 93       	push	r18
 786:	3f 93       	push	r19
 788:	4f 93       	push	r20
 78a:	5f 93       	push	r21
 78c:	6f 93       	push	r22
 78e:	7f 93       	push	r23
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 794:	af 93       	push	r26
 796:	bf 93       	push	r27
 798:	ef 93       	push	r30
 79a:	ff 93       	push	r31
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
	if(g_SPI_callBackPtr != NULL)
 7a4:	80 91 82 00 	lds	r24, 0x0082
 7a8:	90 91 83 00 	lds	r25, 0x0083
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	29 f0       	breq	.+10     	; 0x7ba <__vector_12+0x40>
	{
		g_SPI_callBackPtr();
 7b0:	e0 91 82 00 	lds	r30, 0x0082
 7b4:	f0 91 83 00 	lds	r31, 0x0083
 7b8:	09 95       	icall
	}
}
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	ff 91       	pop	r31
 7c0:	ef 91       	pop	r30
 7c2:	bf 91       	pop	r27
 7c4:	af 91       	pop	r26
 7c6:	9f 91       	pop	r25
 7c8:	8f 91       	pop	r24
 7ca:	7f 91       	pop	r23
 7cc:	6f 91       	pop	r22
 7ce:	5f 91       	pop	r21
 7d0:	4f 91       	pop	r20
 7d2:	3f 91       	pop	r19
 7d4:	2f 91       	pop	r18
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	0f 90       	pop	r0
 7dc:	1f 90       	pop	r1
 7de:	18 95       	reti

000007e0 <SPI_init>:

/*
 * Description : A Function to Initialize the SPI Driver.
 */
void SPI_init(const SPI_ConfigType* ConfigPtr)
{
 7e0:	df 93       	push	r29
 7e2:	cf 93       	push	r28
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <SPI_init+0x6>
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	9a 83       	std	Y+2, r25	; 0x02
 7ec:	89 83       	std	Y+1, r24	; 0x01
	/* In case the MCU will be configured as a slave */
	if(ConfigPtr->MasterSlaveSelect == SPI_SLAVE)
 7ee:	e9 81       	ldd	r30, Y+1	; 0x01
 7f0:	fa 81       	ldd	r31, Y+2	; 0x02
 7f2:	80 81       	ld	r24, Z
 7f4:	88 23       	and	r24, r24
 7f6:	b1 f4       	brne	.+44     	; 0x824 <SPI_init+0x44>
	{
		/* select the slave mode and set the pins accordingly */
		SPI_GPIO &= ~(SS | MOSI | SCK);
 7f8:	a7 e3       	ldi	r26, 0x37	; 55
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e7 e3       	ldi	r30, 0x37	; 55
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	8f 74       	andi	r24, 0x4F	; 79
 804:	8c 93       	st	X, r24
		SPI_GPIO |= MISO;
 806:	a7 e3       	ldi	r26, 0x37	; 55
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	e7 e3       	ldi	r30, 0x37	; 55
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	80 64       	ori	r24, 0x40	; 64
 812:	8c 93       	st	X, r24
		CLEAR_BIT(SPCR, MSTR);
 814:	ad e2       	ldi	r26, 0x2D	; 45
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	ed e2       	ldi	r30, 0x2D	; 45
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 81       	ld	r24, Z
 81e:	8f 7e       	andi	r24, 0xEF	; 239
 820:	8c 93       	st	X, r24
 822:	1a c0       	rjmp	.+52     	; 0x858 <SPI_init+0x78>
	}
	/* In case the MCU will be configured as a master */
	else if(ConfigPtr->MasterSlaveSelect == SPI_MASTER)
 824:	e9 81       	ldd	r30, Y+1	; 0x01
 826:	fa 81       	ldd	r31, Y+2	; 0x02
 828:	80 81       	ld	r24, Z
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	a9 f4       	brne	.+42     	; 0x858 <SPI_init+0x78>
	{
		/* select the master mode and set the pins accordingly */
		SPI_GPIO |= SS | MOSI | SCK;
 82e:	a7 e3       	ldi	r26, 0x37	; 55
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	e7 e3       	ldi	r30, 0x37	; 55
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	80 6b       	ori	r24, 0xB0	; 176
 83a:	8c 93       	st	X, r24
		SPI_GPIO &= ~MISO;
 83c:	a7 e3       	ldi	r26, 0x37	; 55
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	e7 e3       	ldi	r30, 0x37	; 55
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	8f 7b       	andi	r24, 0xBF	; 191
 848:	8c 93       	st	X, r24
		SET_BIT(SPCR, MSTR);
 84a:	ad e2       	ldi	r26, 0x2D	; 45
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	ed e2       	ldi	r30, 0x2D	; 45
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	80 61       	ori	r24, 0x10	; 16
 856:	8c 93       	st	X, r24
	}

	/* Selecting the interrupt mode (enabled of disabled) */
	SPCR = (SPCR & 0x7F) | ConfigPtr->Mode;
 858:	ad e2       	ldi	r26, 0x2D	; 45
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	ed e2       	ldi	r30, 0x2D	; 45
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	98 2f       	mov	r25, r24
 864:	9f 77       	andi	r25, 0x7F	; 127
 866:	e9 81       	ldd	r30, Y+1	; 0x01
 868:	fa 81       	ldd	r31, Y+2	; 0x02
 86a:	81 81       	ldd	r24, Z+1	; 0x01
 86c:	89 2b       	or	r24, r25
 86e:	8c 93       	st	X, r24
	/* Enable the SPI module */
	SET_BIT(SPCR, SPE);
 870:	ad e2       	ldi	r26, 0x2D	; 45
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	ed e2       	ldi	r30, 0x2D	; 45
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	80 64       	ori	r24, 0x40	; 64
 87c:	8c 93       	st	X, r24

	/* Selecting the clock rate */
	SPCR = (SPCR & 0xFC) | ((ConfigPtr->ClockRateSelect) & 0x03);
 87e:	ad e2       	ldi	r26, 0x2D	; 45
 880:	b0 e0       	ldi	r27, 0x00	; 0
 882:	ed e2       	ldi	r30, 0x2D	; 45
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	98 2f       	mov	r25, r24
 88a:	9c 7f       	andi	r25, 0xFC	; 252
 88c:	e9 81       	ldd	r30, Y+1	; 0x01
 88e:	fa 81       	ldd	r31, Y+2	; 0x02
 890:	82 81       	ldd	r24, Z+2	; 0x02
 892:	83 70       	andi	r24, 0x03	; 3
 894:	89 2b       	or	r24, r25
 896:	8c 93       	st	X, r24
	SPSR = (SPSR & 0xFE) | ((ConfigPtr->ClockRateSelect) >> 2);
 898:	ae e2       	ldi	r26, 0x2E	; 46
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	ee e2       	ldi	r30, 0x2E	; 46
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	98 2f       	mov	r25, r24
 8a4:	9e 7f       	andi	r25, 0xFE	; 254
 8a6:	e9 81       	ldd	r30, Y+1	; 0x01
 8a8:	fa 81       	ldd	r31, Y+2	; 0x02
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	86 95       	lsr	r24
 8ae:	86 95       	lsr	r24
 8b0:	89 2b       	or	r24, r25
 8b2:	8c 93       	st	X, r24
}
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	cf 91       	pop	r28
 8ba:	df 91       	pop	r29
 8bc:	08 95       	ret

000008be <SPI_deInit>:

void SPI_deInit(void)
{
 8be:	df 93       	push	r29
 8c0:	cf 93       	push	r28
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
	SPCR_R = 0x00;
 8c6:	ed e2       	ldi	r30, 0x2D	; 45
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	10 82       	st	Z, r1
	SPSR_R = 0x00;
 8cc:	ee e2       	ldi	r30, 0x2E	; 46
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	10 82       	st	Z, r1
}
 8d2:	cf 91       	pop	r28
 8d4:	df 91       	pop	r29
 8d6:	08 95       	ret

000008d8 <SPI_setCallBack>:

/*
 * Description : A Function to set the call back function.
 */
void SPI_setCallBack(void(*a_ptr)(void))
{
 8d8:	df 93       	push	r29
 8da:	cf 93       	push	r28
 8dc:	00 d0       	rcall	.+0      	; 0x8de <SPI_setCallBack+0x6>
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
 8e2:	9a 83       	std	Y+2, r25	; 0x02
 8e4:	89 83       	std	Y+1, r24	; 0x01
	g_SPI_callBackPtr = (volatile void (*)(void))a_ptr;
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
 8e8:	9a 81       	ldd	r25, Y+2	; 0x02
 8ea:	90 93 83 00 	sts	0x0083, r25
 8ee:	80 93 82 00 	sts	0x0082, r24
}
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	cf 91       	pop	r28
 8f8:	df 91       	pop	r29
 8fa:	08 95       	ret

000008fc <SPI_sendByte>:

/*
 * Description : A Function to send a byte.
 */
void SPI_sendByte(const uint8_t data)
{
 8fc:	df 93       	push	r29
 8fe:	cf 93       	push	r28
 900:	0f 92       	push	r0
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	89 83       	std	Y+1, r24	; 0x01
	/* send the data */
	SPDR = data;
 908:	ef e2       	ldi	r30, 0x2F	; 47
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	89 81       	ldd	r24, Y+1	; 0x01
 90e:	80 83       	st	Z, r24
	/* busy-waiting the SPIE bit in the SPCR register in case interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
 910:	ed e2       	ldi	r30, 0x2D	; 45
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	88 23       	and	r24, r24
 918:	2c f0       	brlt	.+10     	; 0x924 <SPI_sendByte+0x28>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
 91a:	ee e2       	ldi	r30, 0x2E	; 46
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	88 23       	and	r24, r24
 922:	dc f7       	brge	.-10     	; 0x91a <SPI_sendByte+0x1e>
	}
}
 924:	0f 90       	pop	r0
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <SPI_receiveByte>:

/*
 * Description : A Function to receive a byte.
 */
uint8_t SPI_receiveByte(void)
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the SPIE bit in case the interrupts are disabled */
	if(BIT_IS_CLEAR(SPCR, SPIE))
 934:	ed e2       	ldi	r30, 0x2D	; 45
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	88 23       	and	r24, r24
 93c:	2c f0       	brlt	.+10     	; 0x948 <SPI_receiveByte+0x1c>
	{
		while(BIT_IS_CLEAR(SPSR, SPIF));
 93e:	ee e2       	ldi	r30, 0x2E	; 46
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	88 23       	and	r24, r24
 946:	dc f7       	brge	.-10     	; 0x93e <SPI_receiveByte+0x12>
	}
	/* read the data */
	return SPDR;
 948:	ef e2       	ldi	r30, 0x2F	; 47
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
}
 94e:	cf 91       	pop	r28
 950:	df 91       	pop	r29
 952:	08 95       	ret

00000954 <__vector_13>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(USART_RXC_vect)
{
 954:	1f 92       	push	r1
 956:	0f 92       	push	r0
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	0f 92       	push	r0
 95c:	11 24       	eor	r1, r1
 95e:	2f 93       	push	r18
 960:	3f 93       	push	r19
 962:	4f 93       	push	r20
 964:	5f 93       	push	r21
 966:	6f 93       	push	r22
 968:	7f 93       	push	r23
 96a:	8f 93       	push	r24
 96c:	9f 93       	push	r25
 96e:	af 93       	push	r26
 970:	bf 93       	push	r27
 972:	ef 93       	push	r30
 974:	ff 93       	push	r31
 976:	df 93       	push	r29
 978:	cf 93       	push	r28
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
	if(g_RXC_callBackPtr != NULL)
 97e:	80 91 86 00 	lds	r24, 0x0086
 982:	90 91 87 00 	lds	r25, 0x0087
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	29 f0       	breq	.+10     	; 0x994 <__vector_13+0x40>
	{
		g_RXC_callBackPtr();
 98a:	e0 91 86 00 	lds	r30, 0x0086
 98e:	f0 91 87 00 	lds	r31, 0x0087
 992:	09 95       	icall
	}
}
 994:	cf 91       	pop	r28
 996:	df 91       	pop	r29
 998:	ff 91       	pop	r31
 99a:	ef 91       	pop	r30
 99c:	bf 91       	pop	r27
 99e:	af 91       	pop	r26
 9a0:	9f 91       	pop	r25
 9a2:	8f 91       	pop	r24
 9a4:	7f 91       	pop	r23
 9a6:	6f 91       	pop	r22
 9a8:	5f 91       	pop	r21
 9aa:	4f 91       	pop	r20
 9ac:	3f 91       	pop	r19
 9ae:	2f 91       	pop	r18
 9b0:	0f 90       	pop	r0
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	0f 90       	pop	r0
 9b6:	1f 90       	pop	r1
 9b8:	18 95       	reti

000009ba <__vector_14>:

ISR(USART_UDRE_vect)
{
 9ba:	1f 92       	push	r1
 9bc:	0f 92       	push	r0
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	0f 92       	push	r0
 9c2:	11 24       	eor	r1, r1
 9c4:	2f 93       	push	r18
 9c6:	3f 93       	push	r19
 9c8:	4f 93       	push	r20
 9ca:	5f 93       	push	r21
 9cc:	6f 93       	push	r22
 9ce:	7f 93       	push	r23
 9d0:	8f 93       	push	r24
 9d2:	9f 93       	push	r25
 9d4:	af 93       	push	r26
 9d6:	bf 93       	push	r27
 9d8:	ef 93       	push	r30
 9da:	ff 93       	push	r31
 9dc:	df 93       	push	r29
 9de:	cf 93       	push	r28
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
	if(g_UDRE_callBackPtr != NULL)
 9e4:	80 91 88 00 	lds	r24, 0x0088
 9e8:	90 91 89 00 	lds	r25, 0x0089
 9ec:	00 97       	sbiw	r24, 0x00	; 0
 9ee:	29 f0       	breq	.+10     	; 0x9fa <__vector_14+0x40>
	{
		g_UDRE_callBackPtr();
 9f0:	e0 91 88 00 	lds	r30, 0x0088
 9f4:	f0 91 89 00 	lds	r31, 0x0089
 9f8:	09 95       	icall
	}
}
 9fa:	cf 91       	pop	r28
 9fc:	df 91       	pop	r29
 9fe:	ff 91       	pop	r31
 a00:	ef 91       	pop	r30
 a02:	bf 91       	pop	r27
 a04:	af 91       	pop	r26
 a06:	9f 91       	pop	r25
 a08:	8f 91       	pop	r24
 a0a:	7f 91       	pop	r23
 a0c:	6f 91       	pop	r22
 a0e:	5f 91       	pop	r21
 a10:	4f 91       	pop	r20
 a12:	3f 91       	pop	r19
 a14:	2f 91       	pop	r18
 a16:	0f 90       	pop	r0
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	0f 90       	pop	r0
 a1c:	1f 90       	pop	r1
 a1e:	18 95       	reti

00000a20 <__vector_15>:

ISR(USART_TXC_vect)
{
 a20:	1f 92       	push	r1
 a22:	0f 92       	push	r0
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	0f 92       	push	r0
 a28:	11 24       	eor	r1, r1
 a2a:	2f 93       	push	r18
 a2c:	3f 93       	push	r19
 a2e:	4f 93       	push	r20
 a30:	5f 93       	push	r21
 a32:	6f 93       	push	r22
 a34:	7f 93       	push	r23
 a36:	8f 93       	push	r24
 a38:	9f 93       	push	r25
 a3a:	af 93       	push	r26
 a3c:	bf 93       	push	r27
 a3e:	ef 93       	push	r30
 a40:	ff 93       	push	r31
 a42:	df 93       	push	r29
 a44:	cf 93       	push	r28
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
	if(g_TXC_callBackPtr != NULL)
 a4a:	80 91 84 00 	lds	r24, 0x0084
 a4e:	90 91 85 00 	lds	r25, 0x0085
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	29 f0       	breq	.+10     	; 0xa60 <__vector_15+0x40>
	{
		g_TXC_callBackPtr();
 a56:	e0 91 84 00 	lds	r30, 0x0084
 a5a:	f0 91 85 00 	lds	r31, 0x0085
 a5e:	09 95       	icall
	}
}
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	ff 91       	pop	r31
 a66:	ef 91       	pop	r30
 a68:	bf 91       	pop	r27
 a6a:	af 91       	pop	r26
 a6c:	9f 91       	pop	r25
 a6e:	8f 91       	pop	r24
 a70:	7f 91       	pop	r23
 a72:	6f 91       	pop	r22
 a74:	5f 91       	pop	r21
 a76:	4f 91       	pop	r20
 a78:	3f 91       	pop	r19
 a7a:	2f 91       	pop	r18
 a7c:	0f 90       	pop	r0
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	0f 90       	pop	r0
 a82:	1f 90       	pop	r1
 a84:	18 95       	reti

00000a86 <UART_TXC_setCallBack>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void UART_TXC_setCallBack(void(*local_ptr)(void))
{
 a86:	df 93       	push	r29
 a88:	cf 93       	push	r28
 a8a:	00 d0       	rcall	.+0      	; 0xa8c <UART_TXC_setCallBack+0x6>
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
 a90:	9a 83       	std	Y+2, r25	; 0x02
 a92:	89 83       	std	Y+1, r24	; 0x01
	g_TXC_callBackPtr = (volatile void(*)(void))local_ptr;
 a94:	89 81       	ldd	r24, Y+1	; 0x01
 a96:	9a 81       	ldd	r25, Y+2	; 0x02
 a98:	90 93 85 00 	sts	0x0085, r25
 a9c:	80 93 84 00 	sts	0x0084, r24
}
 aa0:	0f 90       	pop	r0
 aa2:	0f 90       	pop	r0
 aa4:	cf 91       	pop	r28
 aa6:	df 91       	pop	r29
 aa8:	08 95       	ret

00000aaa <UART_RXC_setCallBack>:

void UART_RXC_setCallBack(void(*local_ptr)(void))
{
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	00 d0       	rcall	.+0      	; 0xab0 <UART_RXC_setCallBack+0x6>
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
 ab4:	9a 83       	std	Y+2, r25	; 0x02
 ab6:	89 83       	std	Y+1, r24	; 0x01
	g_RXC_callBackPtr = (volatile void(*)(void))local_ptr;
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	9a 81       	ldd	r25, Y+2	; 0x02
 abc:	90 93 87 00 	sts	0x0087, r25
 ac0:	80 93 86 00 	sts	0x0086, r24
}
 ac4:	0f 90       	pop	r0
 ac6:	0f 90       	pop	r0
 ac8:	cf 91       	pop	r28
 aca:	df 91       	pop	r29
 acc:	08 95       	ret

00000ace <UART_UDRE_setCallBack>:

void UART_UDRE_setCallBack(void(*local_ptr)(void))
{
 ace:	df 93       	push	r29
 ad0:	cf 93       	push	r28
 ad2:	00 d0       	rcall	.+0      	; 0xad4 <UART_UDRE_setCallBack+0x6>
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
 ad8:	9a 83       	std	Y+2, r25	; 0x02
 ada:	89 83       	std	Y+1, r24	; 0x01
	g_UDRE_callBackPtr = (volatile void(*)(void))local_ptr;
 adc:	89 81       	ldd	r24, Y+1	; 0x01
 ade:	9a 81       	ldd	r25, Y+2	; 0x02
 ae0:	90 93 89 00 	sts	0x0089, r25
 ae4:	80 93 88 00 	sts	0x0088, r24
}
 ae8:	0f 90       	pop	r0
 aea:	0f 90       	pop	r0
 aec:	cf 91       	pop	r28
 aee:	df 91       	pop	r29
 af0:	08 95       	ret

00000af2 <UART_init>:

void UART_init(const UART_ConfigType* ConfigPtr)
{
 af2:	df 93       	push	r29
 af4:	cf 93       	push	r28
 af6:	00 d0       	rcall	.+0      	; 0xaf8 <UART_init+0x6>
 af8:	00 d0       	rcall	.+0      	; 0xafa <UART_init+0x8>
 afa:	cd b7       	in	r28, 0x3d	; 61
 afc:	de b7       	in	r29, 0x3e	; 62
 afe:	9a 83       	std	Y+2, r25	; 0x02
 b00:	89 83       	std	Y+1, r24	; 0x01
	/* Activating double speed mode */
	SET_BIT(UCSRA_R, U2X);
 b02:	ab e2       	ldi	r26, 0x2B	; 43
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	eb e2       	ldi	r30, 0x2B	; 43
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	82 60       	ori	r24, 0x02	; 2
 b0e:	8c 93       	st	X, r24

	/* Deciding whether the MCU will operate as a sender/receiver/sender and receiver */
	switch(ConfigPtr->communicationMode)
 b10:	e9 81       	ldd	r30, Y+1	; 0x01
 b12:	fa 81       	ldd	r31, Y+2	; 0x02
 b14:	81 81       	ldd	r24, Z+1	; 0x01
 b16:	28 2f       	mov	r18, r24
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	3c 83       	std	Y+4, r19	; 0x04
 b1c:	2b 83       	std	Y+3, r18	; 0x03
 b1e:	8b 81       	ldd	r24, Y+3	; 0x03
 b20:	9c 81       	ldd	r25, Y+4	; 0x04
 b22:	81 30       	cpi	r24, 0x01	; 1
 b24:	91 05       	cpc	r25, r1
 b26:	f1 f0       	breq	.+60     	; 0xb64 <UART_init+0x72>
 b28:	2b 81       	ldd	r18, Y+3	; 0x03
 b2a:	3c 81       	ldd	r19, Y+4	; 0x04
 b2c:	22 30       	cpi	r18, 0x02	; 2
 b2e:	31 05       	cpc	r19, r1
 b30:	69 f1       	breq	.+90     	; 0xb8c <UART_init+0x9a>
 b32:	8b 81       	ldd	r24, Y+3	; 0x03
 b34:	9c 81       	ldd	r25, Y+4	; 0x04
 b36:	00 97       	sbiw	r24, 0x00	; 0
 b38:	09 f0       	breq	.+2      	; 0xb3c <UART_init+0x4a>
 b3a:	49 c0       	rjmp	.+146    	; 0xbce <UART_init+0xdc>
	{
	case UART_SENDER_MODE:
		SET_BIT(UCSRB_R, TXEN);
 b3c:	aa e2       	ldi	r26, 0x2A	; 42
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	ea e2       	ldi	r30, 0x2A	; 42
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	80 81       	ld	r24, Z
 b46:	88 60       	ori	r24, 0x08	; 8
 b48:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 b4a:	e9 81       	ldd	r30, Y+1	; 0x01
 b4c:	fa 81       	ldd	r31, Y+2	; 0x02
 b4e:	85 81       	ldd	r24, Z+5	; 0x05
 b50:	81 30       	cpi	r24, 0x01	; 1
 b52:	e9 f5       	brne	.+122    	; 0xbce <UART_init+0xdc>
			SET_BIT(UCSRB_R, TXCIE);
 b54:	aa e2       	ldi	r26, 0x2A	; 42
 b56:	b0 e0       	ldi	r27, 0x00	; 0
 b58:	ea e2       	ldi	r30, 0x2A	; 42
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	80 81       	ld	r24, Z
 b5e:	80 64       	ori	r24, 0x40	; 64
 b60:	8c 93       	st	X, r24
 b62:	35 c0       	rjmp	.+106    	; 0xbce <UART_init+0xdc>
		break;
	case UART_RECEIVER_MODE:
		SET_BIT(UCSRB_R, RXEN);
 b64:	aa e2       	ldi	r26, 0x2A	; 42
 b66:	b0 e0       	ldi	r27, 0x00	; 0
 b68:	ea e2       	ldi	r30, 0x2A	; 42
 b6a:	f0 e0       	ldi	r31, 0x00	; 0
 b6c:	80 81       	ld	r24, Z
 b6e:	80 61       	ori	r24, 0x10	; 16
 b70:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 b72:	e9 81       	ldd	r30, Y+1	; 0x01
 b74:	fa 81       	ldd	r31, Y+2	; 0x02
 b76:	85 81       	ldd	r24, Z+5	; 0x05
 b78:	81 30       	cpi	r24, 0x01	; 1
 b7a:	49 f5       	brne	.+82     	; 0xbce <UART_init+0xdc>
			SET_BIT(UCSRB_R, RXCIE);
 b7c:	aa e2       	ldi	r26, 0x2A	; 42
 b7e:	b0 e0       	ldi	r27, 0x00	; 0
 b80:	ea e2       	ldi	r30, 0x2A	; 42
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	80 81       	ld	r24, Z
 b86:	80 68       	ori	r24, 0x80	; 128
 b88:	8c 93       	st	X, r24
 b8a:	21 c0       	rjmp	.+66     	; 0xbce <UART_init+0xdc>
		break;
	case UART_SENDER_RECEIVER_MODE:
		SET_BIT(UCSRB_R, TXEN);
 b8c:	aa e2       	ldi	r26, 0x2A	; 42
 b8e:	b0 e0       	ldi	r27, 0x00	; 0
 b90:	ea e2       	ldi	r30, 0x2A	; 42
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	80 81       	ld	r24, Z
 b96:	88 60       	ori	r24, 0x08	; 8
 b98:	8c 93       	st	X, r24
		SET_BIT(UCSRB_R, RXEN);
 b9a:	aa e2       	ldi	r26, 0x2A	; 42
 b9c:	b0 e0       	ldi	r27, 0x00	; 0
 b9e:	ea e2       	ldi	r30, 0x2A	; 42
 ba0:	f0 e0       	ldi	r31, 0x00	; 0
 ba2:	80 81       	ld	r24, Z
 ba4:	80 61       	ori	r24, 0x10	; 16
 ba6:	8c 93       	st	X, r24
		if(ConfigPtr->interruptMode == UART_INTERRUPT_ENABLED)
 ba8:	e9 81       	ldd	r30, Y+1	; 0x01
 baa:	fa 81       	ldd	r31, Y+2	; 0x02
 bac:	85 81       	ldd	r24, Z+5	; 0x05
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	71 f4       	brne	.+28     	; 0xbce <UART_init+0xdc>
		{
			SET_BIT(UCSRB_R, TXCIE);
 bb2:	aa e2       	ldi	r26, 0x2A	; 42
 bb4:	b0 e0       	ldi	r27, 0x00	; 0
 bb6:	ea e2       	ldi	r30, 0x2A	; 42
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	80 81       	ld	r24, Z
 bbc:	80 64       	ori	r24, 0x40	; 64
 bbe:	8c 93       	st	X, r24
			SET_BIT(UCSRB_R, RXCIE);
 bc0:	aa e2       	ldi	r26, 0x2A	; 42
 bc2:	b0 e0       	ldi	r27, 0x00	; 0
 bc4:	ea e2       	ldi	r30, 0x2A	; 42
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	80 81       	ld	r24, Z
 bca:	80 68       	ori	r24, 0x80	; 128
 bcc:	8c 93       	st	X, r24
		}
		break;
	}

	/* Selecting the character size (for the bits in UCSRB register) */
	UCSRB_R = (UCSRB_R & 0xFB) | (ConfigPtr->charSize & 0x04);
 bce:	aa e2       	ldi	r26, 0x2A	; 42
 bd0:	b0 e0       	ldi	r27, 0x00	; 0
 bd2:	ea e2       	ldi	r30, 0x2A	; 42
 bd4:	f0 e0       	ldi	r31, 0x00	; 0
 bd6:	80 81       	ld	r24, Z
 bd8:	98 2f       	mov	r25, r24
 bda:	9b 7f       	andi	r25, 0xFB	; 251
 bdc:	e9 81       	ldd	r30, Y+1	; 0x01
 bde:	fa 81       	ldd	r31, Y+2	; 0x02
 be0:	82 81       	ldd	r24, Z+2	; 0x02
 be2:	84 70       	andi	r24, 0x04	; 4
 be4:	89 2b       	or	r24, r25
 be6:	8c 93       	st	X, r24

	UCSRC_R |= ConfigPtr->mode | ((ConfigPtr->charSize & 0x03) << UCSZ0) |
 be8:	a0 e4       	ldi	r26, 0x40	; 64
 bea:	b0 e0       	ldi	r27, 0x00	; 0
 bec:	e0 e4       	ldi	r30, 0x40	; 64
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	80 81       	ld	r24, Z
 bf2:	38 2f       	mov	r19, r24
 bf4:	e9 81       	ldd	r30, Y+1	; 0x01
 bf6:	fa 81       	ldd	r31, Y+2	; 0x02
 bf8:	80 81       	ld	r24, Z
 bfa:	28 2f       	mov	r18, r24
 bfc:	e9 81       	ldd	r30, Y+1	; 0x01
 bfe:	fa 81       	ldd	r31, Y+2	; 0x02
 c00:	82 81       	ldd	r24, Z+2	; 0x02
 c02:	88 2f       	mov	r24, r24
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	83 70       	andi	r24, 0x03	; 3
 c08:	90 70       	andi	r25, 0x00	; 0
 c0a:	88 0f       	add	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	82 2b       	or	r24, r18
 c10:	98 2f       	mov	r25, r24
 c12:	90 68       	ori	r25, 0x80	; 128
 c14:	e9 81       	ldd	r30, Y+1	; 0x01
 c16:	fa 81       	ldd	r31, Y+2	; 0x02
 c18:	83 81       	ldd	r24, Z+3	; 0x03
 c1a:	98 2b       	or	r25, r24
 c1c:	e9 81       	ldd	r30, Y+1	; 0x01
 c1e:	fa 81       	ldd	r31, Y+2	; 0x02
 c20:	84 81       	ldd	r24, Z+4	; 0x04
 c22:	89 2b       	or	r24, r25
 c24:	83 2b       	or	r24, r19
 c26:	8c 93       	st	X, r24
			(1 << URSEL) | ConfigPtr->parityMode | ConfigPtr->stopBits;

	/* Choosing the baud rate of the process */
	UBRRH_R = BAUDPRESCALE >> 8;
 c28:	e0 e4       	ldi	r30, 0x40	; 64
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	10 82       	st	Z, r1
	UBRRL_R = BAUDPRESCALE;
 c2e:	e9 e2       	ldi	r30, 0x29	; 41
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	8f ec       	ldi	r24, 0xCF	; 207
 c34:	80 83       	st	Z, r24
}
 c36:	0f 90       	pop	r0
 c38:	0f 90       	pop	r0
 c3a:	0f 90       	pop	r0
 c3c:	0f 90       	pop	r0
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	08 95       	ret

00000c44 <UART_deInit>:

void UART_deInit(void)
{
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62
	UCSRA_R = 0x20;
 c4c:	eb e2       	ldi	r30, 0x2B	; 43
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	80 e2       	ldi	r24, 0x20	; 32
 c52:	80 83       	st	Z, r24
	UCSRB_R = 0x00;
 c54:	ea e2       	ldi	r30, 0x2A	; 42
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	10 82       	st	Z, r1
	UCSRC_R = 0x06;
 c5a:	e0 e4       	ldi	r30, 0x40	; 64
 c5c:	f0 e0       	ldi	r31, 0x00	; 0
 c5e:	86 e0       	ldi	r24, 0x06	; 6
 c60:	80 83       	st	Z, r24
	UBRRL_R = 0x00;
 c62:	e9 e2       	ldi	r30, 0x29	; 41
 c64:	f0 e0       	ldi	r31, 0x00	; 0
 c66:	10 82       	st	Z, r1
}
 c68:	cf 91       	pop	r28
 c6a:	df 91       	pop	r29
 c6c:	08 95       	ret

00000c6e <UART_transmit>:

void UART_transmit(const uint8_t data)
{
 c6e:	df 93       	push	r29
 c70:	cf 93       	push	r28
 c72:	0f 92       	push	r0
 c74:	cd b7       	in	r28, 0x3d	; 61
 c76:	de b7       	in	r29, 0x3e	; 62
 c78:	89 83       	std	Y+1, r24	; 0x01
	/* busy-waiting the UDRE bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB_R, TXCIE))
 c7a:	ea e2       	ldi	r30, 0x2A	; 42
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	80 81       	ld	r24, Z
 c80:	88 2f       	mov	r24, r24
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	80 74       	andi	r24, 0x40	; 64
 c86:	90 70       	andi	r25, 0x00	; 0
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	49 f4       	brne	.+18     	; 0xc9e <UART_transmit+0x30>
		while(BIT_IS_CLEAR(UCSRA_R, UDRE));
 c8c:	eb e2       	ldi	r30, 0x2B	; 43
 c8e:	f0 e0       	ldi	r31, 0x00	; 0
 c90:	80 81       	ld	r24, Z
 c92:	88 2f       	mov	r24, r24
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	80 72       	andi	r24, 0x20	; 32
 c98:	90 70       	andi	r25, 0x00	; 0
 c9a:	00 97       	sbiw	r24, 0x00	; 0
 c9c:	b9 f3       	breq	.-18     	; 0xc8c <UART_transmit+0x1e>
	/* sending the data */
	UDR = data;
 c9e:	ec e2       	ldi	r30, 0x2C	; 44
 ca0:	f0 e0       	ldi	r31, 0x00	; 0
 ca2:	89 81       	ldd	r24, Y+1	; 0x01
 ca4:	80 83       	st	Z, r24
}
 ca6:	0f 90       	pop	r0
 ca8:	cf 91       	pop	r28
 caa:	df 91       	pop	r29
 cac:	08 95       	ret

00000cae <UART_receive>:

uint8_t UART_receive(void)
{
 cae:	df 93       	push	r29
 cb0:	cf 93       	push	r28
 cb2:	cd b7       	in	r28, 0x3d	; 61
 cb4:	de b7       	in	r29, 0x3e	; 62
	/* busy-waiting the RXC bit in the UCSRA register in case interrupt is disabled */
	if(BIT_IS_CLEAR(UCSRB_R, RXCIE))
 cb6:	ea e2       	ldi	r30, 0x2A	; 42
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	80 81       	ld	r24, Z
 cbc:	88 23       	and	r24, r24
 cbe:	2c f0       	brlt	.+10     	; 0xcca <UART_receive+0x1c>
		while(BIT_IS_CLEAR(UCSRA_R, RXC));
 cc0:	eb e2       	ldi	r30, 0x2B	; 43
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	80 81       	ld	r24, Z
 cc6:	88 23       	and	r24, r24
 cc8:	dc f7       	brge	.-10     	; 0xcc0 <UART_receive+0x12>
	/* read the received data */
	return UDR;
 cca:	ec e2       	ldi	r30, 0x2C	; 44
 ccc:	f0 e0       	ldi	r31, 0x00	; 0
 cce:	80 81       	ld	r24, Z
}
 cd0:	cf 91       	pop	r28
 cd2:	df 91       	pop	r29
 cd4:	08 95       	ret

00000cd6 <UART_Send_String>:

void UART_Send_String(char* str)
{
 cd6:	df 93       	push	r29
 cd8:	cf 93       	push	r28
 cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_Send_String+0x6>
 cdc:	00 d0       	rcall	.+0      	; 0xcde <UART_Send_String+0x8>
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
 ce2:	9c 83       	std	Y+4, r25	; 0x04
 ce4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t index = 0;
 ce6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t data = 0;
 ce8:	19 82       	std	Y+1, r1	; 0x01
 cea:	10 c0       	rjmp	.+32     	; 0xd0c <UART_Send_String+0x36>

	while(str[index])
	{
		data=str[index++];
 cec:	8a 81       	ldd	r24, Y+2	; 0x02
 cee:	28 2f       	mov	r18, r24
 cf0:	30 e0       	ldi	r19, 0x00	; 0
 cf2:	8b 81       	ldd	r24, Y+3	; 0x03
 cf4:	9c 81       	ldd	r25, Y+4	; 0x04
 cf6:	fc 01       	movw	r30, r24
 cf8:	e2 0f       	add	r30, r18
 cfa:	f3 1f       	adc	r31, r19
 cfc:	80 81       	ld	r24, Z
 cfe:	89 83       	std	Y+1, r24	; 0x01
 d00:	8a 81       	ldd	r24, Y+2	; 0x02
 d02:	8f 5f       	subi	r24, 0xFF	; 255
 d04:	8a 83       	std	Y+2, r24	; 0x02
		UART_transmit(data);
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	0e 94 37 06 	call	0xc6e	; 0xc6e <UART_transmit>
void UART_Send_String(char* str)
{
	uint8_t index = 0;
	uint8_t data = 0;

	while(str[index])
 d0c:	8a 81       	ldd	r24, Y+2	; 0x02
 d0e:	28 2f       	mov	r18, r24
 d10:	30 e0       	ldi	r19, 0x00	; 0
 d12:	8b 81       	ldd	r24, Y+3	; 0x03
 d14:	9c 81       	ldd	r25, Y+4	; 0x04
 d16:	fc 01       	movw	r30, r24
 d18:	e2 0f       	add	r30, r18
 d1a:	f3 1f       	adc	r31, r19
 d1c:	80 81       	ld	r24, Z
 d1e:	88 23       	and	r24, r24
 d20:	29 f7       	brne	.-54     	; 0xcec <UART_Send_String+0x16>
	{
		data=str[index++];
		UART_transmit(data);
	}
}
 d22:	0f 90       	pop	r0
 d24:	0f 90       	pop	r0
 d26:	0f 90       	pop	r0
 d28:	0f 90       	pop	r0
 d2a:	cf 91       	pop	r28
 d2c:	df 91       	pop	r29
 d2e:	08 95       	ret

00000d30 <UART_receiveString>:


void UART_receiveString(sint8_t* Str)
{
 d30:	0f 93       	push	r16
 d32:	1f 93       	push	r17
 d34:	df 93       	push	r29
 d36:	cf 93       	push	r28
 d38:	00 d0       	rcall	.+0      	; 0xd3a <UART_receiveString+0xa>
 d3a:	0f 92       	push	r0
 d3c:	cd b7       	in	r28, 0x3d	; 61
 d3e:	de b7       	in	r29, 0x3e	; 62
 d40:	9b 83       	std	Y+3, r25	; 0x03
 d42:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 d44:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receive();
 d46:	89 81       	ldd	r24, Y+1	; 0x01
 d48:	28 2f       	mov	r18, r24
 d4a:	30 e0       	ldi	r19, 0x00	; 0
 d4c:	8a 81       	ldd	r24, Y+2	; 0x02
 d4e:	9b 81       	ldd	r25, Y+3	; 0x03
 d50:	8c 01       	movw	r16, r24
 d52:	02 0f       	add	r16, r18
 d54:	13 1f       	adc	r17, r19
 d56:	0e 94 57 06 	call	0xcae	; 0xcae <UART_receive>
 d5a:	f8 01       	movw	r30, r16
 d5c:	80 83       	st	Z, r24
 d5e:	0f c0       	rjmp	.+30     	; 0xd7e <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
 d60:	89 81       	ldd	r24, Y+1	; 0x01
 d62:	8f 5f       	subi	r24, 0xFF	; 255
 d64:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receive();
 d66:	89 81       	ldd	r24, Y+1	; 0x01
 d68:	28 2f       	mov	r18, r24
 d6a:	30 e0       	ldi	r19, 0x00	; 0
 d6c:	8a 81       	ldd	r24, Y+2	; 0x02
 d6e:	9b 81       	ldd	r25, Y+3	; 0x03
 d70:	8c 01       	movw	r16, r24
 d72:	02 0f       	add	r16, r18
 d74:	13 1f       	adc	r17, r19
 d76:	0e 94 57 06 	call	0xcae	; 0xcae <UART_receive>
 d7a:	f8 01       	movw	r30, r16
 d7c:	80 83       	st	Z, r24

void UART_receiveString(sint8_t* Str)
{
	uint8_t i = 0;
	Str[i] = UART_receive();
	while(Str[i] != '#')
 d7e:	89 81       	ldd	r24, Y+1	; 0x01
 d80:	28 2f       	mov	r18, r24
 d82:	30 e0       	ldi	r19, 0x00	; 0
 d84:	8a 81       	ldd	r24, Y+2	; 0x02
 d86:	9b 81       	ldd	r25, Y+3	; 0x03
 d88:	fc 01       	movw	r30, r24
 d8a:	e2 0f       	add	r30, r18
 d8c:	f3 1f       	adc	r31, r19
 d8e:	80 81       	ld	r24, Z
 d90:	83 32       	cpi	r24, 0x23	; 35
 d92:	31 f7       	brne	.-52     	; 0xd60 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receive();
	}
	Str[i] = '\0';
 d94:	89 81       	ldd	r24, Y+1	; 0x01
 d96:	28 2f       	mov	r18, r24
 d98:	30 e0       	ldi	r19, 0x00	; 0
 d9a:	8a 81       	ldd	r24, Y+2	; 0x02
 d9c:	9b 81       	ldd	r25, Y+3	; 0x03
 d9e:	fc 01       	movw	r30, r24
 da0:	e2 0f       	add	r30, r18
 da2:	f3 1f       	adc	r31, r19
 da4:	10 82       	st	Z, r1
}
 da6:	0f 90       	pop	r0
 da8:	0f 90       	pop	r0
 daa:	0f 90       	pop	r0
 dac:	cf 91       	pop	r28
 dae:	df 91       	pop	r29
 db0:	1f 91       	pop	r17
 db2:	0f 91       	pop	r16
 db4:	08 95       	ret

00000db6 <app>:
volatile uint8_t flag = 1;
uint8_t arr[20] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
		11, 12, 13, 14, 15, 16, 17, 18, 19, 20};

void app(void)
{
 db6:	df 93       	push	r29
 db8:	cf 93       	push	r28
 dba:	cd b7       	in	r28, 0x3d	; 61
 dbc:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
 dbe:	81 e0       	ldi	r24, 0x01	; 1
 dc0:	80 93 60 00 	sts	0x0060, r24
}
 dc4:	cf 91       	pop	r28
 dc6:	df 91       	pop	r29
 dc8:	08 95       	ret

00000dca <main>:


int main(void)
{
 dca:	df 93       	push	r29
 dcc:	cf 93       	push	r28
 dce:	cd b7       	in	r28, 0x3d	; 61
 dd0:	de b7       	in	r29, 0x3e	; 62
 dd2:	28 97       	sbiw	r28, 0x08	; 8
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
	strBcmConfig_t BCM_cfg = {
			BCM_UART_ID,
			BCM_TRANSMIT,
			&app
	};
 dde:	80 ea       	ldi	r24, 0xA0	; 160
 de0:	89 83       	std	Y+1, r24	; 0x01
 de2:	1a 82       	std	Y+2, r1	; 0x02
 de4:	8b ed       	ldi	r24, 0xDB	; 219
 de6:	96 e0       	ldi	r25, 0x06	; 6
 de8:	9c 83       	std	Y+4, r25	; 0x04
 dea:	8b 83       	std	Y+3, r24	; 0x03

	strBcmStartConfig_t BCM_startCfg = {
			BCM_UART_ID,
			&arr[0],
			20,
	};
 dec:	80 ea       	ldi	r24, 0xA0	; 160
 dee:	8d 83       	std	Y+5, r24	; 0x05
 df0:	81 e6       	ldi	r24, 0x61	; 97
 df2:	90 e0       	ldi	r25, 0x00	; 0
 df4:	9f 83       	std	Y+7, r25	; 0x07
 df6:	8e 83       	std	Y+6, r24	; 0x06
 df8:	84 e1       	ldi	r24, 0x14	; 20
 dfa:	88 87       	std	Y+8, r24	; 0x08

	BCM_Init(&BCM_cfg);
 dfc:	ce 01       	movw	r24, r28
 dfe:	01 96       	adiw	r24, 0x01	; 1
 e00:	0e 94 49 00 	call	0x92	; 0x92 <BCM_Init>

	sei();
 e04:	78 94       	sei

	while(1)
	{
		if(flag == 1)
 e06:	80 91 60 00 	lds	r24, 0x0060
 e0a:	81 30       	cpi	r24, 0x01	; 1
 e0c:	e1 f7       	brne	.-8      	; 0xe06 <main+0x3c>
		{
			flag = 0;
 e0e:	10 92 60 00 	sts	0x0060, r1

			BCM_Send(&BCM_startCfg);
 e12:	ce 01       	movw	r24, r28
 e14:	05 96       	adiw	r24, 0x05	; 5
 e16:	0e 94 55 01 	call	0x2aa	; 0x2aa <BCM_Send>
 e1a:	f5 cf       	rjmp	.-22     	; 0xe06 <main+0x3c>

00000e1c <_exit>:
 e1c:	f8 94       	cli

00000e1e <__stop_program>:
 e1e:	ff cf       	rjmp	.-2      	; 0xe1e <__stop_program>
